{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"BlueRPC","text":"<p>BlueRPC is a project that aims to be a simple way to communicate with multiple bluetooth devices in a large area using a proxy system.</p> <p>See Getting Started for setup instructions.</p> <p>These proxies are available for Windows/Linux/MacOS with the python worker and for Android/Android TV with the android worker.</p> <p>The system can then be used to expand your bluetooth range: for example, you can install these workers around your house and use Home-Assistant to manage all your bluetooth IoT devices (similar to esphome bluetooth proxies).</p> <p>The data is transmitted over gRPC, a high-performance RPC famework made on top of HTTP/2 and using protobuf as serialization mechanism. Encryption and authentication is supported using mTLS.</p> <p>The following diagram sums up the project</p> <p></p>"},{"location":"1-getting-started/","title":"Getting Started","text":"<p>To get started with BlueRPC, you need to install at least one worker and an integration.</p>"},{"location":"1-getting-started/#worker","title":"Worker","text":"<p>The workers are responsible for relaying the bluetooth commands to your bluetooth devices, they are currently two types of worker availables.</p> <p>For a computer running Linux, MacOS or Windows, use the python worker. You can install it with <code>pip install bluerpc</code> and run it directly with the command <code>bluerpc</code>.</p> <p>For an android smartphone or a tv/box running android tv, use the android worker. You can download the apk file on the latest release.</p>"},{"location":"1-getting-started/#integration","title":"Integration","text":"<p>Currently, the only integration is for Home-Assistant.</p> <p>You can install it using HACS:</p> <ul> <li>In the HACS options &gt; Custom Repositories, add the following repository and select \"Integration\" as category.</li> <li>Then,in HACS, install the BlueRPC integration</li> <li>Finally, in the \"Devices &amp; Services\" page, add a new instance of the BlueRPC integration.</li> </ul> <p>You need to repeat the third step for each worker.</p> <p>You need to fill in the IP address of the worker, the port (by default 5052) and the name of the worker. </p> <p>If autodiscovery is enabled, the workers will be detected automatically and you will just need to click the \"configure\" button to add them.</p>"},{"location":"2-developers/","title":"Developers","text":"<p>The main repository for the BlueRPC project is bluerpc/bluerpc which contains:</p> <ul> <li>The protocol definition in <code>proto/</code></li> <li>The python worker implementation in <code>python/</code></li> <li>The android worker implementation in <code>android/</code></li> <li>The project's tests scripts in <code>test/</code></li> <li>The documentation in <code>docs/</code></li> </ul> <p>There is also an other repository for the Home-Assistant integration: bluerpc/hass</p>"},{"location":"2-developers/#setting-up-the-environment","title":"Setting up the environment","text":"<p>The first step is to clone the main repository.</p> <p>Then you need to install the dependencies, if you are on a debian-based distribution, you can just run <code>sudo make deps-debian</code> which will install all the system dependencies (except for android). You can also run <code>make deps-python</code> to install the python dependencies.</p> <p>Note that some python dependencies must be available in your path (like isort or black).</p> <p>Here is a list of the required dependencies for each part of the project:</p> <ul> <li>Protobuf generation: buf, <code>proto/requirements.txt</code></li> <li>Android worker: Java 17, Android SDK</li> <li>Python worker: C compiler, <code>python/requirements.txt</code></li> <li>Documentation: protoc, protoc-gen-doc, <code>docs/requirements.txt</code></li> </ul>"},{"location":"2-developers/#development-instructions","title":"Development instructions","text":""},{"location":"2-developers/#protocol","title":"Protocol","text":"<p>To validate the protobuf files, run <code>make proto-lint</code></p>"},{"location":"2-developers/#python-worker","title":"Python Worker","text":"<p>First, run <code>make python-proto</code> to generate the gRPC stubs.</p> <p>You can then lint the project with <code>make python-lint</code> and run it with <code>python run.py</code>.</p> <p>To build a python package, run <code>make python-build</code>.</p>"},{"location":"2-developers/#android-worker","title":"Android Worker","text":"<p>It is recommanded to use Android Studio for development.</p> <p>First, copy the proto files to the android project with <code>make android-proto</code></p> <p>Then you can build the app either from the IDE or with <code>make android-build</code>.</p>"},{"location":"2-developers/#documentation","title":"Documentation","text":"<p>To build the documentation, you also need the worker's dependencies.</p> <p>To build all the docs, run <code>make docs</code>, you can also run <code>make docs-serve</code> to start a local server.</p> <p>The android documentation is generated from the javadoc comments with dokka.</p> <p>The python documentation is generated from the docstrings in google format using lazydocs.</p>"},{"location":"2-developers/#testing","title":"Testing","text":"<p>A few testing scripts are available for the project.</p> <p>These scripts are running real bluetooth commands against bluetooth devices, currently there is a test for the miflora sensor and the switchbot bot. There is also a test for scanning and discovery.</p> <p>You can run these tests with a command like this <code>pytest ./test_scan_grpc.py::test_scan --url=\"127.0.0.1:5052\"</code>.</p> <p>To test using encryption, use <code>make certs</code> to generate certificates and use <code>--keystore=../certs/client.pfx</code> for the test script and <code>certs/worker.pfx</code> for the worker.</p> <p>The following parameters are supported:</p> <ul> <li>url: the ip:port of the worker</li> <li>mac: the mac address of the bluetooth device (for test_miflora_grpc and test_switchbot_grpc)</li> <li>keystore: path to a keystore for mTLS</li> </ul>"},{"location":"integrations/hass/","title":"Home Assistant","text":"<p>This integration provides a Bluetooth proxy implementation using BlueRPC.</p>"},{"location":"integrations/hass/#installation","title":"Installation","text":"<p>To install this integration, you will need to edit a few this about your installation:</p> <p>(This is caused by limitations on the way integrations are installed: to enable this one, we need to add it to a file of the bluetooth_adapters integrations, and we also need to manually install the <code>bluerpc-client</code> package because the <code>grpcio</code> package in home-assistant is pinned to an incompatible version).</p>"},{"location":"integrations/hass/#for-docker","title":"For docker","text":"<p>You will need to use this dockerfile to build your home-assistant image.</p> <p>You can then install this integration using HACS:</p> <ul> <li>In the HACS options &gt; Custom Repositories, add the following repository and select \"Integration\" as category.</li> <li>Then, in HACS, install the BlueRPC integration</li> <li>Finally, in the \"Devices &amp; Services\" page, add a new instance of the BlueRPC integration.</li> </ul>"},{"location":"integrations/hass/#configuration","title":"Configuration","text":"<p>When you add a new instance of the BlueRPC integration, you will need to fill in the IP address of the worker, the port (by default 5052) and the name of the worker. </p> <p>If autodiscovery is enabled, the workers will be detected automatically and you will just need to click the \"configure\" button to add them.</p> <p>The last field is for the keystore password (to enable encryption), you need to set the same password on the worker (either in the app settings for android or using the <code>--keystore-password</code> option for python). It is recommanded to use a strong password and to not reuse it between multiple workers.</p>"},{"location":"integrations/python-client/","title":"Python Client","text":""},{"location":"reference/android/","title":"Index","text":"<p>//app</p>"},{"location":"reference/android/#app","title":"app","text":""},{"location":"reference/android/#packages","title":"Packages","text":"Name com.bluerpc.worker"},{"location":"reference/android/app/com.bluerpc.worker/","title":"Index","text":"<p>//app/com.bluerpc.worker</p>"},{"location":"reference/android/app/com.bluerpc.worker/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"reference/android/app/com.bluerpc.worker/#types","title":"Types","text":"Name Summary BLEConnection [androidJvm]class BLEConnection(ctx: Context) BLEDeviceData [androidJvm]class BLEDeviceData(val gattDevice: BluetoothGatt, val device: &lt;Error class: unknown class&gt;) BLEScanner [androidJvm]class BLEScannerClass handling BLE Scanning BlueRPCService [androidJvm]class BlueRPCService(ctx: Context) Const [androidJvm]object ConstConstants Mostly used for key and defaults for shared preferences ForegroundService [androidJvm]class ForegroundService : Service MainActivity [androidJvm]class MainActivity : AppCompatActivity MainViewModel [androidJvm]class MainViewModel(application: Application) : AndroidViewModel PermissionFragment [androidJvm]class PermissionFragment : FragmentFragment used to request all required permissions and to enable bluetooth/location SettingsActivity [androidJvm]class SettingsActivity : AppCompatActivitySettings Activity Allows to configure name and port for the worker"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-connection/","title":"Index","text":"<p>//app/com.bluerpc.worker/BLEConnection</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-connection/#bleconnection","title":"BLEConnection","text":"<p>[androidJvm]\\ class BLEConnection(ctx: Context)</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-connection/#constructors","title":"Constructors","text":"BLEConnection [androidJvm]constructor(ctx: Context)"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-connection/#functions","title":"Functions","text":"Name Summary connect [androidJvm]fun connect(request: &lt;Error class: unknown class&gt;, responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;) disconnect [androidJvm]fun disconnect(request: &lt;Error class: unknown class&gt;, responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;) getConnectionProperties [androidJvm]fun getConnectionProperties(request: &lt;Error class: unknown class&gt;, responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;) getDevices [androidJvm]fun getDevices(responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;) listServices [androidJvm]fun listServices(request: &lt;Error class: unknown class&gt;, responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;) notification [androidJvm]fun notification(request: &lt;Error class: unknown class&gt;, responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;) readCharacteristic [androidJvm]fun readCharacteristic(request: &lt;Error class: unknown class&gt;, responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;) readDescriptor [androidJvm]fun readDescriptor(request: &lt;Error class: unknown class&gt;, responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;) writeCharacteristic [androidJvm]fun writeCharacteristic(request: &lt;Error class: unknown class&gt;, responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;) writeDescriptor [androidJvm]fun writeDescriptor(request: &lt;Error class: unknown class&gt;, responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;)"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-connection/#properties","title":"Properties","text":"Name Summary disconnectObservers [androidJvm]var disconnectObservers: MutableList&lt;StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;&gt; notificationObservers [androidJvm]var notificationObservers: MutableList&lt;StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;&gt;"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-connection/-b-l-e-connection/","title":"b l e connection","text":"<p>//app/com.bluerpc.worker/BLEConnection/BLEConnection</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-connection/-b-l-e-connection/#bleconnection","title":"BLEConnection","text":"<p>[androidJvm]\\ constructor(ctx: Context)</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-connection/connect/","title":"Connect","text":"<p>//app/com.bluerpc.worker/BLEConnection/connect</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-connection/connect/#connect","title":"connect","text":"<p>[androidJvm]\\ fun connect(request: &lt;Error class: unknown class&gt;, responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;)</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-connection/disconnect-observers/","title":"Disconnect observers","text":"<p>//app/com.bluerpc.worker/BLEConnection/disconnectObservers</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-connection/disconnect-observers/#disconnectobservers","title":"disconnectObservers","text":"<p>[androidJvm]\\ var disconnectObservers: MutableList&lt;StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;&gt;</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-connection/disconnect/","title":"Disconnect","text":"<p>//app/com.bluerpc.worker/BLEConnection/disconnect</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-connection/disconnect/#disconnect","title":"disconnect","text":"<p>[androidJvm]\\ fun disconnect(request: &lt;Error class: unknown class&gt;, responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;)</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-connection/get-connection-properties/","title":"Get connection properties","text":"<p>//app/com.bluerpc.worker/BLEConnection/getConnectionProperties</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-connection/get-connection-properties/#getconnectionproperties","title":"getConnectionProperties","text":"<p>[androidJvm]\\ fun getConnectionProperties(request: &lt;Error class: unknown class&gt;, responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;)</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-connection/get-devices/","title":"Get devices","text":"<p>//app/com.bluerpc.worker/BLEConnection/getDevices</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-connection/get-devices/#getdevices","title":"getDevices","text":"<p>[androidJvm]\\ fun getDevices(responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;)</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-connection/list-services/","title":"List services","text":"<p>//app/com.bluerpc.worker/BLEConnection/listServices</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-connection/list-services/#listservices","title":"listServices","text":"<p>[androidJvm]\\ fun listServices(request: &lt;Error class: unknown class&gt;, responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;)</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-connection/notification-observers/","title":"Notification observers","text":"<p>//app/com.bluerpc.worker/BLEConnection/notificationObservers</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-connection/notification-observers/#notificationobservers","title":"notificationObservers","text":"<p>[androidJvm]\\ var notificationObservers: MutableList&lt;StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;&gt;</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-connection/notification/","title":"Notification","text":"<p>//app/com.bluerpc.worker/BLEConnection/notification</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-connection/notification/#notification","title":"notification","text":"<p>[androidJvm]\\ fun notification(request: &lt;Error class: unknown class&gt;, responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;)</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-connection/read-characteristic/","title":"Read characteristic","text":"<p>//app/com.bluerpc.worker/BLEConnection/readCharacteristic</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-connection/read-characteristic/#readcharacteristic","title":"readCharacteristic","text":"<p>[androidJvm]\\ fun readCharacteristic(request: &lt;Error class: unknown class&gt;, responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;)</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-connection/read-descriptor/","title":"Read descriptor","text":"<p>//app/com.bluerpc.worker/BLEConnection/readDescriptor</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-connection/read-descriptor/#readdescriptor","title":"readDescriptor","text":"<p>[androidJvm]\\ fun readDescriptor(request: &lt;Error class: unknown class&gt;, responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;)</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-connection/write-characteristic/","title":"Write characteristic","text":"<p>//app/com.bluerpc.worker/BLEConnection/writeCharacteristic</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-connection/write-characteristic/#writecharacteristic","title":"writeCharacteristic","text":"<p>[androidJvm]\\ fun writeCharacteristic(request: &lt;Error class: unknown class&gt;, responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;)</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-connection/write-descriptor/","title":"Write descriptor","text":"<p>//app/com.bluerpc.worker/BLEConnection/writeDescriptor</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-connection/write-descriptor/#writedescriptor","title":"writeDescriptor","text":"<p>[androidJvm]\\ fun writeDescriptor(request: &lt;Error class: unknown class&gt;, responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;)</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-device-data/","title":"Index","text":"<p>//app/com.bluerpc.worker/BLEDeviceData</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-device-data/#bledevicedata","title":"BLEDeviceData","text":"<p>[androidJvm]\\ class BLEDeviceData(val gattDevice: BluetoothGatt, val device: &lt;Error class: unknown class&gt;)</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-device-data/#constructors","title":"Constructors","text":"BLEDeviceData [androidJvm]constructor(gattDevice: BluetoothGatt, device: &lt;Error class: unknown class&gt;)"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-device-data/#functions","title":"Functions","text":"Name Summary cancel [androidJvm]fun cancel() done [androidJvm]fun done() finishDiscovery [androidJvm]fun finishDiscovery() setConnPropsResponseObserver [androidJvm]fun setConnPropsResponseObserver(obs: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;) setConnRssi [androidJvm]fun setConnRssi(value: Float?) setGATT [androidJvm]fun setGATT(svc: String, chr: String, desc: String = \"\")"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-device-data/#properties","title":"Properties","text":"Name Summary characteristic [androidJvm]var characteristic: String descriptor [androidJvm]var descriptor: String device [androidJvm]val device: &lt;Error class: unknown class&gt; discoveryFinished [androidJvm]var discoveryFinished: Boolean gattDevice [androidJvm]val gattDevice: BluetoothGatt lockOperation [androidJvm]var lockOperation: Boolean readResponseObserver [androidJvm]var readResponseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;? service [androidJvm]var service: String statusResponseObserver [androidJvm]var statusResponseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;?"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-device-data/-b-l-e-device-data/","title":"b l e device data","text":"<p>//app/com.bluerpc.worker/BLEDeviceData/BLEDeviceData</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-device-data/-b-l-e-device-data/#bledevicedata","title":"BLEDeviceData","text":"<p>[androidJvm]\\ constructor(gattDevice: BluetoothGatt, device: &lt;Error class: unknown class&gt;)</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-device-data/cancel/","title":"Cancel","text":"<p>//app/com.bluerpc.worker/BLEDeviceData/cancel</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-device-data/cancel/#cancel","title":"cancel","text":"<p>[androidJvm]\\ fun cancel()</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-device-data/characteristic/","title":"Characteristic","text":"<p>//app/com.bluerpc.worker/BLEDeviceData/characteristic</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-device-data/characteristic/#characteristic","title":"characteristic","text":"<p>[androidJvm]\\ var characteristic: String</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-device-data/descriptor/","title":"Descriptor","text":"<p>//app/com.bluerpc.worker/BLEDeviceData/descriptor</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-device-data/descriptor/#descriptor","title":"descriptor","text":"<p>[androidJvm]\\ var descriptor: String</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-device-data/device/","title":"Device","text":"<p>//app/com.bluerpc.worker/BLEDeviceData/device</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-device-data/device/#device","title":"device","text":"<p>[androidJvm]\\ val device: &lt;Error class: unknown class&gt;</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-device-data/discovery-finished/","title":"Discovery finished","text":"<p>//app/com.bluerpc.worker/BLEDeviceData/discoveryFinished</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-device-data/discovery-finished/#discoveryfinished","title":"discoveryFinished","text":"<p>[androidJvm]\\ var discoveryFinished: Boolean</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-device-data/done/","title":"Done","text":"<p>//app/com.bluerpc.worker/BLEDeviceData/done</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-device-data/done/#done","title":"done","text":"<p>[androidJvm]\\ fun done()</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-device-data/finish-discovery/","title":"Finish discovery","text":"<p>//app/com.bluerpc.worker/BLEDeviceData/finishDiscovery</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-device-data/finish-discovery/#finishdiscovery","title":"finishDiscovery","text":"<p>[androidJvm]\\ fun finishDiscovery()</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-device-data/gatt-device/","title":"Gatt device","text":"<p>//app/com.bluerpc.worker/BLEDeviceData/gattDevice</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-device-data/gatt-device/#gattdevice","title":"gattDevice","text":"<p>[androidJvm]\\ val gattDevice: BluetoothGatt</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-device-data/lock-operation/","title":"Lock operation","text":"<p>//app/com.bluerpc.worker/BLEDeviceData/lockOperation</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-device-data/lock-operation/#lockoperation","title":"lockOperation","text":"<p>[androidJvm]\\ var lockOperation: Boolean</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-device-data/read-response-observer/","title":"Read response observer","text":"<p>//app/com.bluerpc.worker/BLEDeviceData/readResponseObserver</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-device-data/read-response-observer/#readresponseobserver","title":"readResponseObserver","text":"<p>[androidJvm]\\ var readResponseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;?</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-device-data/service/","title":"Service","text":"<p>//app/com.bluerpc.worker/BLEDeviceData/service</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-device-data/service/#service","title":"service","text":"<p>[androidJvm]\\ var service: String</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-device-data/set-conn-props-response-observer/","title":"Set conn props response observer","text":"<p>//app/com.bluerpc.worker/BLEDeviceData/setConnPropsResponseObserver</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-device-data/set-conn-props-response-observer/#setconnpropsresponseobserver","title":"setConnPropsResponseObserver","text":"<p>[androidJvm]\\ fun setConnPropsResponseObserver(obs: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;)</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-device-data/set-conn-rssi/","title":"Set conn rssi","text":"<p>//app/com.bluerpc.worker/BLEDeviceData/setConnRssi</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-device-data/set-conn-rssi/#setconnrssi","title":"setConnRssi","text":"<p>[androidJvm]\\ fun setConnRssi(value: Float?)</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-device-data/set-g-a-t-t/","title":"Set g a t t","text":"<p>//app/com.bluerpc.worker/BLEDeviceData/setGATT</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-device-data/set-g-a-t-t/#setgatt","title":"setGATT","text":"<p>[androidJvm]\\ fun setGATT(svc: String, chr: String, desc: String = \"\")</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-device-data/status-response-observer/","title":"Status response observer","text":"<p>//app/com.bluerpc.worker/BLEDeviceData/statusResponseObserver</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-device-data/status-response-observer/#statusresponseobserver","title":"statusResponseObserver","text":"<p>[androidJvm]\\ var statusResponseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;?</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-scanner/","title":"Index","text":"<p>//app/com.bluerpc.worker/BLEScanner</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-scanner/#blescanner","title":"BLEScanner","text":"<p>[androidJvm]\\ class BLEScanner</p> <p>Class handling BLE Scanning</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-scanner/#constructors","title":"Constructors","text":"BLEScanner [androidJvm]constructor()"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-scanner/#functions","title":"Functions","text":"Name Summary scan [androidJvm]fun scan(active: Boolean, interval: Long)Start BLE scan setScanFilters [androidJvm]fun setScanFilters(filters: List&lt;&lt;Error class: unknown class&gt;&gt;, mergeFilters: Boolean)Convert gRPC BLEScanFilter to nordic ScanFilter stopScan [androidJvm]fun stopScan()"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-scanner/#properties","title":"Properties","text":"Name Summary isRunning [androidJvm]var isRunning: Boolean observers [androidJvm]val observers: MutableList&lt;StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;&gt;"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-scanner/-b-l-e-scanner/","title":"b l e scanner","text":"<p>//app/com.bluerpc.worker/BLEScanner/BLEScanner</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-scanner/-b-l-e-scanner/#blescanner","title":"BLEScanner","text":"<p>[androidJvm]\\ constructor()</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-scanner/is-running/","title":"Is running","text":"<p>//app/com.bluerpc.worker/BLEScanner/isRunning</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-scanner/is-running/#isrunning","title":"isRunning","text":"<p>[androidJvm]\\ var isRunning: Boolean</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-scanner/observers/","title":"Observers","text":"<p>//app/com.bluerpc.worker/BLEScanner/observers</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-scanner/observers/#observers","title":"observers","text":"<p>[androidJvm]\\ val observers: MutableList&lt;StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;&gt;</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-scanner/scan/","title":"Scan","text":"<p>//app/com.bluerpc.worker/BLEScanner/scan</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-scanner/scan/#scan","title":"scan","text":"<p>[androidJvm]\\ fun scan(active: Boolean, interval: Long)</p> <p>Start BLE scan</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-scanner/scan/#parameters","title":"Parameters","text":"<p>androidJvm</p> active if the scan is in active or passive mode interval scan interval"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-scanner/set-scan-filters/","title":"Set scan filters","text":"<p>//app/com.bluerpc.worker/BLEScanner/setScanFilters</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-scanner/set-scan-filters/#setscanfilters","title":"setScanFilters","text":"<p>[androidJvm]\\ fun setScanFilters(filters: List&lt;&lt;Error class: unknown class&gt;&gt;, mergeFilters: Boolean)</p> <p>Convert gRPC BLEScanFilter to nordic ScanFilter</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-scanner/set-scan-filters/#parameters","title":"Parameters","text":"<p>androidJvm</p> filters filters received in the gRPC request mergeFilters if the new filters should be merged with the existing ones or replace them"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-scanner/stop-scan/","title":"Stop scan","text":"<p>//app/com.bluerpc.worker/BLEScanner/stopScan</p>"},{"location":"reference/android/app/com.bluerpc.worker/-b-l-e-scanner/stop-scan/#stopscan","title":"stopScan","text":"<p>[androidJvm]\\ fun stopScan()</p>"},{"location":"reference/android/app/com.bluerpc.worker/-blue-r-p-c-service/","title":"Index","text":"<p>//app/com.bluerpc.worker/BlueRPCService</p>"},{"location":"reference/android/app/com.bluerpc.worker/-blue-r-p-c-service/#bluerpcservice","title":"BlueRPCService","text":"<p>[androidJvm]\\ class BlueRPCService(ctx: Context)</p>"},{"location":"reference/android/app/com.bluerpc.worker/-blue-r-p-c-service/#constructors","title":"Constructors","text":"BlueRPCService [androidJvm]constructor(ctx: Context)"},{"location":"reference/android/app/com.bluerpc.worker/-blue-r-p-c-service/#functions","title":"Functions","text":"Name Summary bLEConnect [androidJvm]open fun bLEConnect(request: &lt;Error class: unknown class&gt;?, responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;?)connect bLEDisconnect [androidJvm]open fun bLEDisconnect(request: &lt;Error class: unknown class&gt;?, responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;?)disconnect bLEGetConnectionProperties [androidJvm]open fun bLEGetConnectionProperties(request: &lt;Error class: unknown class&gt;?, responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;?)get connection properties bLEGetDevices [androidJvm]open fun bLEGetDevices(request: Void?, responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;?)get a list of connected and paired devices bLEListServices [androidJvm]open fun bLEListServices(request: &lt;Error class: unknown class&gt;?, responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;?)list services, characteristics and descriptors for a device bLENotification [androidJvm]open fun bLENotification(request: &lt;Error class: unknown class&gt;?, responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;?)subscribe or unsubscribe to a characteristic notification bLEPair [androidJvm]open fun bLEPair(request: &lt;Error class: unknown class&gt;?, responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;?)pair bLEPairCode [androidJvm]open fun bLEPairCode(request: &lt;Error class: unknown class&gt;?, responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;?)pairing code (should be called after BLEPair when ERROR_CODE_PAIRING_CODE_REQUIRED is returned) bLEReadCharacteristic [androidJvm]open fun bLEReadCharacteristic(request: &lt;Error class: unknown class&gt;?, responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;?)read characteristic bLEReadDescriptor [androidJvm]open fun bLEReadDescriptor(request: &lt;Error class: unknown class&gt;?, responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;?)read descriptor bLEReceiveDisconnect [androidJvm]open fun bLEReceiveDisconnect(request: Void?, responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;?)global method to receive disconnect notifications bLEReceiveNotifications [androidJvm]open fun bLEReceiveNotifications(request: Void?, responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;?)global method to receive all the subscribed notifications bLEReceiveScan [androidJvm]open fun bLEReceiveScan(request: Void?, responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;?)global method to receive scan results bLEScanStart [androidJvm]open fun bLEScanStart(request: &lt;Error class: unknown class&gt;?, responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;?)start a scanner bLEScanStop [androidJvm]open fun bLEScanStop(request: Void?, responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;?)stop the scanner bLEUnpair [androidJvm]open fun bLEUnpair(request: &lt;Error class: unknown class&gt;?, responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;?)unpair bLEWriteCharacteristic [androidJvm]open fun bLEWriteCharacteristic(request: &lt;Error class: unknown class&gt;?, responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;?)write characteristic bLEWriteDescriptor [androidJvm]open fun bLEWriteDescriptor(request: &lt;Error class: unknown class&gt;?, responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;?)write descriptor hello [androidJvm]open fun hello(request: &lt;Error class: unknown class&gt;?, responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;?) setKeystore [androidJvm]open fun setKeystore(request: &lt;Error class: unknown class&gt;?, responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;?)set the keystore"},{"location":"reference/android/app/com.bluerpc.worker/-blue-r-p-c-service/-blue-r-p-c-service/","title":"blue r p c service","text":"<p>//app/com.bluerpc.worker/BlueRPCService/BlueRPCService</p>"},{"location":"reference/android/app/com.bluerpc.worker/-blue-r-p-c-service/-blue-r-p-c-service/#bluerpcservice","title":"BlueRPCService","text":"<p>[androidJvm]\\ constructor(ctx: Context)</p>"},{"location":"reference/android/app/com.bluerpc.worker/-blue-r-p-c-service/b-l-e-connect/","title":"B l e connect","text":"<p>//app/com.bluerpc.worker/BlueRPCService/bLEConnect</p>"},{"location":"reference/android/app/com.bluerpc.worker/-blue-r-p-c-service/b-l-e-connect/#bleconnect","title":"bLEConnect","text":"<p>[androidJvm]\\ open fun bLEConnect(request: &lt;Error class: unknown class&gt;?, responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;?)</p> <p>connect</p>"},{"location":"reference/android/app/com.bluerpc.worker/-blue-r-p-c-service/b-l-e-disconnect/","title":"B l e disconnect","text":"<p>//app/com.bluerpc.worker/BlueRPCService/bLEDisconnect</p>"},{"location":"reference/android/app/com.bluerpc.worker/-blue-r-p-c-service/b-l-e-disconnect/#bledisconnect","title":"bLEDisconnect","text":"<p>[androidJvm]\\ open fun bLEDisconnect(request: &lt;Error class: unknown class&gt;?, responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;?)</p> <p>disconnect</p>"},{"location":"reference/android/app/com.bluerpc.worker/-blue-r-p-c-service/b-l-e-get-connection-properties/","title":"B l e get connection properties","text":"<p>//app/com.bluerpc.worker/BlueRPCService/bLEGetConnectionProperties</p>"},{"location":"reference/android/app/com.bluerpc.worker/-blue-r-p-c-service/b-l-e-get-connection-properties/#blegetconnectionproperties","title":"bLEGetConnectionProperties","text":"<p>[androidJvm]\\ open fun bLEGetConnectionProperties(request: &lt;Error class: unknown class&gt;?, responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;?)</p> <p>get connection properties</p>"},{"location":"reference/android/app/com.bluerpc.worker/-blue-r-p-c-service/b-l-e-get-devices/","title":"B l e get devices","text":"<p>//app/com.bluerpc.worker/BlueRPCService/bLEGetDevices</p>"},{"location":"reference/android/app/com.bluerpc.worker/-blue-r-p-c-service/b-l-e-get-devices/#blegetdevices","title":"bLEGetDevices","text":"<p>[androidJvm]\\ open fun bLEGetDevices(request: Void?, responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;?)</p> <p>get a list of connected and paired devices</p>"},{"location":"reference/android/app/com.bluerpc.worker/-blue-r-p-c-service/b-l-e-list-services/","title":"B l e list services","text":"<p>//app/com.bluerpc.worker/BlueRPCService/bLEListServices</p>"},{"location":"reference/android/app/com.bluerpc.worker/-blue-r-p-c-service/b-l-e-list-services/#blelistservices","title":"bLEListServices","text":"<p>[androidJvm]\\ open fun bLEListServices(request: &lt;Error class: unknown class&gt;?, responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;?)</p> <p>list services, characteristics and descriptors for a device</p>"},{"location":"reference/android/app/com.bluerpc.worker/-blue-r-p-c-service/b-l-e-notification/","title":"B l e notification","text":"<p>//app/com.bluerpc.worker/BlueRPCService/bLENotification</p>"},{"location":"reference/android/app/com.bluerpc.worker/-blue-r-p-c-service/b-l-e-notification/#blenotification","title":"bLENotification","text":"<p>[androidJvm]\\ open fun bLENotification(request: &lt;Error class: unknown class&gt;?, responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;?)</p> <p>subscribe or unsubscribe to a characteristic notification</p>"},{"location":"reference/android/app/com.bluerpc.worker/-blue-r-p-c-service/b-l-e-pair-code/","title":"B l e pair code","text":"<p>//app/com.bluerpc.worker/BlueRPCService/bLEPairCode</p>"},{"location":"reference/android/app/com.bluerpc.worker/-blue-r-p-c-service/b-l-e-pair-code/#blepaircode","title":"bLEPairCode","text":"<p>[androidJvm]\\ open fun bLEPairCode(request: &lt;Error class: unknown class&gt;?, responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;?)</p> <p>pairing code (should be called after BLEPair when ERROR_CODE_PAIRING_CODE_REQUIRED is returned)</p>"},{"location":"reference/android/app/com.bluerpc.worker/-blue-r-p-c-service/b-l-e-pair/","title":"B l e pair","text":"<p>//app/com.bluerpc.worker/BlueRPCService/bLEPair</p>"},{"location":"reference/android/app/com.bluerpc.worker/-blue-r-p-c-service/b-l-e-pair/#blepair","title":"bLEPair","text":"<p>[androidJvm]\\ open fun bLEPair(request: &lt;Error class: unknown class&gt;?, responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;?)</p> <p>pair</p>"},{"location":"reference/android/app/com.bluerpc.worker/-blue-r-p-c-service/b-l-e-read-characteristic/","title":"B l e read characteristic","text":"<p>//app/com.bluerpc.worker/BlueRPCService/bLEReadCharacteristic</p>"},{"location":"reference/android/app/com.bluerpc.worker/-blue-r-p-c-service/b-l-e-read-characteristic/#blereadcharacteristic","title":"bLEReadCharacteristic","text":"<p>[androidJvm]\\ open fun bLEReadCharacteristic(request: &lt;Error class: unknown class&gt;?, responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;?)</p> <p>read characteristic</p>"},{"location":"reference/android/app/com.bluerpc.worker/-blue-r-p-c-service/b-l-e-read-descriptor/","title":"B l e read descriptor","text":"<p>//app/com.bluerpc.worker/BlueRPCService/bLEReadDescriptor</p>"},{"location":"reference/android/app/com.bluerpc.worker/-blue-r-p-c-service/b-l-e-read-descriptor/#blereaddescriptor","title":"bLEReadDescriptor","text":"<p>[androidJvm]\\ open fun bLEReadDescriptor(request: &lt;Error class: unknown class&gt;?, responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;?)</p> <p>read descriptor</p>"},{"location":"reference/android/app/com.bluerpc.worker/-blue-r-p-c-service/b-l-e-receive-disconnect/","title":"B l e receive disconnect","text":"<p>//app/com.bluerpc.worker/BlueRPCService/bLEReceiveDisconnect</p>"},{"location":"reference/android/app/com.bluerpc.worker/-blue-r-p-c-service/b-l-e-receive-disconnect/#blereceivedisconnect","title":"bLEReceiveDisconnect","text":"<p>[androidJvm]\\ open fun bLEReceiveDisconnect(request: Void?, responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;?)</p> <p>global method to receive disconnect notifications</p>"},{"location":"reference/android/app/com.bluerpc.worker/-blue-r-p-c-service/b-l-e-receive-notifications/","title":"B l e receive notifications","text":"<p>//app/com.bluerpc.worker/BlueRPCService/bLEReceiveNotifications</p>"},{"location":"reference/android/app/com.bluerpc.worker/-blue-r-p-c-service/b-l-e-receive-notifications/#blereceivenotifications","title":"bLEReceiveNotifications","text":"<p>[androidJvm]\\ open fun bLEReceiveNotifications(request: Void?, responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;?)</p> <p>global method to receive all the subscribed notifications</p>"},{"location":"reference/android/app/com.bluerpc.worker/-blue-r-p-c-service/b-l-e-receive-scan/","title":"B l e receive scan","text":"<p>//app/com.bluerpc.worker/BlueRPCService/bLEReceiveScan</p>"},{"location":"reference/android/app/com.bluerpc.worker/-blue-r-p-c-service/b-l-e-receive-scan/#blereceivescan","title":"bLEReceiveScan","text":"<p>[androidJvm]\\ open fun bLEReceiveScan(request: Void?, responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;?)</p> <p>global method to receive scan results</p>"},{"location":"reference/android/app/com.bluerpc.worker/-blue-r-p-c-service/b-l-e-scan-start/","title":"B l e scan start","text":"<p>//app/com.bluerpc.worker/BlueRPCService/bLEScanStart</p>"},{"location":"reference/android/app/com.bluerpc.worker/-blue-r-p-c-service/b-l-e-scan-start/#blescanstart","title":"bLEScanStart","text":"<p>[androidJvm]\\ open fun bLEScanStart(request: &lt;Error class: unknown class&gt;?, responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;?)</p> <p>start a scanner</p>"},{"location":"reference/android/app/com.bluerpc.worker/-blue-r-p-c-service/b-l-e-scan-stop/","title":"B l e scan stop","text":"<p>//app/com.bluerpc.worker/BlueRPCService/bLEScanStop</p>"},{"location":"reference/android/app/com.bluerpc.worker/-blue-r-p-c-service/b-l-e-scan-stop/#blescanstop","title":"bLEScanStop","text":"<p>[androidJvm]\\ open fun bLEScanStop(request: Void?, responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;?)</p> <p>stop the scanner</p>"},{"location":"reference/android/app/com.bluerpc.worker/-blue-r-p-c-service/b-l-e-unpair/","title":"B l e unpair","text":"<p>//app/com.bluerpc.worker/BlueRPCService/bLEUnpair</p>"},{"location":"reference/android/app/com.bluerpc.worker/-blue-r-p-c-service/b-l-e-unpair/#bleunpair","title":"bLEUnpair","text":"<p>[androidJvm]\\ open fun bLEUnpair(request: &lt;Error class: unknown class&gt;?, responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;?)</p> <p>unpair</p>"},{"location":"reference/android/app/com.bluerpc.worker/-blue-r-p-c-service/b-l-e-write-characteristic/","title":"B l e write characteristic","text":"<p>//app/com.bluerpc.worker/BlueRPCService/bLEWriteCharacteristic</p>"},{"location":"reference/android/app/com.bluerpc.worker/-blue-r-p-c-service/b-l-e-write-characteristic/#blewritecharacteristic","title":"bLEWriteCharacteristic","text":"<p>[androidJvm]\\ open fun bLEWriteCharacteristic(request: &lt;Error class: unknown class&gt;?, responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;?)</p> <p>write characteristic</p>"},{"location":"reference/android/app/com.bluerpc.worker/-blue-r-p-c-service/b-l-e-write-descriptor/","title":"B l e write descriptor","text":"<p>//app/com.bluerpc.worker/BlueRPCService/bLEWriteDescriptor</p>"},{"location":"reference/android/app/com.bluerpc.worker/-blue-r-p-c-service/b-l-e-write-descriptor/#blewritedescriptor","title":"bLEWriteDescriptor","text":"<p>[androidJvm]\\ open fun bLEWriteDescriptor(request: &lt;Error class: unknown class&gt;?, responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;?)</p> <p>write descriptor</p>"},{"location":"reference/android/app/com.bluerpc.worker/-blue-r-p-c-service/hello/","title":"Hello","text":"<p>//app/com.bluerpc.worker/BlueRPCService/hello</p>"},{"location":"reference/android/app/com.bluerpc.worker/-blue-r-p-c-service/hello/#hello","title":"hello","text":"<p>[androidJvm]\\ open fun hello(request: &lt;Error class: unknown class&gt;?, responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;?)</p>"},{"location":"reference/android/app/com.bluerpc.worker/-blue-r-p-c-service/set-keystore/","title":"Set keystore","text":"<p>//app/com.bluerpc.worker/BlueRPCService/setKeystore</p>"},{"location":"reference/android/app/com.bluerpc.worker/-blue-r-p-c-service/set-keystore/#setkeystore","title":"setKeystore","text":"<p>[androidJvm]\\ open fun setKeystore(request: &lt;Error class: unknown class&gt;?, responseObserver: StreamObserver&lt;&lt;Error class: unknown class&gt;&gt;?)</p> <p>set the keystore</p>"},{"location":"reference/android/app/com.bluerpc.worker/-const/","title":"Index","text":"<p>//app/com.bluerpc.worker/Const</p>"},{"location":"reference/android/app/com.bluerpc.worker/-const/#const","title":"Const","text":"<p>[androidJvm]\\ object Const</p> <p>Constants Mostly used for key and defaults for shared preferences</p>"},{"location":"reference/android/app/com.bluerpc.worker/-const/#properties","title":"Properties","text":"Name Summary CFG_ENABLE_MDNS [androidJvm]const val CFG_ENABLE_MDNS: StringEnable mDNS broadcasting to allow auto-discovery by the clients CFG_ENABLE_MDS_DEFAULT [androidJvm]const val CFG_ENABLE_MDS_DEFAULT: Boolean = true CFG_NAME [androidJvm]const val CFG_NAME: String CFG_PORT [androidJvm]const val CFG_PORT: String CFG_PORT_DEFAULT [androidJvm]const val CFG_PORT_DEFAULT: Int = 5052 CFG_SCANNING_MODE [androidJvm]const val CFG_SCANNING_MODE: StringBackground Scanning Modes FILTER: default mode, the worker will report scanning limitations to the client so that it will provide filters SCREEN_ON: The worker will darken the screen but force it to stay on to allow background scanning without filter limitations IGNORE: The worker will report no limitations to the client (can be useful if you already have an app keeping the screen on) CFG_SCANNING_MODE_DEFAULT [androidJvm]const val CFG_SCANNING_MODE_DEFAULT: Int = 0 CFG_SCANNING_MODE_FILTER [androidJvm]const val CFG_SCANNING_MODE_FILTER: Int = 0 CFG_SCANNING_MODE_IGNORE [androidJvm]const val CFG_SCANNING_MODE_IGNORE: Int = 2 CFG_SCANNING_MODE_SCREEN_ON [androidJvm]const val CFG_SCANNING_MODE_SCREEN_ON: Int = 1 CFG_TLS_ENABLE [androidJvm]const val CFG_TLS_ENABLE: StringEnable secure mode needs a keystore CFG_TLS_ENABLE_DEFAULT [androidJvm]const val CFG_TLS_ENABLE_DEFAULT: Boolean = false CFG_TLS_KEYSTORE [androidJvm]const val CFG_TLS_KEYSTORE: StringPath to the keystore CFG_TLS_KEYSTORE_DEFAULT [androidJvm]const val CFG_TLS_KEYSTORE_DEFAULT: String CFG_TLS_KEYSTORE_PASSWORD [androidJvm]const val CFG_TLS_KEYSTORE_PASSWORD: StringKeystore Password DEFAULT_MAC [androidJvm]const val DEFAULT_MAC: String KEYSTORE_DEFAULT_PATH [androidJvm]const val KEYSTORE_DEFAULT_PATH: String SHARED_PREF [androidJvm]const val SHARED_PREF: String"},{"location":"reference/android/app/com.bluerpc.worker/-const/-c-f-g_-e-n-a-b-l-e_-m-d-n-s/","title":"c f g  e n a b l e  m d n s","text":"<p>//app/com.bluerpc.worker/Const/CFG_ENABLE_MDNS</p>"},{"location":"reference/android/app/com.bluerpc.worker/-const/-c-f-g_-e-n-a-b-l-e_-m-d-n-s/#cfg_enable_mdns","title":"CFG_ENABLE_MDNS","text":"<p>[androidJvm]\\ const val CFG_ENABLE_MDNS: String</p> <p>Enable mDNS broadcasting to allow auto-discovery by the clients</p>"},{"location":"reference/android/app/com.bluerpc.worker/-const/-c-f-g_-e-n-a-b-l-e_-m-d-s_-d-e-f-a-u-l-t/","title":"c f g  e n a b l e  m d s  d e f a u l t","text":"<p>//app/com.bluerpc.worker/Const/CFG_ENABLE_MDS_DEFAULT</p>"},{"location":"reference/android/app/com.bluerpc.worker/-const/-c-f-g_-e-n-a-b-l-e_-m-d-s_-d-e-f-a-u-l-t/#cfg_enable_mds_default","title":"CFG_ENABLE_MDS_DEFAULT","text":"<p>[androidJvm]\\ const val CFG_ENABLE_MDS_DEFAULT: Boolean = true</p>"},{"location":"reference/android/app/com.bluerpc.worker/-const/-c-f-g_-n-a-m-e/","title":"c f g  n a m e","text":"<p>//app/com.bluerpc.worker/Const/CFG_NAME</p>"},{"location":"reference/android/app/com.bluerpc.worker/-const/-c-f-g_-n-a-m-e/#cfg_name","title":"CFG_NAME","text":"<p>[androidJvm]\\ const val CFG_NAME: String</p>"},{"location":"reference/android/app/com.bluerpc.worker/-const/-c-f-g_-p-o-r-t/","title":"c f g  p o r t","text":"<p>//app/com.bluerpc.worker/Const/CFG_PORT</p>"},{"location":"reference/android/app/com.bluerpc.worker/-const/-c-f-g_-p-o-r-t/#cfg_port","title":"CFG_PORT","text":"<p>[androidJvm]\\ const val CFG_PORT: String</p>"},{"location":"reference/android/app/com.bluerpc.worker/-const/-c-f-g_-p-o-r-t_-d-e-f-a-u-l-t/","title":"c f g  p o r t  d e f a u l t","text":"<p>//app/com.bluerpc.worker/Const/CFG_PORT_DEFAULT</p>"},{"location":"reference/android/app/com.bluerpc.worker/-const/-c-f-g_-p-o-r-t_-d-e-f-a-u-l-t/#cfg_port_default","title":"CFG_PORT_DEFAULT","text":"<p>[androidJvm]\\ const val CFG_PORT_DEFAULT: Int = 5052</p>"},{"location":"reference/android/app/com.bluerpc.worker/-const/-c-f-g_-s-c-a-n-n-i-n-g_-m-o-d-e/","title":"c f g  s c a n n i n g  m o d e","text":"<p>//app/com.bluerpc.worker/Const/CFG_SCANNING_MODE</p>"},{"location":"reference/android/app/com.bluerpc.worker/-const/-c-f-g_-s-c-a-n-n-i-n-g_-m-o-d-e/#cfg_scanning_mode","title":"CFG_SCANNING_MODE","text":"<p>[androidJvm]\\ const val CFG_SCANNING_MODE: String</p> <p>Background Scanning Modes FILTER: default mode, the worker will report scanning limitations to the client so that it will provide filters SCREEN_ON: The worker will darken the screen but force it to stay on to allow background scanning without filter limitations IGNORE: The worker will report no limitations to the client (can be useful if you already have an app keeping the screen on)</p>"},{"location":"reference/android/app/com.bluerpc.worker/-const/-c-f-g_-s-c-a-n-n-i-n-g_-m-o-d-e_-d-e-f-a-u-l-t/","title":"c f g  s c a n n i n g  m o d e  d e f a u l t","text":"<p>//app/com.bluerpc.worker/Const/CFG_SCANNING_MODE_DEFAULT</p>"},{"location":"reference/android/app/com.bluerpc.worker/-const/-c-f-g_-s-c-a-n-n-i-n-g_-m-o-d-e_-d-e-f-a-u-l-t/#cfg_scanning_mode_default","title":"CFG_SCANNING_MODE_DEFAULT","text":"<p>[androidJvm]\\ const val CFG_SCANNING_MODE_DEFAULT: Int = 0</p>"},{"location":"reference/android/app/com.bluerpc.worker/-const/-c-f-g_-s-c-a-n-n-i-n-g_-m-o-d-e_-f-i-l-t-e-r/","title":"c f g  s c a n n i n g  m o d e  f i l t e r","text":"<p>//app/com.bluerpc.worker/Const/CFG_SCANNING_MODE_FILTER</p>"},{"location":"reference/android/app/com.bluerpc.worker/-const/-c-f-g_-s-c-a-n-n-i-n-g_-m-o-d-e_-f-i-l-t-e-r/#cfg_scanning_mode_filter","title":"CFG_SCANNING_MODE_FILTER","text":"<p>[androidJvm]\\ const val CFG_SCANNING_MODE_FILTER: Int = 0</p>"},{"location":"reference/android/app/com.bluerpc.worker/-const/-c-f-g_-s-c-a-n-n-i-n-g_-m-o-d-e_-i-g-n-o-r-e/","title":"c f g  s c a n n i n g  m o d e  i g n o r e","text":"<p>//app/com.bluerpc.worker/Const/CFG_SCANNING_MODE_IGNORE</p>"},{"location":"reference/android/app/com.bluerpc.worker/-const/-c-f-g_-s-c-a-n-n-i-n-g_-m-o-d-e_-i-g-n-o-r-e/#cfg_scanning_mode_ignore","title":"CFG_SCANNING_MODE_IGNORE","text":"<p>[androidJvm]\\ const val CFG_SCANNING_MODE_IGNORE: Int = 2</p>"},{"location":"reference/android/app/com.bluerpc.worker/-const/-c-f-g_-s-c-a-n-n-i-n-g_-m-o-d-e_-s-c-r-e-e-n_-o-n/","title":"c f g  s c a n n i n g  m o d e  s c r e e n  o n","text":"<p>//app/com.bluerpc.worker/Const/CFG_SCANNING_MODE_SCREEN_ON</p>"},{"location":"reference/android/app/com.bluerpc.worker/-const/-c-f-g_-s-c-a-n-n-i-n-g_-m-o-d-e_-s-c-r-e-e-n_-o-n/#cfg_scanning_mode_screen_on","title":"CFG_SCANNING_MODE_SCREEN_ON","text":"<p>[androidJvm]\\ const val CFG_SCANNING_MODE_SCREEN_ON: Int = 1</p>"},{"location":"reference/android/app/com.bluerpc.worker/-const/-c-f-g_-t-l-s_-e-n-a-b-l-e/","title":"c f g  t l s  e n a b l e","text":"<p>//app/com.bluerpc.worker/Const/CFG_TLS_ENABLE</p>"},{"location":"reference/android/app/com.bluerpc.worker/-const/-c-f-g_-t-l-s_-e-n-a-b-l-e/#cfg_tls_enable","title":"CFG_TLS_ENABLE","text":"<p>[androidJvm]\\ const val CFG_TLS_ENABLE: String</p> <p>Enable secure mode needs a keystore</p>"},{"location":"reference/android/app/com.bluerpc.worker/-const/-c-f-g_-t-l-s_-e-n-a-b-l-e_-d-e-f-a-u-l-t/","title":"c f g  t l s  e n a b l e  d e f a u l t","text":"<p>//app/com.bluerpc.worker/Const/CFG_TLS_ENABLE_DEFAULT</p>"},{"location":"reference/android/app/com.bluerpc.worker/-const/-c-f-g_-t-l-s_-e-n-a-b-l-e_-d-e-f-a-u-l-t/#cfg_tls_enable_default","title":"CFG_TLS_ENABLE_DEFAULT","text":"<p>[androidJvm]\\ const val CFG_TLS_ENABLE_DEFAULT: Boolean = false</p>"},{"location":"reference/android/app/com.bluerpc.worker/-const/-c-f-g_-t-l-s_-k-e-y-s-t-o-r-e/","title":"c f g  t l s  k e y s t o r e","text":"<p>//app/com.bluerpc.worker/Const/CFG_TLS_KEYSTORE</p>"},{"location":"reference/android/app/com.bluerpc.worker/-const/-c-f-g_-t-l-s_-k-e-y-s-t-o-r-e/#cfg_tls_keystore","title":"CFG_TLS_KEYSTORE","text":"<p>[androidJvm]\\ const val CFG_TLS_KEYSTORE: String</p> <p>Path to the keystore</p>"},{"location":"reference/android/app/com.bluerpc.worker/-const/-c-f-g_-t-l-s_-k-e-y-s-t-o-r-e_-d-e-f-a-u-l-t/","title":"c f g  t l s  k e y s t o r e  d e f a u l t","text":"<p>//app/com.bluerpc.worker/Const/CFG_TLS_KEYSTORE_DEFAULT</p>"},{"location":"reference/android/app/com.bluerpc.worker/-const/-c-f-g_-t-l-s_-k-e-y-s-t-o-r-e_-d-e-f-a-u-l-t/#cfg_tls_keystore_default","title":"CFG_TLS_KEYSTORE_DEFAULT","text":"<p>[androidJvm]\\ const val CFG_TLS_KEYSTORE_DEFAULT: String</p>"},{"location":"reference/android/app/com.bluerpc.worker/-const/-c-f-g_-t-l-s_-k-e-y-s-t-o-r-e_-p-a-s-s-w-o-r-d/","title":"c f g  t l s  k e y s t o r e  p a s s w o r d","text":"<p>//app/com.bluerpc.worker/Const/CFG_TLS_KEYSTORE_PASSWORD</p>"},{"location":"reference/android/app/com.bluerpc.worker/-const/-c-f-g_-t-l-s_-k-e-y-s-t-o-r-e_-p-a-s-s-w-o-r-d/#cfg_tls_keystore_password","title":"CFG_TLS_KEYSTORE_PASSWORD","text":"<p>[androidJvm]\\ const val CFG_TLS_KEYSTORE_PASSWORD: String</p> <p>Keystore Password</p>"},{"location":"reference/android/app/com.bluerpc.worker/-const/-d-e-f-a-u-l-t_-m-a-c/","title":"d e f a u l t  m a c","text":"<p>//app/com.bluerpc.worker/Const/DEFAULT_MAC</p>"},{"location":"reference/android/app/com.bluerpc.worker/-const/-d-e-f-a-u-l-t_-m-a-c/#default_mac","title":"DEFAULT_MAC","text":"<p>[androidJvm]\\ const val DEFAULT_MAC: String</p>"},{"location":"reference/android/app/com.bluerpc.worker/-const/-k-e-y-s-t-o-r-e_-d-e-f-a-u-l-t_-p-a-t-h/","title":"k e y s t o r e  d e f a u l t  p a t h","text":"<p>//app/com.bluerpc.worker/Const/KEYSTORE_DEFAULT_PATH</p>"},{"location":"reference/android/app/com.bluerpc.worker/-const/-k-e-y-s-t-o-r-e_-d-e-f-a-u-l-t_-p-a-t-h/#keystore_default_path","title":"KEYSTORE_DEFAULT_PATH","text":"<p>[androidJvm]\\ const val KEYSTORE_DEFAULT_PATH: String</p>"},{"location":"reference/android/app/com.bluerpc.worker/-const/-s-h-a-r-e-d_-p-r-e-f/","title":"s h a r e d  p r e f","text":"<p>//app/com.bluerpc.worker/Const/SHARED_PREF</p>"},{"location":"reference/android/app/com.bluerpc.worker/-const/-s-h-a-r-e-d_-p-r-e-f/#shared_pref","title":"SHARED_PREF","text":"<p>[androidJvm]\\ const val SHARED_PREF: String</p>"},{"location":"reference/android/app/com.bluerpc.worker/-foreground-service/","title":"Index","text":"<p>//app/com.bluerpc.worker/ForegroundService</p>"},{"location":"reference/android/app/com.bluerpc.worker/-foreground-service/#foregroundservice","title":"ForegroundService","text":"<p>[androidJvm]\\ class ForegroundService : Service</p>"},{"location":"reference/android/app/com.bluerpc.worker/-foreground-service/#constructors","title":"Constructors","text":"ForegroundService [androidJvm]constructor()"},{"location":"reference/android/app/com.bluerpc.worker/-foreground-service/#functions","title":"Functions","text":"Name Summary bindIsolatedService [androidJvm]open fun bindIsolatedService(p0: Intent, p1: Context.BindServiceFlags, p2: String, p3: Executor, p4: ServiceConnection): Booleanopen override fun bindIsolatedService(p0: Intent, p1: Int, p2: String, p3: Executor, p4: ServiceConnection): Boolean bindService [androidJvm]open override fun bindService(p0: Intent, p1: ServiceConnection, p2: Context.BindServiceFlags): Booleanopen override fun bindService(p0: Intent, p1: ServiceConnection, p2: Int): Booleanopen override fun bindService(p0: Intent, p1: Context.BindServiceFlags, p2: Executor, p3: ServiceConnection): Booleanopen override fun bindService(p0: Intent, p1: Int, p2: Executor, p3: ServiceConnection): Boolean bindServiceAsUser [androidJvm]open override fun bindServiceAsUser(p0: Intent, p1: ServiceConnection, p2: Context.BindServiceFlags, p3: UserHandle): Booleanopen override fun bindServiceAsUser(p0: Intent, p1: ServiceConnection, p2: Int, p3: UserHandle): Boolean checkCallingOrSelfPermission [androidJvm]open override fun checkCallingOrSelfPermission(p0: String): Int checkCallingOrSelfUriPermission [androidJvm]open override fun checkCallingOrSelfUriPermission(p0: Uri, p1: Int): Int checkCallingOrSelfUriPermissions [androidJvm]open override fun checkCallingOrSelfUriPermissions(p0: MutableList&lt;Uri&gt;, p1: Int): IntArray checkCallingPermission [androidJvm]open override fun checkCallingPermission(p0: String): Int checkCallingUriPermission [androidJvm]open override fun checkCallingUriPermission(p0: Uri, p1: Int): Int checkCallingUriPermissions [androidJvm]open override fun checkCallingUriPermissions(p0: MutableList&lt;Uri&gt;, p1: Int): IntArray checkPermission [androidJvm]open override fun checkPermission(p0: String, p1: Int, p2: Int): Int checkSelfPermission [androidJvm]open override fun checkSelfPermission(p0: String): Int checkUriPermission [androidJvm]open override fun checkUriPermission(p0: Uri, p1: Int, p2: Int, p3: Int): Intopen override fun checkUriPermission(p0: Uri?, p1: String?, p2: String?, p3: Int, p4: Int, p5: Int): Int checkUriPermissions [androidJvm]open override fun checkUriPermissions(p0: MutableList&lt;Uri&gt;, p1: Int, p2: Int, p3: Int): IntArray clearWallpaper [androidJvm]open override fun ~~clearWallpaper~~() createAttributionContext [androidJvm]open override fun createAttributionContext(p0: String?): Context createConfigurationContext [androidJvm]open override fun createConfigurationContext(p0: Configuration): Context createContext [androidJvm]open override fun createContext(p0: ContextParams): Context createContextForSplit [androidJvm]open override fun createContextForSplit(p0: String): Context createDeviceContext [androidJvm]open override fun createDeviceContext(p0: Int): Context createDeviceProtectedStorageContext [androidJvm]open override fun createDeviceProtectedStorageContext(): Context createDisplayContext [androidJvm]open override fun createDisplayContext(p0: Display): Context createPackageContext [androidJvm]open override fun createPackageContext(p0: String, p1: Int): Context createWindowContext [androidJvm]open override fun createWindowContext(p0: Int, p1: Bundle?): Contextopen override fun createWindowContext(p0: Display, p1: Int, p2: Bundle?): Context databaseList [androidJvm]open override fun databaseList(): Array&lt;String&gt; deleteDatabase [androidJvm]open override fun deleteDatabase(p0: String): Boolean deleteFile [androidJvm]open override fun deleteFile(p0: String): Boolean deleteSharedPreferences [androidJvm]open override fun deleteSharedPreferences(p0: String): Boolean enforceCallingOrSelfPermission [androidJvm]open override fun enforceCallingOrSelfPermission(p0: String, p1: String?) enforceCallingOrSelfUriPermission [androidJvm]open override fun enforceCallingOrSelfUriPermission(p0: Uri, p1: Int, p2: String) enforceCallingPermission [androidJvm]open override fun enforceCallingPermission(p0: String, p1: String?) enforceCallingUriPermission [androidJvm]open override fun enforceCallingUriPermission(p0: Uri, p1: Int, p2: String) enforcePermission [androidJvm]open override fun enforcePermission(p0: String, p1: Int, p2: Int, p3: String?) enforceUriPermission [androidJvm]open override fun enforceUriPermission(p0: Uri, p1: Int, p2: Int, p3: Int, p4: String)open override fun enforceUriPermission(p0: Uri?, p1: String?, p2: String?, p3: Int, p4: Int, p5: Int, p6: String?) fileList [androidJvm]open override fun fileList(): Array&lt;String&gt; getApplication [androidJvm]fun getApplication(): Application getApplicationContext [androidJvm]open override fun getApplicationContext(): Context getApplicationInfo [androidJvm]open override fun getApplicationInfo(): ApplicationInfo getAssets [androidJvm]open override fun getAssets(): AssetManager getAttributionSource [androidJvm]open override fun getAttributionSource(): AttributionSource getAttributionTag [androidJvm]open override fun getAttributionTag(): String? getBaseContext [androidJvm]open fun getBaseContext(): Context getCacheDir [androidJvm]open override fun getCacheDir(): File getClassLoader [androidJvm]open override fun getClassLoader(): ClassLoader getCodeCacheDir [androidJvm]open override fun getCodeCacheDir(): File getColor [androidJvm]fun getColor(p0: Int): Int getColorStateList [androidJvm]fun getColorStateList(p0: Int): ColorStateList getContentResolver [androidJvm]open override fun getContentResolver(): ContentResolver getDatabasePath [androidJvm]open override fun getDatabasePath(p0: String): File getDataDir [androidJvm]open override fun getDataDir(): File getDeviceId [androidJvm]open override fun getDeviceId(): Int getDir [androidJvm]open override fun getDir(p0: String, p1: Int): File getDisplay [androidJvm]open override fun getDisplay(): Display? getDrawable [androidJvm]fun getDrawable(p0: Int): Drawable? getExternalCacheDir [androidJvm]open override fun getExternalCacheDir(): File? getExternalCacheDirs [androidJvm]open override fun getExternalCacheDirs(): Array&lt;File&gt; getExternalFilesDir [androidJvm]open override fun getExternalFilesDir(p0: String?): File? getExternalFilesDirs [androidJvm]open override fun getExternalFilesDirs(p0: String): Array&lt;File&gt; getExternalMediaDirs [androidJvm]open override fun getExternalMediaDirs(): Array&lt;File&gt; getFilesDir [androidJvm]open override fun getFilesDir(): File getFileStreamPath [androidJvm]open override fun getFileStreamPath(p0: String): File getForegroundServiceType [androidJvm]fun getForegroundServiceType(): Int getMainExecutor [androidJvm]open override fun getMainExecutor(): Executor getMainLooper [androidJvm]open override fun getMainLooper(): Looper getNoBackupFilesDir [androidJvm]open override fun getNoBackupFilesDir(): File getObbDir [androidJvm]open override fun getObbDir(): File getObbDirs [androidJvm]open override fun getObbDirs(): Array&lt;File&gt; getOpPackageName [androidJvm]open override fun getOpPackageName(): String getPackageCodePath [androidJvm]open override fun getPackageCodePath(): String getPackageManager [androidJvm]open override fun getPackageManager(): PackageManager getPackageName [androidJvm]open override fun getPackageName(): String getPackageResourcePath [androidJvm]open override fun getPackageResourcePath(): String getParams [androidJvm]open override fun getParams(): ContextParams? getResources [androidJvm]open override fun getResources(): Resources getSharedPreferences [androidJvm]open override fun getSharedPreferences(p0: String, p1: Int): SharedPreferences getString [androidJvm]fun getString(p0: Int): Stringfun getString(p0: Int, vararg p1: Any): String getSystemService [androidJvm]fun &lt;T : Any&gt; getSystemService(p0: Class&lt;T&gt;): Topen override fun getSystemService(p0: String): Any getSystemServiceName [androidJvm]open override fun getSystemServiceName(p0: Class&lt;*&gt;): String? getText [androidJvm]fun getText(p0: Int): CharSequence getTheme [androidJvm]open override fun getTheme(): Resources.Theme getWallpaper [androidJvm]open override fun ~~getWallpaper~~(): Drawable getWallpaperDesiredMinimumHeight [androidJvm]open override fun ~~getWallpaperDesiredMinimumHeight~~(): Int getWallpaperDesiredMinimumWidth [androidJvm]open override fun ~~getWallpaperDesiredMinimumWidth~~(): Int grantUriPermission [androidJvm]open override fun grantUriPermission(p0: String, p1: Uri, p2: Int) isDeviceProtectedStorage [androidJvm]open override fun isDeviceProtectedStorage(): Boolean isRestricted [androidJvm]open override fun isRestricted(): Boolean isUiContext [androidJvm]open override fun isUiContext(): Boolean moveDatabaseFrom [androidJvm]open override fun moveDatabaseFrom(p0: Context, p1: String): Boolean moveSharedPreferencesFrom [androidJvm]open override fun moveSharedPreferencesFrom(p0: Context, p1: String): Boolean obtainStyledAttributes [androidJvm]fun obtainStyledAttributes(p0: IntArray): TypedArrayfun obtainStyledAttributes(p0: AttributeSet?, p1: IntArray): TypedArrayfun obtainStyledAttributes(p0: Int, p1: IntArray): TypedArrayfun obtainStyledAttributes(p0: AttributeSet?, p1: IntArray, p2: Int, p3: Int): TypedArray onBind [androidJvm]open override fun onBind(intent: Intent?): IBinder? onConfigurationChanged [androidJvm]open override fun onConfigurationChanged(p0: Configuration) onCreate [androidJvm]open override fun onCreate() onDestroy [androidJvm]open override fun onDestroy() onLowMemory [androidJvm]open override fun onLowMemory() onRebind [androidJvm]open fun onRebind(p0: Intent) onStart [androidJvm]open fun ~~onStart~~(p0: Intent, p1: Int) onStartCommand [androidJvm]open fun onStartCommand(p0: Intent, p1: Int, p2: Int): Int onTaskRemoved [androidJvm]open fun onTaskRemoved(p0: Intent) onTimeout [androidJvm]open fun onTimeout(p0: Int) onTrimMemory [androidJvm]open override fun onTrimMemory(p0: Int) onUnbind [androidJvm]open fun onUnbind(p0: Intent): Boolean openFileInput [androidJvm]open override fun openFileInput(p0: String): FileInputStream openFileOutput [androidJvm]open override fun openFileOutput(p0: String, p1: Int): FileOutputStream openOrCreateDatabase [androidJvm]open override fun openOrCreateDatabase(p0: String, p1: Int, p2: SQLiteDatabase.CursorFactory): SQLiteDatabaseopen override fun openOrCreateDatabase(p0: String, p1: Int, p2: SQLiteDatabase.CursorFactory, p3: DatabaseErrorHandler?): SQLiteDatabase peekWallpaper [androidJvm]open override fun ~~peekWallpaper~~(): Drawable registerComponentCallbacks [androidJvm]open override fun registerComponentCallbacks(p0: ComponentCallbacks) registerDeviceIdChangeListener [androidJvm]open override fun registerDeviceIdChangeListener(p0: Executor, p1: IntConsumer) registerReceiver [androidJvm]open override fun registerReceiver(p0: BroadcastReceiver?, p1: IntentFilter): Intent?open override fun registerReceiver(p0: BroadcastReceiver?, p1: IntentFilter, p2: Int): Intent?open override fun registerReceiver(p0: BroadcastReceiver?, p1: IntentFilter, p2: String?, p3: Handler?): Intent?open override fun registerReceiver(p0: BroadcastReceiver?, p1: IntentFilter, p2: String?, p3: Handler?, p4: Int): Intent? removeStickyBroadcast [androidJvm]open override fun ~~removeStickyBroadcast~~(p0: Intent) removeStickyBroadcastAsUser [androidJvm]open override fun ~~removeStickyBroadcastAsUser~~(p0: Intent, p1: UserHandle) revokeSelfPermissionOnKill [androidJvm]open fun revokeSelfPermissionOnKill(p0: String) revokeSelfPermissionsOnKill [androidJvm]open override fun revokeSelfPermissionsOnKill(p0: MutableCollection&lt;String&gt;) revokeUriPermission [androidJvm]open override fun revokeUriPermission(p0: Uri, p1: Int)open override fun revokeUriPermission(p0: String, p1: Uri, p2: Int) sendBroadcast [androidJvm]open override fun sendBroadcast(p0: Intent)open override fun sendBroadcast(p0: Intent, p1: String?)open override fun sendBroadcast(p0: Intent, p1: String?, p2: Bundle?) sendBroadcastAsUser [androidJvm]open override fun sendBroadcastAsUser(p0: Intent, p1: UserHandle)open override fun sendBroadcastAsUser(p0: Intent, p1: UserHandle, p2: String?) sendBroadcastWithMultiplePermissions [androidJvm]open fun sendBroadcastWithMultiplePermissions(p0: Intent, p1: Array&lt;String&gt;) sendOrderedBroadcast [androidJvm]open override fun sendOrderedBroadcast(p0: Intent, p1: String?)open override fun sendOrderedBroadcast(p0: Intent, p1: String?, p2: Bundle?)open override fun sendOrderedBroadcast(p0: Intent, p1: String?, p2: BroadcastReceiver?, p3: Handler?, p4: Int, p5: String?, p6: Bundle?)open override fun sendOrderedBroadcast(p0: Intent, p1: String?, p2: Bundle?, p3: BroadcastReceiver?, p4: Handler?, p5: Int, p6: String?, p7: Bundle?)open override fun sendOrderedBroadcast(p0: Intent, p1: String?, p2: String?, p3: BroadcastReceiver?, p4: Handler?, p5: Int, p6: String?, p7: Bundle?)open fun sendOrderedBroadcast(p0: Intent, p1: Int, p2: String?, p3: String?, p4: BroadcastReceiver?, p5: Handler?, p6: String?, p7: Bundle?, p8: Bundle?) sendOrderedBroadcastAsUser [androidJvm]open override fun sendOrderedBroadcastAsUser(p0: Intent, p1: UserHandle, p2: String?, p3: BroadcastReceiver?, p4: Handler?, p5: Int, p6: String?, p7: Bundle?) sendStickyBroadcast [androidJvm]open override fun ~~sendStickyBroadcast~~(p0: Intent)open override fun ~~sendStickyBroadcast~~(p0: Intent, p1: Bundle?) sendStickyBroadcastAsUser [androidJvm]open override fun ~~sendStickyBroadcastAsUser~~(p0: Intent, p1: UserHandle) sendStickyOrderedBroadcast [androidJvm]open override fun ~~sendStickyOrderedBroadcast~~(p0: Intent, p1: BroadcastReceiver?, p2: Handler?, p3: Int, p4: String?, p5: Bundle?) sendStickyOrderedBroadcastAsUser [androidJvm]open override fun ~~sendStickyOrderedBroadcastAsUser~~(p0: Intent, p1: UserHandle, p2: BroadcastReceiver?, p3: Handler?, p4: Int, p5: String?, p6: Bundle?) setTheme [androidJvm]open override fun setTheme(p0: Int) setWallpaper [androidJvm]open override fun ~~setWallpaper~~(p0: Bitmap)open override fun ~~setWallpaper~~(p0: InputStream) startActivities [androidJvm]open override fun startActivities(p0: Array&lt;Intent&gt;)open override fun startActivities(p0: Array&lt;Intent&gt;, p1: Bundle?) startActivity [androidJvm]open override fun startActivity(p0: Intent)open override fun startActivity(p0: Intent, p1: Bundle?) startForeground [androidJvm]fun startForeground(p0: Int, p1: Notification)fun startForeground(p0: Int, p1: Notification, p2: Int) startForegroundService [androidJvm]open override fun startForegroundService(p0: Intent): ComponentName? startInstrumentation [androidJvm]open override fun startInstrumentation(p0: ComponentName, p1: String?, p2: Bundle?): Boolean startIntentSender [androidJvm]open override fun startIntentSender(p0: IntentSender, p1: Intent?, p2: Int, p3: Int, p4: Int)open override fun startIntentSender(p0: IntentSender, p1: Intent?, p2: Int, p3: Int, p4: Int, p5: Bundle?) startService [androidJvm]open override fun startService(p0: Intent): ComponentName? stopForeground [androidJvm]fun ~~stopForeground~~(p0: Boolean)fun stopForeground(p0: Int) stopSelf [androidJvm]fun stopSelf()fun stopSelf(p0: Int) stopSelfResult [androidJvm]fun stopSelfResult(p0: Int): Boolean stopService [androidJvm]open override fun stopService(p0: Intent): Boolean unbindService [androidJvm]open override fun unbindService(p0: ServiceConnection) unregisterComponentCallbacks [androidJvm]open override fun unregisterComponentCallbacks(p0: ComponentCallbacks) unregisterDeviceIdChangeListener [androidJvm]open override fun unregisterDeviceIdChangeListener(p0: IntConsumer) unregisterReceiver [androidJvm]open override fun unregisterReceiver(p0: BroadcastReceiver) updateServiceGroup [androidJvm]open override fun updateServiceGroup(p0: ServiceConnection, p1: Int, p2: Int)"},{"location":"reference/android/app/com.bluerpc.worker/-foreground-service/-foreground-service/","title":"foreground service","text":"<p>//app/com.bluerpc.worker/ForegroundService/ForegroundService</p>"},{"location":"reference/android/app/com.bluerpc.worker/-foreground-service/-foreground-service/#foregroundservice","title":"ForegroundService","text":"<p>[androidJvm]\\ constructor()</p>"},{"location":"reference/android/app/com.bluerpc.worker/-foreground-service/on-bind/","title":"On bind","text":"<p>//app/com.bluerpc.worker/ForegroundService/onBind</p>"},{"location":"reference/android/app/com.bluerpc.worker/-foreground-service/on-bind/#onbind","title":"onBind","text":"<p>[androidJvm]\\ open override fun onBind(intent: Intent?): IBinder?</p>"},{"location":"reference/android/app/com.bluerpc.worker/-foreground-service/on-create/","title":"On create","text":"<p>//app/com.bluerpc.worker/ForegroundService/onCreate</p>"},{"location":"reference/android/app/com.bluerpc.worker/-foreground-service/on-create/#oncreate","title":"onCreate","text":"<p>[androidJvm]\\ open override fun onCreate()</p>"},{"location":"reference/android/app/com.bluerpc.worker/-foreground-service/on-destroy/","title":"On destroy","text":"<p>//app/com.bluerpc.worker/ForegroundService/onDestroy</p>"},{"location":"reference/android/app/com.bluerpc.worker/-foreground-service/on-destroy/#ondestroy","title":"onDestroy","text":"<p>[androidJvm]\\ open override fun onDestroy()</p>"},{"location":"reference/android/app/com.bluerpc.worker/-main-activity/","title":"Index","text":"<p>//app/com.bluerpc.worker/MainActivity</p>"},{"location":"reference/android/app/com.bluerpc.worker/-main-activity/#mainactivity","title":"MainActivity","text":"<p>[androidJvm]\\ class MainActivity : AppCompatActivity</p>"},{"location":"reference/android/app/com.bluerpc.worker/-main-activity/#constructors","title":"Constructors","text":"MainActivity [androidJvm]constructor()"},{"location":"reference/android/app/com.bluerpc.worker/-main-activity/#functions","title":"Functions","text":"Name Summary addContentView [androidJvm]open override fun addContentView(p0: View, p1: ViewGroup.LayoutParams) addMenuProvider [androidJvm]open override fun addMenuProvider(@NonNullp0: MenuProvider)open override fun addMenuProvider(@NonNullp0: MenuProvider, @NonNullp1: LifecycleOwner)open override fun addMenuProvider(@NonNullp0: MenuProvider, @NonNullp1: LifecycleOwner, @NonNullp2: Lifecycle.State) addOnConfigurationChangedListener [androidJvm]override fun addOnConfigurationChangedListener(@NonNullp0: Consumer&lt;Configuration&gt;) addOnContextAvailableListener [androidJvm]override fun addOnContextAvailableListener(@NonNulllistener: OnContextAvailableListener) addOnMultiWindowModeChangedListener [androidJvm]override fun addOnMultiWindowModeChangedListener(@NonNullp0: Consumer&lt;MultiWindowModeChangedInfo&gt;) addOnNewIntentListener [androidJvm]override fun addOnNewIntentListener(@NonNullp0: Consumer&lt;Intent&gt;) addOnPictureInPictureModeChangedListener [androidJvm]override fun addOnPictureInPictureModeChangedListener(@NonNullp0: Consumer&lt;PictureInPictureModeChangedInfo&gt;) addOnTrimMemoryListener [androidJvm]override fun addOnTrimMemoryListener(@NonNullp0: Consumer&lt;Int&gt;) applyOverrideConfiguration [androidJvm]open fun applyOverrideConfiguration(p0: Configuration) bindIsolatedService [androidJvm]open fun bindIsolatedService(p0: Intent, p1: Context.BindServiceFlags, p2: String, p3: Executor, p4: ServiceConnection): Booleanopen override fun bindIsolatedService(p0: Intent, p1: Int, p2: String, p3: Executor, p4: ServiceConnection): Boolean bindService [androidJvm]open override fun bindService(p0: Intent, p1: ServiceConnection, p2: Context.BindServiceFlags): Booleanopen override fun bindService(p0: Intent, p1: ServiceConnection, p2: Int): Booleanopen override fun bindService(p0: Intent, p1: Context.BindServiceFlags, p2: Executor, p3: ServiceConnection): Booleanopen override fun bindService(p0: Intent, p1: Int, p2: Executor, p3: ServiceConnection): Boolean bindServiceAsUser [androidJvm]open override fun bindServiceAsUser(p0: Intent, p1: ServiceConnection, p2: Context.BindServiceFlags, p3: UserHandle): Booleanopen override fun bindServiceAsUser(p0: Intent, p1: ServiceConnection, p2: Int, p3: UserHandle): Boolean checkCallingOrSelfPermission [androidJvm]open override fun checkCallingOrSelfPermission(p0: String): Int checkCallingOrSelfUriPermission [androidJvm]open override fun checkCallingOrSelfUriPermission(p0: Uri, p1: Int): Int checkCallingOrSelfUriPermissions [androidJvm]open override fun checkCallingOrSelfUriPermissions(p0: MutableList&lt;Uri&gt;, p1: Int): IntArray checkCallingPermission [androidJvm]open override fun checkCallingPermission(p0: String): Int checkCallingUriPermission [androidJvm]open override fun checkCallingUriPermission(p0: Uri, p1: Int): Int checkCallingUriPermissions [androidJvm]open override fun checkCallingUriPermissions(p0: MutableList&lt;Uri&gt;, p1: Int): IntArray checkPermission [androidJvm]open override fun checkPermission(p0: String, p1: Int, p2: Int): Int checkSelfPermission [androidJvm]open override fun checkSelfPermission(p0: String): Int checkUriPermission [androidJvm]open override fun checkUriPermission(p0: Uri, p1: Int, p2: Int, p3: Int): Intopen override fun checkUriPermission(p0: Uri?, p1: String?, p2: String?, p3: Int, p4: Int, p5: Int): Int checkUriPermissions [androidJvm]open override fun checkUriPermissions(p0: MutableList&lt;Uri&gt;, p1: Int, p2: Int, p3: Int): IntArray clearOverrideActivityTransition [androidJvm]open fun clearOverrideActivityTransition(p0: Int) clearWallpaper [androidJvm]open override fun ~~clearWallpaper~~() closeContextMenu [androidJvm]open fun closeContextMenu() closeOptionsMenu [androidJvm]open override fun closeOptionsMenu() createAttributionContext [androidJvm]open override fun createAttributionContext(p0: String?): Context createConfigurationContext [androidJvm]open override fun createConfigurationContext(p0: Configuration): Context createContext [androidJvm]open override fun createContext(p0: ContextParams): Context createContextForSplit [androidJvm]open override fun createContextForSplit(p0: String): Context createDeviceContext [androidJvm]open override fun createDeviceContext(p0: Int): Context createDeviceProtectedStorageContext [androidJvm]open override fun createDeviceProtectedStorageContext(): Context createDisplayContext [androidJvm]open override fun createDisplayContext(p0: Display): Context createPackageContext [androidJvm]open override fun createPackageContext(p0: String, p1: Int): Context createPendingResult [androidJvm]open fun createPendingResult(p0: Int, p1: Intent, p2: Int): PendingIntent createWindowContext [androidJvm]open override fun createWindowContext(p0: Int, p1: Bundle?): Contextopen override fun createWindowContext(p0: Display, p1: Int, p2: Bundle?): Context databaseList [androidJvm]open override fun databaseList(): Array&lt;String&gt; deleteDatabase [androidJvm]open override fun deleteDatabase(p0: String): Boolean deleteFile [androidJvm]open override fun deleteFile(p0: String): Boolean deleteSharedPreferences [androidJvm]open override fun deleteSharedPreferences(p0: String): Boolean dismissDialog [androidJvm]fun ~~dismissDialog~~(p0: Int) dismissKeyboardShortcutsHelper [androidJvm]fun dismissKeyboardShortcutsHelper() dispatchGenericMotionEvent [androidJvm]open override fun dispatchGenericMotionEvent(p0: MotionEvent): Boolean dispatchKeyEvent [androidJvm]open override fun dispatchKeyEvent(p0: KeyEvent): Boolean dispatchKeyShortcutEvent [androidJvm]open override fun dispatchKeyShortcutEvent(p0: KeyEvent): Boolean dispatchPopulateAccessibilityEvent [androidJvm]open override fun dispatchPopulateAccessibilityEvent(p0: AccessibilityEvent): Boolean dispatchTouchEvent [androidJvm]open override fun dispatchTouchEvent(p0: MotionEvent): Boolean dispatchTrackballEvent [androidJvm]open override fun dispatchTrackballEvent(p0: MotionEvent): Boolean dump [androidJvm]open override fun dump(@NonNullp0: String, @Nullablep1: FileDescriptor?, @NonNullp2: PrintWriter, @Nullablep3: Array&lt;String&gt;?) enforceCallingOrSelfPermission [androidJvm]open override fun enforceCallingOrSelfPermission(p0: String, p1: String?) enforceCallingOrSelfUriPermission [androidJvm]open override fun enforceCallingOrSelfUriPermission(p0: Uri, p1: Int, p2: String) enforceCallingPermission [androidJvm]open override fun enforceCallingPermission(p0: String, p1: String?) enforceCallingUriPermission [androidJvm]open override fun enforceCallingUriPermission(p0: Uri, p1: Int, p2: String) enforcePermission [androidJvm]open override fun enforcePermission(p0: String, p1: Int, p2: Int, p3: String?) enforceUriPermission [androidJvm]open override fun enforceUriPermission(p0: Uri, p1: Int, p2: Int, p3: Int, p4: String)open override fun enforceUriPermission(p0: Uri?, p1: String?, p2: String?, p3: Int, p4: Int, p5: Int, p6: String?) enterPictureInPictureMode [androidJvm]open fun ~~enterPictureInPictureMode~~()open fun enterPictureInPictureMode(p0: PictureInPictureParams): Boolean fileList [androidJvm]open override fun fileList(): Array&lt;String&gt; findViewById [androidJvm]open override fun &lt;T : View&gt; findViewById(@IdResp0: Int): T finish [androidJvm]open fun finish() finishActivity [androidJvm]open fun finishActivity(p0: Int) finishActivityFromChild [androidJvm]open fun ~~finishActivityFromChild~~(p0: Activity, p1: Int) finishAffinity [androidJvm]open fun finishAffinity() finishAfterTransition [androidJvm]open fun finishAfterTransition() finishAndRemoveTask [androidJvm]open fun finishAndRemoveTask() finishFromChild [androidJvm]open fun ~~finishFromChild~~(p0: Activity) getActionBar [androidJvm]open fun getActionBar(): ActionBar? getApplication [androidJvm]fun getApplication(): Application getApplicationContext [androidJvm]open override fun getApplicationContext(): Context getApplicationInfo [androidJvm]open override fun getApplicationInfo(): ApplicationInfo getAssets [androidJvm]open override fun getAssets(): AssetManager getAttributionSource [androidJvm]open override fun getAttributionSource(): AttributionSource getAttributionTag [androidJvm]open override fun getAttributionTag(): String? getBaseContext [androidJvm]open fun getBaseContext(): Context getCacheDir [androidJvm]open override fun getCacheDir(): File getCallingActivity [androidJvm]open fun getCallingActivity(): ComponentName? getCallingPackage [androidJvm]open fun getCallingPackage(): String? getChangingConfigurations [androidJvm]open fun getChangingConfigurations(): Int getClassLoader [androidJvm]open override fun getClassLoader(): ClassLoader getCodeCacheDir [androidJvm]open override fun getCodeCacheDir(): File getColor [androidJvm]fun getColor(p0: Int): Int getColorStateList [androidJvm]fun getColorStateList(p0: Int): ColorStateList getComponentName [androidJvm]open fun getComponentName(): ComponentName getContentResolver [androidJvm]open override fun getContentResolver(): ContentResolver getContentScene [androidJvm]open fun getContentScene(): Scene getContentTransitionManager [androidJvm]open fun getContentTransitionManager(): TransitionManager getCurrentFocus [androidJvm]open fun getCurrentFocus(): View? getDatabasePath [androidJvm]open override fun getDatabasePath(p0: String): File getDataDir [androidJvm]open override fun getDataDir(): File getDelegate [androidJvm]@NonNullopen fun getDelegate(): AppCompatDelegate getDeviceId [androidJvm]open override fun getDeviceId(): Int getDir [androidJvm]open override fun getDir(p0: String, p1: Int): File getDisplay [androidJvm]open override fun getDisplay(): Display? getDrawable [androidJvm]fun getDrawable(p0: Int): Drawable? getDrawerToggleDelegate [androidJvm]@Nullableopen override fun getDrawerToggleDelegate(): ActionBarDrawerToggle.Delegate? getExternalCacheDir [androidJvm]open override fun getExternalCacheDir(): File? getExternalCacheDirs [androidJvm]open override fun getExternalCacheDirs(): Array&lt;File&gt; getExternalFilesDir [androidJvm]open override fun getExternalFilesDir(p0: String?): File? getExternalFilesDirs [androidJvm]open override fun getExternalFilesDirs(p0: String): Array&lt;File&gt; getExternalMediaDirs [androidJvm]open override fun getExternalMediaDirs(): Array&lt;File&gt; getExtraData [androidJvm]@RestrictTo(value = [RestrictTo.Scope.LIBRARY_GROUP_PREFIX])open fun &lt;T : ComponentActivity.ExtraData&gt; ~~getExtraData~~(p0: Class&lt;T&gt;): T getFilesDir [androidJvm]open override fun getFilesDir(): File getFileStreamPath [androidJvm]open override fun getFileStreamPath(p0: String): File getFragmentManager [androidJvm]open fun ~~getFragmentManager~~(): FragmentManager getIntent [androidJvm]open fun getIntent(): Intent getLastCustomNonConfigurationInstance [androidJvm]@Nullableopen fun ~~getLastCustomNonConfigurationInstance~~(): Any? getLastNonConfigurationInstance [androidJvm]open fun getLastNonConfigurationInstance(): Any? getLaunchedFromPackage [androidJvm]open fun getLaunchedFromPackage(): String? getLaunchedFromUid [androidJvm]open fun getLaunchedFromUid(): Int getLayoutInflater [androidJvm]open fun getLayoutInflater(): LayoutInflater getLoaderManager [androidJvm]open fun ~~getLoaderManager~~(): LoaderManager getLocalClassName [androidJvm]open fun getLocalClassName(): String getMainExecutor [androidJvm]open override fun getMainExecutor(): Executor getMainLooper [androidJvm]open override fun getMainLooper(): Looper getMaxNumPictureInPictureActions [androidJvm]open fun getMaxNumPictureInPictureActions(): Int getMediaController [androidJvm]fun getMediaController(): MediaController getMenuInflater [androidJvm]@NonNullopen override fun getMenuInflater(): MenuInflater getNoBackupFilesDir [androidJvm]open override fun getNoBackupFilesDir(): File getObbDir [androidJvm]open override fun getObbDir(): File getObbDirs [androidJvm]open override fun getObbDirs(): Array&lt;File&gt; getOnBackInvokedDispatcher [androidJvm]open fun getOnBackInvokedDispatcher(): OnBackInvokedDispatcher getOpPackageName [androidJvm]open override fun getOpPackageName(): String getPackageCodePath [androidJvm]open override fun getPackageCodePath(): String getPackageManager [androidJvm]open override fun getPackageManager(): PackageManager getPackageName [androidJvm]open override fun getPackageName(): String getPackageResourcePath [androidJvm]open override fun getPackageResourcePath(): String getParams [androidJvm]open override fun getParams(): ContextParams? getParent [androidJvm]fun getParent(): Activity getParentActivityIntent [androidJvm]open fun getParentActivityIntent(): Intent? getPreferences [androidJvm]open fun getPreferences(p0: Int): SharedPreferences getReferrer [androidJvm]open fun getReferrer(): Uri? getRequestedOrientation [androidJvm]open fun getRequestedOrientation(): Int getResources [androidJvm]open override fun getResources(): Resources getSearchEvent [androidJvm]fun getSearchEvent(): SearchEvent getSharedPreferences [androidJvm]open override fun getSharedPreferences(p0: String, p1: Int): SharedPreferences getSplashScreen [androidJvm]fun getSplashScreen(): SplashScreen getString [androidJvm]fun getString(p0: Int): Stringfun getString(p0: Int, vararg p1: Any): String getSupportActionBar [androidJvm]@Nullableopen fun getSupportActionBar(): ActionBar? getSupportFragmentManager [androidJvm]@NonNullopen fun getSupportFragmentManager(): FragmentManager getSupportLoaderManager [androidJvm]@NonNullopen fun ~~getSupportLoaderManager~~(): LoaderManager getSupportParentActivityIntent [androidJvm]@Nullableopen override fun getSupportParentActivityIntent(): Intent? getSystemService [androidJvm]open override fun getSystemService(p0: String): Anyfun &lt;T : Any&gt; getSystemService(p0: Class&lt;T&gt;): T getSystemServiceName [androidJvm]open override fun getSystemServiceName(p0: Class&lt;*&gt;): String? getTaskId [androidJvm]open fun getTaskId(): Int getText [androidJvm]fun getText(p0: Int): CharSequence getTheme [androidJvm]open override fun getTheme(): Resources.Theme getTitle [androidJvm]fun getTitle(): CharSequence getTitleColor [androidJvm]fun getTitleColor(): Int getVoiceInteractor [androidJvm]open fun getVoiceInteractor(): VoiceInteractor getVolumeControlStream [androidJvm]fun getVolumeControlStream(): Int getWallpaper [androidJvm]open override fun ~~getWallpaper~~(): Drawable getWallpaperDesiredMinimumHeight [androidJvm]open override fun ~~getWallpaperDesiredMinimumHeight~~(): Int getWallpaperDesiredMinimumWidth [androidJvm]open override fun ~~getWallpaperDesiredMinimumWidth~~(): Int getWindow [androidJvm]open fun getWindow(): Window getWindowManager [androidJvm]open fun getWindowManager(): WindowManager grantUriPermission [androidJvm]open override fun grantUriPermission(p0: String, p1: Uri, p2: Int) hasWindowFocus [androidJvm]open fun hasWindowFocus(): Boolean invalidateMenu [androidJvm]open override fun invalidateMenu() invalidateOptionsMenu [androidJvm]open override fun invalidateOptionsMenu() isActivityTransitionRunning [androidJvm]open fun isActivityTransitionRunning(): Boolean isChangingConfigurations [androidJvm]open fun isChangingConfigurations(): Boolean isChild [androidJvm]fun isChild(): Boolean isDestroyed [androidJvm]open fun isDestroyed(): Boolean isDeviceProtectedStorage [androidJvm]open override fun isDeviceProtectedStorage(): Boolean isFinishing [androidJvm]open fun isFinishing(): Boolean isImmersive [androidJvm]open fun isImmersive(): Boolean isInMultiWindowMode [androidJvm]open fun isInMultiWindowMode(): Boolean isInPictureInPictureMode [androidJvm]open fun isInPictureInPictureMode(): Boolean isLaunchedFromBubble [androidJvm]open fun isLaunchedFromBubble(): Boolean isLocalVoiceInteractionSupported [androidJvm]open fun isLocalVoiceInteractionSupported(): Boolean isRestricted [androidJvm]open override fun isRestricted(): Boolean isTaskRoot [androidJvm]open fun isTaskRoot(): Boolean isUiContext [androidJvm]open override fun isUiContext(): Boolean isVoiceInteraction [androidJvm]open fun isVoiceInteraction(): Boolean isVoiceInteractionRoot [androidJvm]open fun isVoiceInteractionRoot(): Boolean managedQuery [androidJvm]fun ~~managedQuery~~(p0: Uri, p1: Array&lt;String&gt;, p2: String, p3: Array&lt;String&gt;, p4: String): Cursor moveDatabaseFrom [androidJvm]open override fun moveDatabaseFrom(p0: Context, p1: String): Boolean moveSharedPreferencesFrom [androidJvm]open override fun moveSharedPreferencesFrom(p0: Context, p1: String): Boolean moveTaskToBack [androidJvm]open fun moveTaskToBack(p0: Boolean): Boolean navigateUpTo [androidJvm]open fun navigateUpTo(p0: Intent): Boolean navigateUpToFromChild [androidJvm]open fun ~~navigateUpToFromChild~~(p0: Activity, p1: Intent): Boolean obtainStyledAttributes [androidJvm]fun obtainStyledAttributes(p0: IntArray): TypedArrayfun obtainStyledAttributes(p0: AttributeSet?, p1: IntArray): TypedArrayfun obtainStyledAttributes(p0: Int, p1: IntArray): TypedArrayfun obtainStyledAttributes(p0: AttributeSet?, p1: IntArray, p2: Int, p3: Int): TypedArray onActionModeFinished [androidJvm]open override fun onActionModeFinished(p0: ActionMode) onActionModeStarted [androidJvm]open override fun onActionModeStarted(p0: ActionMode) onActivityReenter [androidJvm]open fun onActivityReenter(p0: Int, p1: Intent) onAttachedToWindow [androidJvm]open override fun onAttachedToWindow() onAttachFragment [androidJvm]open fun ~~onAttachFragment~~(p0: Fragment)@MainThreadopen fun ~~onAttachFragment~~(@NonNullp0: Fragment) onBackPressed [androidJvm]@MainThreadopen override fun onBackPressed() onConfigurationChanged [androidJvm]open override fun onConfigurationChanged(@NonNullp0: Configuration) onContentChanged [androidJvm]open override fun onContentChanged() onContextItemSelected [androidJvm]open fun onContextItemSelected(p0: MenuItem): Boolean onContextMenuClosed [androidJvm]open fun onContextMenuClosed(p0: Menu) onCreate [androidJvm]open fun onCreate(p0: Bundle?, p1: PersistableBundle?) onCreateContextMenu [androidJvm]open override fun onCreateContextMenu(p0: ContextMenu, p1: View, p2: ContextMenu.ContextMenuInfo) onCreateDescription [androidJvm]open fun onCreateDescription(): CharSequence? onCreateNavigateUpTaskStack [androidJvm]open fun onCreateNavigateUpTaskStack(p0: TaskStackBuilder) onCreateOptionsMenu [androidJvm]open fun onCreateOptionsMenu(p0: Menu): Boolean onCreatePanelMenu [androidJvm]open override fun onCreatePanelMenu(p0: Int, @NonNullp1: Menu): Boolean onCreatePanelView [androidJvm]open override fun onCreatePanelView(p0: Int): View? onCreateSupportNavigateUpTaskStack [androidJvm]open fun onCreateSupportNavigateUpTaskStack(@NonNullp0: TaskStackBuilder) onCreateThumbnail [androidJvm]open fun ~~onCreateThumbnail~~(p0: Bitmap, p1: Canvas): Boolean onCreateView [androidJvm]@Nullableopen override fun onCreateView(@NonNullp0: String, @NonNullp1: Context, @NonNullp2: AttributeSet): View?@Nullableopen override fun onCreateView(@Nullablep0: View?, @NonNullp1: String, @NonNullp2: Context, @NonNullp3: AttributeSet): View? onDetachedFromWindow [androidJvm]open override fun onDetachedFromWindow() onEnterAnimationComplete [androidJvm]open fun onEnterAnimationComplete() onGenericMotionEvent [androidJvm]open fun onGenericMotionEvent(p0: MotionEvent): Boolean onGetDirectActions [androidJvm]open fun onGetDirectActions(p0: CancellationSignal, p1: Consumer&lt;MutableList&lt;DirectAction&gt;&gt;) onKeyDown [androidJvm]open override fun onKeyDown(p0: Int, p1: KeyEvent): Boolean onKeyLongPress [androidJvm]open override fun onKeyLongPress(p0: Int, p1: KeyEvent): Boolean onKeyMultiple [androidJvm]open override fun onKeyMultiple(p0: Int, p1: Int, p2: KeyEvent): Boolean onKeyShortcut [androidJvm]open fun onKeyShortcut(p0: Int, p1: KeyEvent): Boolean onKeyUp [androidJvm]open override fun onKeyUp(p0: Int, p1: KeyEvent): Boolean onLocalVoiceInteractionStarted [androidJvm]open fun onLocalVoiceInteractionStarted() onLocalVoiceInteractionStopped [androidJvm]open fun onLocalVoiceInteractionStopped() onLowMemory [androidJvm]open override fun onLowMemory() onMenuItemSelected [androidJvm]override fun onMenuItemSelected(p0: Int, @NonNullp1: MenuItem): Boolean onMenuOpened [androidJvm]open override fun onMenuOpened(p0: Int, p1: Menu): Boolean onMultiWindowModeChanged [androidJvm]@CallSuperopen override fun onMultiWindowModeChanged(p0: Boolean)@RequiresApi(api = 26)@CallSuperopen override fun onMultiWindowModeChanged(p0: Boolean, @NonNullp1: Configuration) onNavigateUp [androidJvm]open fun onNavigateUp(): Boolean onNavigateUpFromChild [androidJvm]open fun ~~onNavigateUpFromChild~~(p0: Activity): Boolean onOptionsItemSelected [androidJvm]open fun onOptionsItemSelected(p0: MenuItem): Boolean onOptionsMenuClosed [androidJvm]open fun onOptionsMenuClosed(p0: Menu) onPanelClosed [androidJvm]open override fun onPanelClosed(p0: Int, @NonNullp1: Menu) onPerformDirectAction [androidJvm]open fun onPerformDirectAction(p0: String, p1: Bundle, p2: CancellationSignal, p3: Consumer&lt;Bundle&gt;) onPictureInPictureModeChanged [androidJvm]@CallSuperopen override fun onPictureInPictureModeChanged(p0: Boolean)@RequiresApi(api = 26)@CallSuperopen override fun onPictureInPictureModeChanged(p0: Boolean, @NonNullp1: Configuration) onPictureInPictureRequested [androidJvm]open fun onPictureInPictureRequested(): Boolean onPictureInPictureUiStateChanged [androidJvm]open fun onPictureInPictureUiStateChanged(p0: PictureInPictureUiState) onPointerCaptureChanged [androidJvm]open fun onPointerCaptureChanged(p0: Boolean) onPostCreate [androidJvm]open fun onPostCreate(p0: Bundle?, p1: PersistableBundle?) onPrepareNavigateUpTaskStack [androidJvm]open fun onPrepareNavigateUpTaskStack(p0: TaskStackBuilder) onPrepareOptionsMenu [androidJvm]open fun onPrepareOptionsMenu(p0: Menu): Boolean onPreparePanel [androidJvm]open override fun onPreparePanel(p0: Int, @Nullablep1: View?, @NonNullp2: Menu): Boolean onPrepareSupportNavigateUpTaskStack [androidJvm]open fun onPrepareSupportNavigateUpTaskStack(@NonNullp0: TaskStackBuilder) onProvideAssistContent [androidJvm]open fun onProvideAssistContent(p0: AssistContent) onProvideAssistData [androidJvm]open fun onProvideAssistData(p0: Bundle) onProvideKeyboardShortcuts [androidJvm]open override fun onProvideKeyboardShortcuts(p0: MutableList&lt;KeyboardShortcutGroup&gt;, p1: Menu?, p2: Int) onProvideReferrer [androidJvm]open fun onProvideReferrer(): Uri onRequestPermissionsResult [androidJvm]@CallSuperopen override fun onRequestPermissionsResult(p0: Int, @NonNullp1: Array&lt;String&gt;, @NonNullp2: IntArray) onRestoreInstanceState [androidJvm]open fun onRestoreInstanceState(p0: Bundle?, p1: PersistableBundle?) onRetainCustomNonConfigurationInstance [androidJvm]@Nullableopen fun ~~onRetainCustomNonConfigurationInstance~~(): Any? onRetainNonConfigurationInstance [androidJvm]@Nullableoverride fun onRetainNonConfigurationInstance(): Any? onSaveInstanceState [androidJvm]open fun onSaveInstanceState(p0: Bundle, p1: PersistableBundle) onSearchRequested [androidJvm]open override fun onSearchRequested(): Booleanopen override fun onSearchRequested(p0: SearchEvent?): Boolean onStateNotSaved [androidJvm]open override fun onStateNotSaved() onSupportActionModeFinished [androidJvm]@CallSuperopen override fun onSupportActionModeFinished(@NonNullp0: ActionMode) onSupportActionModeStarted [androidJvm]@CallSuperopen override fun onSupportActionModeStarted(@NonNullp0: ActionMode) onSupportContentChanged [androidJvm]open fun ~~onSupportContentChanged~~() onSupportNavigateUp [androidJvm]open fun onSupportNavigateUp(): Boolean onTopResumedActivityChanged [androidJvm]open fun onTopResumedActivityChanged(p0: Boolean) onTouchEvent [androidJvm]open fun onTouchEvent(p0: MotionEvent): Boolean onTrackballEvent [androidJvm]open fun onTrackballEvent(p0: MotionEvent): Boolean onTrimMemory [androidJvm]@CallSuperopen override fun onTrimMemory(p0: Int) onUserInteraction [androidJvm]open fun onUserInteraction() onVisibleBehindCanceled [androidJvm]open fun ~~onVisibleBehindCanceled~~() onWindowAttributesChanged [androidJvm]open override fun onWindowAttributesChanged(p0: WindowManager.LayoutParams) onWindowFocusChanged [androidJvm]open override fun onWindowFocusChanged(p0: Boolean) onWindowStartingActionMode [androidJvm]open override fun onWindowStartingActionMode(p0: ActionMode.Callback): ActionMode?open override fun onWindowStartingActionMode(p0: ActionMode.Callback, p1: Int): ActionMode? onWindowStartingSupportActionMode [androidJvm]@Nullableopen override fun onWindowStartingSupportActionMode(@NonNullp0: ActionMode.Callback): ActionMode? openContextMenu [androidJvm]open fun openContextMenu(p0: View) openFileInput [androidJvm]open override fun openFileInput(p0: String): FileInputStream openFileOutput [androidJvm]open override fun openFileOutput(p0: String, p1: Int): FileOutputStream openOptionsMenu [androidJvm]open override fun openOptionsMenu() openOrCreateDatabase [androidJvm]open override fun openOrCreateDatabase(p0: String, p1: Int, p2: SQLiteDatabase.CursorFactory): SQLiteDatabaseopen override fun openOrCreateDatabase(p0: String, p1: Int, p2: SQLiteDatabase.CursorFactory, p3: DatabaseErrorHandler?): SQLiteDatabase overrideActivityTransition [androidJvm]open fun overrideActivityTransition(p0: Int, p1: Int, p2: Int)open fun overrideActivityTransition(p0: Int, p1: Int, p2: Int, p3: Int) overridePendingTransition [androidJvm]open fun ~~overridePendingTransition~~(p0: Int, p1: Int)open fun ~~overridePendingTransition~~(p0: Int, p1: Int, p2: Int) peekAvailableContext [androidJvm]@Nullableopen override fun peekAvailableContext(): Context? peekWallpaper [androidJvm]open override fun ~~peekWallpaper~~(): Drawable postponeEnterTransition [androidJvm]open fun postponeEnterTransition() putExtraData [androidJvm]@RestrictTo(value = [RestrictTo.Scope.LIBRARY_GROUP_PREFIX])open fun ~~putExtraData~~(p0: ComponentActivity.ExtraData) recreate [androidJvm]open fun recreate() registerActivityLifecycleCallbacks [androidJvm]open fun registerActivityLifecycleCallbacks(p0: Application.ActivityLifecycleCallbacks) registerComponentCallbacks [androidJvm]open override fun registerComponentCallbacks(p0: ComponentCallbacks) registerDeviceIdChangeListener [androidJvm]open override fun registerDeviceIdChangeListener(p0: Executor, p1: IntConsumer) registerForActivityResult [androidJvm]@NonNulloverride fun &lt;I : Any, O : Any&gt; registerForActivityResult(@NonNullp0: ActivityResultContract&lt;I, O&gt;, @NonNullp1: ActivityResultCallback&lt;O&gt;): ActivityResultLauncher&lt;I&gt;@NonNulloverride fun &lt;I : Any, O : Any&gt; registerForActivityResult(@NonNullp0: ActivityResultContract&lt;I, O&gt;, @NonNullp1: ActivityResultRegistry, @NonNullp2: ActivityResultCallback&lt;O&gt;): ActivityResultLauncher&lt;I&gt; registerForContextMenu [androidJvm]open fun registerForContextMenu(p0: View) registerReceiver [androidJvm]open override fun registerReceiver(p0: BroadcastReceiver?, p1: IntentFilter): Intent?open override fun registerReceiver(p0: BroadcastReceiver?, p1: IntentFilter, p2: Int): Intent?open override fun registerReceiver(p0: BroadcastReceiver?, p1: IntentFilter, p2: String?, p3: Handler?): Intent?open override fun registerReceiver(p0: BroadcastReceiver?, p1: IntentFilter, p2: String?, p3: Handler?, p4: Int): Intent? registerScreenCaptureCallback [androidJvm]open fun registerScreenCaptureCallback(p0: Executor, p1: Activity.ScreenCaptureCallback) releaseInstance [androidJvm]open fun releaseInstance(): Boolean removeDialog [androidJvm]fun ~~removeDialog~~(p0: Int) removeMenuProvider [androidJvm]open override fun removeMenuProvider(@NonNullp0: MenuProvider) removeOnConfigurationChangedListener [androidJvm]override fun removeOnConfigurationChangedListener(@NonNullp0: Consumer&lt;Configuration&gt;) removeOnContextAvailableListener [androidJvm]override fun removeOnContextAvailableListener(@NonNulllistener: OnContextAvailableListener) removeOnMultiWindowModeChangedListener [androidJvm]override fun removeOnMultiWindowModeChangedListener(@NonNullp0: Consumer&lt;MultiWindowModeChangedInfo&gt;) removeOnNewIntentListener [androidJvm]override fun removeOnNewIntentListener(@NonNullp0: Consumer&lt;Intent&gt;) removeOnPictureInPictureModeChangedListener [androidJvm]override fun removeOnPictureInPictureModeChangedListener(@NonNullp0: Consumer&lt;PictureInPictureModeChangedInfo&gt;) removeOnTrimMemoryListener [androidJvm]override fun removeOnTrimMemoryListener(@NonNullp0: Consumer&lt;Int&gt;) removeStickyBroadcast [androidJvm]open override fun ~~removeStickyBroadcast~~(p0: Intent) removeStickyBroadcastAsUser [androidJvm]open override fun ~~removeStickyBroadcastAsUser~~(p0: Intent, p1: UserHandle) reportFullyDrawn [androidJvm]open override fun reportFullyDrawn() requestDragAndDropPermissions [androidJvm]open fun requestDragAndDropPermissions(p0: DragEvent): DragAndDropPermissions requestFullscreenMode [androidJvm]open fun requestFullscreenMode(p0: Int, p1: OutcomeReceiver&lt;Void, Throwable&gt;?) requestPermissions [androidJvm]fun requestPermissions(p0: Array&lt;String&gt;, p1: Int) requestShowKeyboardShortcuts [androidJvm]fun requestShowKeyboardShortcuts() requestVisibleBehind [androidJvm]open fun ~~requestVisibleBehind~~(p0: Boolean): Boolean requestWindowFeature [androidJvm]fun requestWindowFeature(p0: Int): Boolean requireViewById [androidJvm]fun &lt;T : View&gt; requireViewById(p0: Int): T revokeSelfPermissionOnKill [androidJvm]open fun revokeSelfPermissionOnKill(p0: String) revokeSelfPermissionsOnKill [androidJvm]open override fun revokeSelfPermissionsOnKill(p0: MutableCollection&lt;String&gt;) revokeUriPermission [androidJvm]open override fun revokeUriPermission(p0: Uri, p1: Int)open override fun revokeUriPermission(p0: String, p1: Uri, p2: Int) runOnUiThread [androidJvm]fun runOnUiThread(p0: Runnable) sendBroadcast [androidJvm]open override fun sendBroadcast(p0: Intent)open override fun sendBroadcast(p0: Intent, p1: String?)open override fun sendBroadcast(p0: Intent, p1: String?, p2: Bundle?) sendBroadcastAsUser [androidJvm]open override fun sendBroadcastAsUser(p0: Intent, p1: UserHandle)open override fun sendBroadcastAsUser(p0: Intent, p1: UserHandle, p2: String?) sendBroadcastWithMultiplePermissions [androidJvm]open fun sendBroadcastWithMultiplePermissions(p0: Intent, p1: Array&lt;String&gt;) sendOrderedBroadcast [androidJvm]open override fun sendOrderedBroadcast(p0: Intent, p1: String?)open override fun sendOrderedBroadcast(p0: Intent, p1: String?, p2: Bundle?)open override fun sendOrderedBroadcast(p0: Intent, p1: String?, p2: BroadcastReceiver?, p3: Handler?, p4: Int, p5: String?, p6: Bundle?)open override fun sendOrderedBroadcast(p0: Intent, p1: String?, p2: Bundle?, p3: BroadcastReceiver?, p4: Handler?, p5: Int, p6: String?, p7: Bundle?)open override fun sendOrderedBroadcast(p0: Intent, p1: String?, p2: String?, p3: BroadcastReceiver?, p4: Handler?, p5: Int, p6: String?, p7: Bundle?)open fun sendOrderedBroadcast(p0: Intent, p1: Int, p2: String?, p3: String?, p4: BroadcastReceiver?, p5: Handler?, p6: String?, p7: Bundle?, p8: Bundle?) sendOrderedBroadcastAsUser [androidJvm]open override fun sendOrderedBroadcastAsUser(p0: Intent, p1: UserHandle, p2: String?, p3: BroadcastReceiver?, p4: Handler?, p5: Int, p6: String?, p7: Bundle?) sendStickyBroadcast [androidJvm]open override fun ~~sendStickyBroadcast~~(p0: Intent)open override fun ~~sendStickyBroadcast~~(p0: Intent, p1: Bundle?) sendStickyBroadcastAsUser [androidJvm]open override fun ~~sendStickyBroadcastAsUser~~(p0: Intent, p1: UserHandle) sendStickyOrderedBroadcast [androidJvm]open override fun ~~sendStickyOrderedBroadcast~~(p0: Intent, p1: BroadcastReceiver?, p2: Handler?, p3: Int, p4: String?, p5: Bundle?) sendStickyOrderedBroadcastAsUser [androidJvm]open override fun ~~sendStickyOrderedBroadcastAsUser~~(p0: Intent, p1: UserHandle, p2: BroadcastReceiver?, p3: Handler?, p4: Int, p5: String?, p6: Bundle?) setActionBar [androidJvm]open fun setActionBar(p0: Toolbar?) setContentTransitionManager [androidJvm]open fun setContentTransitionManager(p0: TransitionManager) setContentView [androidJvm]open override fun setContentView(p0: View)open override fun setContentView(@LayoutResp0: Int)open override fun setContentView(p0: View, p1: ViewGroup.LayoutParams) setDefaultKeyMode [androidJvm]fun setDefaultKeyMode(p0: Int) setEnterSharedElementCallback [androidJvm]open fun setEnterSharedElementCallback(p0: SharedElementCallback)open fun setEnterSharedElementCallback(@Nullablep0: SharedElementCallback?) setExitSharedElementCallback [androidJvm]open fun setExitSharedElementCallback(p0: SharedElementCallback)open fun setExitSharedElementCallback(@Nullablep0: SharedElementCallback?) setFeatureDrawable [androidJvm]fun setFeatureDrawable(p0: Int, p1: Drawable) setFeatureDrawableAlpha [androidJvm]fun setFeatureDrawableAlpha(p0: Int, p1: Int) setFeatureDrawableResource [androidJvm]fun setFeatureDrawableResource(p0: Int, p1: Int) setFeatureDrawableUri [androidJvm]fun setFeatureDrawableUri(p0: Int, p1: Uri) setFinishOnTouchOutside [androidJvm]open fun setFinishOnTouchOutside(p0: Boolean) setImmersive [androidJvm]open fun setImmersive(p0: Boolean) setInheritShowWhenLocked [androidJvm]open fun setInheritShowWhenLocked(p0: Boolean) setIntent [androidJvm]open fun setIntent(p0: Intent) setLocusContext [androidJvm]open fun setLocusContext(p0: LocusId?, p1: Bundle?) setMediaController [androidJvm]fun setMediaController(p0: MediaController) setPictureInPictureParams [androidJvm]open fun setPictureInPictureParams(p0: PictureInPictureParams) setProgress [androidJvm]fun ~~setProgress~~(p0: Int) setProgressBarIndeterminate [androidJvm]fun ~~setProgressBarIndeterminate~~(p0: Boolean) setProgressBarIndeterminateVisibility [androidJvm]fun ~~setProgressBarIndeterminateVisibility~~(p0: Boolean) setProgressBarVisibility [androidJvm]fun ~~setProgressBarVisibility~~(p0: Boolean) setRecentsScreenshotEnabled [androidJvm]open fun setRecentsScreenshotEnabled(p0: Boolean) setRequestedOrientation [androidJvm]open fun setRequestedOrientation(p0: Int) setResult [androidJvm]fun setResult(p0: Int)fun setResult(p0: Int, p1: Intent) setSecondaryProgress [androidJvm]fun ~~setSecondaryProgress~~(p0: Int) setShouldDockBigOverlays [androidJvm]open fun setShouldDockBigOverlays(p0: Boolean) setShowWhenLocked [androidJvm]open fun setShowWhenLocked(p0: Boolean) setSupportActionBar [androidJvm]open fun setSupportActionBar(@Nullablep0: Toolbar?) setSupportProgress [androidJvm]open fun ~~setSupportProgress~~(p0: Int) setSupportProgressBarIndeterminate [androidJvm]open fun ~~setSupportProgressBarIndeterminate~~(p0: Boolean) setSupportProgressBarIndeterminateVisibility [androidJvm]open fun ~~setSupportProgressBarIndeterminateVisibility~~(p0: Boolean) setSupportProgressBarVisibility [androidJvm]open fun ~~setSupportProgressBarVisibility~~(p0: Boolean) setTaskDescription [androidJvm]open fun setTaskDescription(p0: ActivityManager.TaskDescription) setTheme [androidJvm]open fun setTheme(p0: Resources.Theme?)open override fun setTheme(@StyleResp0: Int) setTitle [androidJvm]open fun setTitle(p0: CharSequence)open fun setTitle(p0: Int) setTitleColor [androidJvm]open fun ~~setTitleColor~~(p0: Int) setTranslucent [androidJvm]open fun setTranslucent(p0: Boolean): Boolean setTurnScreenOn [androidJvm]open fun setTurnScreenOn(p0: Boolean) setVisible [androidJvm]open fun setVisible(p0: Boolean) setVolumeControlStream [androidJvm]fun setVolumeControlStream(p0: Int) setVrModeEnabled [androidJvm]open fun setVrModeEnabled(p0: Boolean, p1: ComponentName) setWallpaper [androidJvm]open override fun ~~setWallpaper~~(p0: Bitmap)open override fun ~~setWallpaper~~(p0: InputStream) shouldDockBigOverlays [androidJvm]open fun shouldDockBigOverlays(): Boolean shouldShowRequestPermissionRationale [androidJvm]open fun shouldShowRequestPermissionRationale(p0: String): Boolean shouldUpRecreateTask [androidJvm]open fun shouldUpRecreateTask(p0: Intent): Boolean showAssist [androidJvm]open fun showAssist(p0: Bundle): Boolean showDialog [androidJvm]fun ~~showDialog~~(p0: Int)fun ~~showDialog~~(p0: Int, p1: Bundle): Boolean showLockTaskEscapeMessage [androidJvm]open fun showLockTaskEscapeMessage() startActionMode [androidJvm]open fun startActionMode(p0: ActionMode.Callback): ActionMode?open fun startActionMode(p0: ActionMode.Callback, p1: Int): ActionMode? startActivities [androidJvm]open override fun startActivities(p0: Array&lt;Intent&gt;)open override fun startActivities(p0: Array&lt;Intent&gt;, p1: Bundle?) startActivity [androidJvm]open override fun startActivity(p0: Intent)open override fun startActivity(p0: Intent, p1: Bundle?) startActivityForResult [androidJvm]open override fun ~~startActivityForResult~~(@NonNullp0: Intent, p1: Int)open override fun ~~startActivityForResult~~(@NonNullp0: Intent, p1: Int, @Nullablep2: Bundle?) startActivityFromChild [androidJvm]open fun ~~startActivityFromChild~~(p0: Activity, p1: Intent, p2: Int)open fun ~~startActivityFromChild~~(p0: Activity, p1: Intent, p2: Int, p3: Bundle?) startActivityFromFragment [androidJvm]open fun ~~startActivityFromFragment~~(p0: Fragment, p1: Intent, p2: Int)open fun ~~startActivityFromFragment~~(p0: Fragment, p1: Intent, p2: Int, p3: Bundle?)open fun startActivityFromFragment(@NonNullp0: Fragment, @NonNullp1: Intent, p2: Int)open fun startActivityFromFragment(@NonNullp0: Fragment, @NonNullp1: Intent, p2: Int, @Nullablep3: Bundle?) startActivityIfNeeded [androidJvm]open fun startActivityIfNeeded(p0: Intent, p1: Int): Booleanopen fun startActivityIfNeeded(p0: Intent, p1: Int, p2: Bundle?): Boolean startForegroundService [androidJvm]open override fun startForegroundService(p0: Intent): ComponentName? startInstrumentation [androidJvm]open override fun startInstrumentation(p0: ComponentName, p1: String?, p2: Bundle?): Boolean startIntentSender [androidJvm]open override fun startIntentSender(p0: IntentSender, p1: Intent?, p2: Int, p3: Int, p4: Int)open override fun startIntentSender(p0: IntentSender, p1: Intent?, p2: Int, p3: Int, p4: Int, p5: Bundle?) startIntentSenderForResult [androidJvm]open override fun ~~startIntentSenderForResult~~(@NonNullp0: IntentSender, p1: Int, @Nullablep2: Intent?, p3: Int, p4: Int, p5: Int)open override fun ~~startIntentSenderForResult~~(@NonNullp0: IntentSender, p1: Int, @Nullablep2: Intent?, p3: Int, p4: Int, p5: Int, @Nullablep6: Bundle?) startIntentSenderFromChild [androidJvm]open fun ~~startIntentSenderFromChild~~(p0: Activity, p1: IntentSender, p2: Int, p3: Intent, p4: Int, p5: Int, p6: Int)open fun ~~startIntentSenderFromChild~~(p0: Activity, p1: IntentSender, p2: Int, p3: Intent, p4: Int, p5: Int, p6: Int, p7: Bundle?) startIntentSenderFromFragment [androidJvm]open fun ~~startIntentSenderFromFragment~~(@NonNullp0: Fragment, @NonNullp1: IntentSender, p2: Int, @Nullablep3: Intent?, p4: Int, p5: Int, p6: Int, @Nullablep7: Bundle?) startLocalVoiceInteraction [androidJvm]open fun startLocalVoiceInteraction(p0: Bundle) startLockTask [androidJvm]open fun startLockTask() startManagingCursor [androidJvm]open fun ~~startManagingCursor~~(p0: Cursor) startNextMatchingActivity [androidJvm]open fun startNextMatchingActivity(p0: Intent): Booleanopen fun startNextMatchingActivity(p0: Intent, p1: Bundle?): Boolean startPostponedEnterTransition [androidJvm]open fun startPostponedEnterTransition() startSearch [androidJvm]open fun startSearch(p0: String?, p1: Boolean, p2: Bundle?, p3: Boolean) startService [androidJvm]open override fun startService(p0: Intent): ComponentName? startSupportActionMode [androidJvm]@Nullableopen fun startSupportActionMode(@NonNullp0: ActionMode.Callback): ActionMode? stopLocalVoiceInteraction [androidJvm]open fun stopLocalVoiceInteraction() stopLockTask [androidJvm]open fun stopLockTask() stopManagingCursor [androidJvm]open fun ~~stopManagingCursor~~(p0: Cursor) stopService [androidJvm]open override fun stopService(p0: Intent): Boolean superDispatchKeyEvent [androidJvm]@RestrictTo(value = [RestrictTo.Scope.LIBRARY_GROUP_PREFIX])open override fun superDispatchKeyEvent(@NonNullp0: KeyEvent): Boolean supportFinishAfterTransition [androidJvm]open fun supportFinishAfterTransition() supportInvalidateOptionsMenu [androidJvm]open override fun supportInvalidateOptionsMenu() supportNavigateUpTo [androidJvm]open fun supportNavigateUpTo(@NonNullp0: Intent) supportPostponeEnterTransition [androidJvm]open fun supportPostponeEnterTransition() supportRequestWindowFeature [androidJvm]open fun supportRequestWindowFeature(p0: Int): Boolean supportShouldUpRecreateTask [androidJvm]open fun supportShouldUpRecreateTask(@NonNullp0: Intent): Boolean supportStartPostponedEnterTransition [androidJvm]open fun supportStartPostponedEnterTransition() takeKeyEvents [androidJvm]open fun takeKeyEvents(p0: Boolean) triggerSearch [androidJvm]open fun triggerSearch(p0: String, p1: Bundle?) unbindService [androidJvm]open override fun unbindService(p0: ServiceConnection) unregisterActivityLifecycleCallbacks [androidJvm]open fun unregisterActivityLifecycleCallbacks(p0: Application.ActivityLifecycleCallbacks) unregisterComponentCallbacks [androidJvm]open override fun unregisterComponentCallbacks(p0: ComponentCallbacks) unregisterDeviceIdChangeListener [androidJvm]open override fun unregisterDeviceIdChangeListener(p0: IntConsumer) unregisterForContextMenu [androidJvm]open fun unregisterForContextMenu(p0: View) unregisterReceiver [androidJvm]open override fun unregisterReceiver(p0: BroadcastReceiver) unregisterScreenCaptureCallback [androidJvm]open fun unregisterScreenCaptureCallback(p0: Activity.ScreenCaptureCallback) updateServiceGroup [androidJvm]open override fun updateServiceGroup(p0: ServiceConnection, p1: Int, p2: Int) validateRequestPermissionsRequestCode [androidJvm]override fun ~~validateRequestPermissionsRequestCode~~(p0: Int)"},{"location":"reference/android/app/com.bluerpc.worker/-main-activity/#properties","title":"Properties","text":"Name Summary activityResultRegistry [androidJvm]@get:NonNulloverride val activityResultRegistry: ActivityResultRegistry defaultViewModelCreationExtras [androidJvm]@get:NonNull@get:CallSuperopen override val defaultViewModelCreationExtras: CreationExtras defaultViewModelProviderFactory [androidJvm]@get:NonNullopen override val defaultViewModelProviderFactory: ViewModelProvider.Factory fullyDrawnReporter [androidJvm]@get:NonNullopen override val fullyDrawnReporter: FullyDrawnReporter lifecycle [androidJvm]@get:NonNullopen override val lifecycle: Lifecycle onBackPressedDispatcher [androidJvm]@get:NonNulloverride val onBackPressedDispatcher: OnBackPressedDispatcher savedStateRegistry [androidJvm]@get:NonNulloverride val savedStateRegistry: SavedStateRegistry viewModelStore [androidJvm]@get:NonNullopen override val viewModelStore: ViewModelStore"},{"location":"reference/android/app/com.bluerpc.worker/-main-activity/-main-activity/","title":"main activity","text":"<p>//app/com.bluerpc.worker/MainActivity/MainActivity</p>"},{"location":"reference/android/app/com.bluerpc.worker/-main-activity/-main-activity/#mainactivity","title":"MainActivity","text":"<p>[androidJvm]\\ constructor()</p>"},{"location":"reference/android/app/com.bluerpc.worker/-main-view-model/","title":"Index","text":"<p>//app/com.bluerpc.worker/MainViewModel</p>"},{"location":"reference/android/app/com.bluerpc.worker/-main-view-model/#mainviewmodel","title":"MainViewModel","text":"<p>[androidJvm]\\ class MainViewModel(application: Application) : AndroidViewModel</p>"},{"location":"reference/android/app/com.bluerpc.worker/-main-view-model/#constructors","title":"Constructors","text":"MainViewModel [androidJvm]constructor(application: Application)"},{"location":"reference/android/app/com.bluerpc.worker/-main-view-model/#functions","title":"Functions","text":"Name Summary addCloseable [androidJvm]open fun addCloseable(@NonNullp0: Closeable) getApplication [androidJvm]open fun &lt;T : Application&gt; getApplication(): T"},{"location":"reference/android/app/com.bluerpc.worker/-main-view-model/#properties","title":"Properties","text":"Name Summary ready [androidJvm]val ready: MutableLiveData&lt;Boolean&gt;"},{"location":"reference/android/app/com.bluerpc.worker/-main-view-model/-main-view-model/","title":"main view model","text":"<p>//app/com.bluerpc.worker/MainViewModel/MainViewModel</p>"},{"location":"reference/android/app/com.bluerpc.worker/-main-view-model/-main-view-model/#mainviewmodel","title":"MainViewModel","text":"<p>[androidJvm]\\ constructor(application: Application)</p>"},{"location":"reference/android/app/com.bluerpc.worker/-main-view-model/ready/","title":"Ready","text":"<p>//app/com.bluerpc.worker/MainViewModel/ready</p>"},{"location":"reference/android/app/com.bluerpc.worker/-main-view-model/ready/#ready","title":"ready","text":"<p>[androidJvm]\\ val ready: MutableLiveData&lt;Boolean&gt;</p>"},{"location":"reference/android/app/com.bluerpc.worker/-permission-fragment/","title":"Index","text":"<p>//app/com.bluerpc.worker/PermissionFragment</p>"},{"location":"reference/android/app/com.bluerpc.worker/-permission-fragment/#permissionfragment","title":"PermissionFragment","text":"<p>[androidJvm]\\ class PermissionFragment : Fragment</p> <p>Fragment used to request all required permissions and to enable bluetooth/location</p>"},{"location":"reference/android/app/com.bluerpc.worker/-permission-fragment/#constructors","title":"Constructors","text":"PermissionFragment [androidJvm]constructor()"},{"location":"reference/android/app/com.bluerpc.worker/-permission-fragment/#functions","title":"Functions","text":"Name Summary dump [androidJvm]open fun dump(@NonNullp0: String, @Nullablep1: FileDescriptor?, @NonNullp2: PrintWriter, @Nullablep3: Array&lt;String&gt;?) equals [androidJvm]operator override fun equals(@Nullableother: Any?): Boolean getActivity [androidJvm]@Nullablefun getActivity(): FragmentActivity? getAllowEnterTransitionOverlap [androidJvm]open fun getAllowEnterTransitionOverlap(): Boolean getAllowReturnTransitionOverlap [androidJvm]open fun getAllowReturnTransitionOverlap(): Boolean getArguments [androidJvm]@Nullablefun getArguments(): Bundle? getChildFragmentManager [androidJvm]@NonNullfun getChildFragmentManager(): FragmentManager getContext [androidJvm]@Nullableopen fun getContext(): Context? getEnterTransition [androidJvm]@Nullableopen fun getEnterTransition(): Any? getExitTransition [androidJvm]@Nullableopen fun getExitTransition(): Any? getFragmentManager [androidJvm]@Nullablefun ~~getFragmentManager~~(): FragmentManager? getHost [androidJvm]@Nullablefun getHost(): Any? getId [androidJvm]fun getId(): Int getLayoutInflater [androidJvm]@NonNullfun getLayoutInflater(): LayoutInflater@NonNull@RestrictTo(value = [RestrictTo.Scope.LIBRARY_GROUP_PREFIX])open fun ~~getLayoutInflater~~(@Nullablep0: Bundle?): LayoutInflater getLoaderManager [androidJvm]@NonNullopen fun ~~getLoaderManager~~(): LoaderManager getParentFragment [androidJvm]@Nullablefun getParentFragment(): Fragment? getParentFragmentManager [androidJvm]@NonNullfun getParentFragmentManager(): FragmentManager getReenterTransition [androidJvm]@Nullableopen fun getReenterTransition(): Any? getResources [androidJvm]@NonNullfun getResources(): Resources getRetainInstance [androidJvm]fun ~~getRetainInstance~~(): Boolean getReturnTransition [androidJvm]@Nullableopen fun getReturnTransition(): Any? getSharedElementEnterTransition [androidJvm]@Nullableopen fun getSharedElementEnterTransition(): Any? getSharedElementReturnTransition [androidJvm]@Nullableopen fun getSharedElementReturnTransition(): Any? getString [androidJvm]@NonNullfun getString(@StringResp0: Int): String@NonNullfun getString(@StringResp0: Int, @Nullablevararg p1: Any): String getTag [androidJvm]@Nullablefun getTag(): String? getTargetFragment [androidJvm]@Nullablefun ~~getTargetFragment~~(): Fragment? getTargetRequestCode [androidJvm]fun ~~getTargetRequestCode~~(): Int getText [androidJvm]@NonNullfun getText(@StringResp0: Int): CharSequence getUserVisibleHint [androidJvm]open fun ~~getUserVisibleHint~~(): Boolean getView [androidJvm]@Nullableopen fun getView(): View? getViewLifecycleOwner [androidJvm]@MainThread@NonNullopen fun getViewLifecycleOwner(): LifecycleOwner getViewLifecycleOwnerLiveData [androidJvm]@NonNullopen fun getViewLifecycleOwnerLiveData(): LiveData&lt;LifecycleOwner&gt; hashCode [androidJvm]override fun hashCode(): Int hasOptionsMenu [androidJvm]@RestrictTo(value = [RestrictTo.Scope.LIBRARY_GROUP_PREFIX])fun hasOptionsMenu(): Boolean isAdded [androidJvm]fun isAdded(): Boolean isDetached [androidJvm]fun isDetached(): Boolean isHidden [androidJvm]fun isHidden(): Boolean isInLayout [androidJvm]fun isInLayout(): Boolean isMenuVisible [androidJvm]@RestrictTo(value = [RestrictTo.Scope.LIBRARY_GROUP_PREFIX])fun isMenuVisible(): Boolean isRemoving [androidJvm]fun isRemoving(): Boolean isResumed [androidJvm]fun isResumed(): Boolean isStateSaved [androidJvm]fun isStateSaved(): Boolean isVisible [androidJvm]fun isVisible(): Boolean onActivityCreated [androidJvm]@MainThread@CallSuperopen fun ~~onActivityCreated~~(@Nullablep0: Bundle?) onActivityResult [androidJvm]open fun ~~onActivityResult~~(p0: Int, p1: Int, @Nullablep2: Intent?) onAttach [androidJvm]@MainThread@CallSuperopen fun ~~onAttach~~(@NonNullp0: Activity)@MainThread@CallSuperopen fun onAttach(@NonNullp0: Context) onAttachFragment [androidJvm]@MainThreadopen fun ~~onAttachFragment~~(@NonNullp0: Fragment) onConfigurationChanged [androidJvm]@CallSuperopen override fun onConfigurationChanged(@NonNullp0: Configuration) onContextItemSelected [androidJvm]@MainThreadopen fun onContextItemSelected(@NonNullp0: MenuItem): Boolean onCreate [androidJvm]open override fun onCreate(savedInstanceState: Bundle?)Ask for bluetooth and location, if on android 6, ask for permissions onCreateAnimation [androidJvm]@MainThread@Nullableopen fun onCreateAnimation(p0: Int, p1: Boolean, p2: Int): Animation? onCreateAnimator [androidJvm]@MainThread@Nullableopen fun onCreateAnimator(p0: Int, p1: Boolean, p2: Int): Animator? onCreateContextMenu [androidJvm]@MainThreadopen override fun onCreateContextMenu(@NonNullp0: ContextMenu, @NonNullp1: View, @Nullablep2: ContextMenu.ContextMenuInfo?) onCreateOptionsMenu [androidJvm]@MainThreadopen fun ~~onCreateOptionsMenu~~(@NonNullp0: Menu, @NonNullp1: MenuInflater) onCreateView [androidJvm]@MainThread@Nullableopen fun onCreateView(@NonNullp0: LayoutInflater, @Nullablep1: ViewGroup?, @Nullablep2: Bundle?): View? onDestroy [androidJvm]@MainThread@CallSuperopen fun onDestroy() onDestroyOptionsMenu [androidJvm]@MainThreadopen fun ~~onDestroyOptionsMenu~~() onDestroyView [androidJvm]@MainThread@CallSuperopen fun onDestroyView() onDetach [androidJvm]@MainThread@CallSuperopen fun onDetach() onGetLayoutInflater [androidJvm]@NonNullopen fun onGetLayoutInflater(@Nullablep0: Bundle?): LayoutInflater onHiddenChanged [androidJvm]@MainThreadopen fun onHiddenChanged(p0: Boolean) onInflate [androidJvm]@UiThread@CallSuperopen fun ~~onInflate~~(@NonNullp0: Activity, @NonNullp1: AttributeSet, @Nullablep2: Bundle?)@UiThread@CallSuperopen fun onInflate(@NonNullp0: Context, @NonNullp1: AttributeSet, @Nullablep2: Bundle?) onLowMemory [androidJvm]@MainThread@CallSuperopen override fun onLowMemory() onMultiWindowModeChanged [androidJvm]open fun onMultiWindowModeChanged(p0: Boolean) onOptionsItemSelected [androidJvm]@MainThreadopen fun ~~onOptionsItemSelected~~(@NonNullp0: MenuItem): Boolean onOptionsMenuClosed [androidJvm]@MainThreadopen fun ~~onOptionsMenuClosed~~(@NonNullp0: Menu) onPause [androidJvm]@MainThread@CallSuperopen fun onPause() onPictureInPictureModeChanged [androidJvm]open fun onPictureInPictureModeChanged(p0: Boolean) onPrepareOptionsMenu [androidJvm]@MainThreadopen fun ~~onPrepareOptionsMenu~~(@NonNullp0: Menu) onPrimaryNavigationFragmentChanged [androidJvm]@MainThreadopen fun onPrimaryNavigationFragmentChanged(p0: Boolean) onRequestPermissionsResult [androidJvm]open fun ~~onRequestPermissionsResult~~(p0: Int, @NonNullp1: Array&lt;String&gt;, @NonNullp2: IntArray) onResume [androidJvm]@MainThread@CallSuperopen fun onResume() onSaveInstanceState [androidJvm]@MainThreadopen fun onSaveInstanceState(@NonNullp0: Bundle) onStart [androidJvm]@MainThread@CallSuperopen fun onStart() onStop [androidJvm]@MainThread@CallSuperopen fun onStop() onViewCreated [androidJvm]@MainThreadopen fun onViewCreated(@NonNullp0: View, @Nullablep1: Bundle?) onViewStateRestored [androidJvm]@MainThread@CallSuperopen fun onViewStateRestored(@Nullablep0: Bundle?) postponeEnterTransition [androidJvm]open fun postponeEnterTransition()fun postponeEnterTransition(p0: Long, @NonNullp1: TimeUnit) registerForActivityResult [androidJvm]@MainThread@NonNulloverride fun &lt;I : Any, O : Any&gt; registerForActivityResult(@NonNullp0: ActivityResultContract&lt;I, O&gt;, @NonNullp1: ActivityResultCallback&lt;O&gt;): ActivityResultLauncher&lt;I&gt;@MainThread@NonNulloverride fun &lt;I : Any, O : Any&gt; registerForActivityResult(@NonNullp0: ActivityResultContract&lt;I, O&gt;, @NonNullp1: ActivityResultRegistry, @NonNullp2: ActivityResultCallback&lt;O&gt;): ActivityResultLauncher&lt;I&gt; registerForContextMenu [androidJvm]open fun registerForContextMenu(@NonNullp0: View) requestPermissions [androidJvm]fun ~~requestPermissions~~(@NonNullp0: Array&lt;String&gt;, p1: Int) requireActivity [androidJvm]@NonNullfun requireActivity(): FragmentActivity requireArguments [androidJvm]@NonNullfun requireArguments(): Bundle requireContext [androidJvm]@NonNullfun requireContext(): Context requireFragmentManager [androidJvm]@NonNullfun ~~requireFragmentManager~~(): FragmentManager requireHost [androidJvm]@NonNullfun requireHost(): Any requireParentFragment [androidJvm]@NonNullfun requireParentFragment(): Fragment requireView [androidJvm]@NonNullfun requireView(): View setAllowEnterTransitionOverlap [androidJvm]open fun setAllowEnterTransitionOverlap(p0: Boolean) setAllowReturnTransitionOverlap [androidJvm]open fun setAllowReturnTransitionOverlap(p0: Boolean) setArguments [androidJvm]open fun setArguments(@Nullablep0: Bundle?) setEnterSharedElementCallback [androidJvm]open fun setEnterSharedElementCallback(@Nullablep0: SharedElementCallback?) setEnterTransition [androidJvm]open fun setEnterTransition(@Nullablep0: Any?) setExitSharedElementCallback [androidJvm]open fun setExitSharedElementCallback(@Nullablep0: SharedElementCallback?) setExitTransition [androidJvm]open fun setExitTransition(@Nullablep0: Any?) setHasOptionsMenu [androidJvm]open fun ~~setHasOptionsMenu~~(p0: Boolean) setInitialSavedState [androidJvm]open fun setInitialSavedState(@Nullablep0: Fragment.SavedState?) setMenuVisibility [androidJvm]open fun setMenuVisibility(p0: Boolean) setReenterTransition [androidJvm]open fun setReenterTransition(@Nullablep0: Any?) setRetainInstance [androidJvm]open fun ~~setRetainInstance~~(p0: Boolean) setReturnTransition [androidJvm]open fun setReturnTransition(@Nullablep0: Any?) setSharedElementEnterTransition [androidJvm]open fun setSharedElementEnterTransition(@Nullablep0: Any?) setSharedElementReturnTransition [androidJvm]open fun setSharedElementReturnTransition(@Nullablep0: Any?) setTargetFragment [androidJvm]open fun ~~setTargetFragment~~(@Nullablep0: Fragment?, p1: Int) setUserVisibleHint [androidJvm]open fun ~~setUserVisibleHint~~(p0: Boolean) shouldShowRequestPermissionRationale [androidJvm]open fun shouldShowRequestPermissionRationale(@NonNullp0: String): Boolean startActivity [androidJvm]open fun startActivity(@NonNullp0: Intent)open fun startActivity(@NonNullp0: Intent, @Nullablep1: Bundle?) startActivityForResult [androidJvm]open fun ~~startActivityForResult~~(@NonNullp0: Intent, p1: Int)open fun ~~startActivityForResult~~(@NonNullp0: Intent, p1: Int, @Nullablep2: Bundle?) startIntentSenderForResult [androidJvm]open fun ~~startIntentSenderForResult~~(@NonNullp0: IntentSender, p1: Int, @Nullablep2: Intent?, p3: Int, p4: Int, p5: Int, @Nullablep6: Bundle?) startPostponedEnterTransition [androidJvm]open fun startPostponedEnterTransition() toString [androidJvm]@NonNullopen override fun toString(): String unregisterForContextMenu [androidJvm]open fun unregisterForContextMenu(@NonNullp0: View)"},{"location":"reference/android/app/com.bluerpc.worker/-permission-fragment/#properties","title":"Properties","text":"Name Summary defaultViewModelCreationExtras [androidJvm]@get:NonNull@get:CallSuperopen override val defaultViewModelCreationExtras: CreationExtras defaultViewModelProviderFactory [androidJvm]@get:NonNullopen override val defaultViewModelProviderFactory: ViewModelProvider.Factory lifecycle [androidJvm]@get:NonNullopen override val lifecycle: Lifecycle mPreviousWho [androidJvm]@RestrictTo(value = [RestrictTo.Scope.LIBRARY])@Nullablevar mPreviousWho: String? savedStateRegistry [androidJvm]@get:NonNulloverride val savedStateRegistry: SavedStateRegistry viewModelStore [androidJvm]@get:NonNullopen override val viewModelStore: ViewModelStore"},{"location":"reference/android/app/com.bluerpc.worker/-permission-fragment/-permission-fragment/","title":"permission fragment","text":"<p>//app/com.bluerpc.worker/PermissionFragment/PermissionFragment</p>"},{"location":"reference/android/app/com.bluerpc.worker/-permission-fragment/-permission-fragment/#permissionfragment","title":"PermissionFragment","text":"<p>[androidJvm]\\ constructor()</p>"},{"location":"reference/android/app/com.bluerpc.worker/-permission-fragment/on-create/","title":"On create","text":"<p>//app/com.bluerpc.worker/PermissionFragment/onCreate</p>"},{"location":"reference/android/app/com.bluerpc.worker/-permission-fragment/on-create/#oncreate","title":"onCreate","text":"<p>[androidJvm]\\ open override fun onCreate(savedInstanceState: Bundle?)</p> <p>Ask for bluetooth and location, if on android 6, ask for permissions</p>"},{"location":"reference/android/app/com.bluerpc.worker/-settings-activity/","title":"Index","text":"<p>//app/com.bluerpc.worker/SettingsActivity</p>"},{"location":"reference/android/app/com.bluerpc.worker/-settings-activity/#settingsactivity","title":"SettingsActivity","text":"<p>[androidJvm]\\ class SettingsActivity : AppCompatActivity</p> <p>Settings Activity Allows to configure name and port for the worker</p>"},{"location":"reference/android/app/com.bluerpc.worker/-settings-activity/#constructors","title":"Constructors","text":"SettingsActivity [androidJvm]constructor()"},{"location":"reference/android/app/com.bluerpc.worker/-settings-activity/#functions","title":"Functions","text":"Name Summary addContentView [androidJvm]open override fun addContentView(p0: View, p1: ViewGroup.LayoutParams) addMenuProvider [androidJvm]open override fun addMenuProvider(@NonNullp0: MenuProvider)open override fun addMenuProvider(@NonNullp0: MenuProvider, @NonNullp1: LifecycleOwner)open override fun addMenuProvider(@NonNullp0: MenuProvider, @NonNullp1: LifecycleOwner, @NonNullp2: Lifecycle.State) addOnConfigurationChangedListener [androidJvm]override fun addOnConfigurationChangedListener(@NonNullp0: Consumer&lt;Configuration&gt;) addOnContextAvailableListener [androidJvm]override fun addOnContextAvailableListener(@NonNulllistener: OnContextAvailableListener) addOnMultiWindowModeChangedListener [androidJvm]override fun addOnMultiWindowModeChangedListener(@NonNullp0: Consumer&lt;MultiWindowModeChangedInfo&gt;) addOnNewIntentListener [androidJvm]override fun addOnNewIntentListener(@NonNullp0: Consumer&lt;Intent&gt;) addOnPictureInPictureModeChangedListener [androidJvm]override fun addOnPictureInPictureModeChangedListener(@NonNullp0: Consumer&lt;PictureInPictureModeChangedInfo&gt;) addOnTrimMemoryListener [androidJvm]override fun addOnTrimMemoryListener(@NonNullp0: Consumer&lt;Int&gt;) applyOverrideConfiguration [androidJvm]open fun applyOverrideConfiguration(p0: Configuration) bindIsolatedService [androidJvm]open fun bindIsolatedService(p0: Intent, p1: Context.BindServiceFlags, p2: String, p3: Executor, p4: ServiceConnection): Booleanopen override fun bindIsolatedService(p0: Intent, p1: Int, p2: String, p3: Executor, p4: ServiceConnection): Boolean bindService [androidJvm]open override fun bindService(p0: Intent, p1: ServiceConnection, p2: Context.BindServiceFlags): Booleanopen override fun bindService(p0: Intent, p1: ServiceConnection, p2: Int): Booleanopen override fun bindService(p0: Intent, p1: Context.BindServiceFlags, p2: Executor, p3: ServiceConnection): Booleanopen override fun bindService(p0: Intent, p1: Int, p2: Executor, p3: ServiceConnection): Boolean bindServiceAsUser [androidJvm]open override fun bindServiceAsUser(p0: Intent, p1: ServiceConnection, p2: Context.BindServiceFlags, p3: UserHandle): Booleanopen override fun bindServiceAsUser(p0: Intent, p1: ServiceConnection, p2: Int, p3: UserHandle): Boolean checkCallingOrSelfPermission [androidJvm]open override fun checkCallingOrSelfPermission(p0: String): Int checkCallingOrSelfUriPermission [androidJvm]open override fun checkCallingOrSelfUriPermission(p0: Uri, p1: Int): Int checkCallingOrSelfUriPermissions [androidJvm]open override fun checkCallingOrSelfUriPermissions(p0: MutableList&lt;Uri&gt;, p1: Int): IntArray checkCallingPermission [androidJvm]open override fun checkCallingPermission(p0: String): Int checkCallingUriPermission [androidJvm]open override fun checkCallingUriPermission(p0: Uri, p1: Int): Int checkCallingUriPermissions [androidJvm]open override fun checkCallingUriPermissions(p0: MutableList&lt;Uri&gt;, p1: Int): IntArray checkPermission [androidJvm]open override fun checkPermission(p0: String, p1: Int, p2: Int): Int checkSelfPermission [androidJvm]open override fun checkSelfPermission(p0: String): Int checkUriPermission [androidJvm]open override fun checkUriPermission(p0: Uri, p1: Int, p2: Int, p3: Int): Intopen override fun checkUriPermission(p0: Uri?, p1: String?, p2: String?, p3: Int, p4: Int, p5: Int): Int checkUriPermissions [androidJvm]open override fun checkUriPermissions(p0: MutableList&lt;Uri&gt;, p1: Int, p2: Int, p3: Int): IntArray clearOverrideActivityTransition [androidJvm]open fun clearOverrideActivityTransition(p0: Int) clearWallpaper [androidJvm]open override fun ~~clearWallpaper~~() closeContextMenu [androidJvm]open fun closeContextMenu() closeOptionsMenu [androidJvm]open override fun closeOptionsMenu() createAttributionContext [androidJvm]open override fun createAttributionContext(p0: String?): Context createConfigurationContext [androidJvm]open override fun createConfigurationContext(p0: Configuration): Context createContext [androidJvm]open override fun createContext(p0: ContextParams): Context createContextForSplit [androidJvm]open override fun createContextForSplit(p0: String): Context createDeviceContext [androidJvm]open override fun createDeviceContext(p0: Int): Context createDeviceProtectedStorageContext [androidJvm]open override fun createDeviceProtectedStorageContext(): Context createDisplayContext [androidJvm]open override fun createDisplayContext(p0: Display): Context createPackageContext [androidJvm]open override fun createPackageContext(p0: String, p1: Int): Context createPendingResult [androidJvm]open fun createPendingResult(p0: Int, p1: Intent, p2: Int): PendingIntent createWindowContext [androidJvm]open override fun createWindowContext(p0: Int, p1: Bundle?): Contextopen override fun createWindowContext(p0: Display, p1: Int, p2: Bundle?): Context databaseList [androidJvm]open override fun databaseList(): Array&lt;String&gt; deleteDatabase [androidJvm]open override fun deleteDatabase(p0: String): Boolean deleteFile [androidJvm]open override fun deleteFile(p0: String): Boolean deleteSharedPreferences [androidJvm]open override fun deleteSharedPreferences(p0: String): Boolean dismissDialog [androidJvm]fun ~~dismissDialog~~(p0: Int) dismissKeyboardShortcutsHelper [androidJvm]fun dismissKeyboardShortcutsHelper() dispatchGenericMotionEvent [androidJvm]open override fun dispatchGenericMotionEvent(p0: MotionEvent): Boolean dispatchKeyEvent [androidJvm]open override fun dispatchKeyEvent(p0: KeyEvent): Boolean dispatchKeyShortcutEvent [androidJvm]open override fun dispatchKeyShortcutEvent(p0: KeyEvent): Boolean dispatchPopulateAccessibilityEvent [androidJvm]open override fun dispatchPopulateAccessibilityEvent(p0: AccessibilityEvent): Boolean dispatchTouchEvent [androidJvm]open override fun dispatchTouchEvent(p0: MotionEvent): Boolean dispatchTrackballEvent [androidJvm]open override fun dispatchTrackballEvent(p0: MotionEvent): Boolean dump [androidJvm]open override fun dump(@NonNullp0: String, @Nullablep1: FileDescriptor?, @NonNullp2: PrintWriter, @Nullablep3: Array&lt;String&gt;?) enforceCallingOrSelfPermission [androidJvm]open override fun enforceCallingOrSelfPermission(p0: String, p1: String?) enforceCallingOrSelfUriPermission [androidJvm]open override fun enforceCallingOrSelfUriPermission(p0: Uri, p1: Int, p2: String) enforceCallingPermission [androidJvm]open override fun enforceCallingPermission(p0: String, p1: String?) enforceCallingUriPermission [androidJvm]open override fun enforceCallingUriPermission(p0: Uri, p1: Int, p2: String) enforcePermission [androidJvm]open override fun enforcePermission(p0: String, p1: Int, p2: Int, p3: String?) enforceUriPermission [androidJvm]open override fun enforceUriPermission(p0: Uri, p1: Int, p2: Int, p3: Int, p4: String)open override fun enforceUriPermission(p0: Uri?, p1: String?, p2: String?, p3: Int, p4: Int, p5: Int, p6: String?) enterPictureInPictureMode [androidJvm]open fun ~~enterPictureInPictureMode~~()open fun enterPictureInPictureMode(p0: PictureInPictureParams): Boolean fileList [androidJvm]open override fun fileList(): Array&lt;String&gt; findViewById [androidJvm]open override fun &lt;T : View&gt; findViewById(@IdResp0: Int): T finish [androidJvm]open fun finish() finishActivity [androidJvm]open fun finishActivity(p0: Int) finishActivityFromChild [androidJvm]open fun ~~finishActivityFromChild~~(p0: Activity, p1: Int) finishAffinity [androidJvm]open fun finishAffinity() finishAfterTransition [androidJvm]open fun finishAfterTransition() finishAndRemoveTask [androidJvm]open fun finishAndRemoveTask() finishFromChild [androidJvm]open fun ~~finishFromChild~~(p0: Activity) getActionBar [androidJvm]open fun getActionBar(): ActionBar? getApplication [androidJvm]fun getApplication(): Application getApplicationContext [androidJvm]open override fun getApplicationContext(): Context getApplicationInfo [androidJvm]open override fun getApplicationInfo(): ApplicationInfo getAssets [androidJvm]open override fun getAssets(): AssetManager getAttributionSource [androidJvm]open override fun getAttributionSource(): AttributionSource getAttributionTag [androidJvm]open override fun getAttributionTag(): String? getBaseContext [androidJvm]open fun getBaseContext(): Context getCacheDir [androidJvm]open override fun getCacheDir(): File getCallingActivity [androidJvm]open fun getCallingActivity(): ComponentName? getCallingPackage [androidJvm]open fun getCallingPackage(): String? getChangingConfigurations [androidJvm]open fun getChangingConfigurations(): Int getClassLoader [androidJvm]open override fun getClassLoader(): ClassLoader getCodeCacheDir [androidJvm]open override fun getCodeCacheDir(): File getColor [androidJvm]fun getColor(p0: Int): Int getColorStateList [androidJvm]fun getColorStateList(p0: Int): ColorStateList getComponentName [androidJvm]open fun getComponentName(): ComponentName getContentResolver [androidJvm]open override fun getContentResolver(): ContentResolver getContentScene [androidJvm]open fun getContentScene(): Scene getContentTransitionManager [androidJvm]open fun getContentTransitionManager(): TransitionManager getCurrentFocus [androidJvm]open fun getCurrentFocus(): View? getDatabasePath [androidJvm]open override fun getDatabasePath(p0: String): File getDataDir [androidJvm]open override fun getDataDir(): File getDelegate [androidJvm]@NonNullopen fun getDelegate(): AppCompatDelegate getDeviceId [androidJvm]open override fun getDeviceId(): Int getDir [androidJvm]open override fun getDir(p0: String, p1: Int): File getDisplay [androidJvm]open override fun getDisplay(): Display? getDrawable [androidJvm]fun getDrawable(p0: Int): Drawable? getDrawerToggleDelegate [androidJvm]@Nullableopen override fun getDrawerToggleDelegate(): ActionBarDrawerToggle.Delegate? getExternalCacheDir [androidJvm]open override fun getExternalCacheDir(): File? getExternalCacheDirs [androidJvm]open override fun getExternalCacheDirs(): Array&lt;File&gt; getExternalFilesDir [androidJvm]open override fun getExternalFilesDir(p0: String?): File? getExternalFilesDirs [androidJvm]open override fun getExternalFilesDirs(p0: String): Array&lt;File&gt; getExternalMediaDirs [androidJvm]open override fun getExternalMediaDirs(): Array&lt;File&gt; getExtraData [androidJvm]@RestrictTo(value = [RestrictTo.Scope.LIBRARY_GROUP_PREFIX])open fun &lt;T : ComponentActivity.ExtraData&gt; ~~getExtraData~~(p0: Class&lt;T&gt;): T getFilesDir [androidJvm]open override fun getFilesDir(): File getFileStreamPath [androidJvm]open override fun getFileStreamPath(p0: String): File getFragmentManager [androidJvm]open fun ~~getFragmentManager~~(): FragmentManager getIntent [androidJvm]open fun getIntent(): Intent getLastCustomNonConfigurationInstance [androidJvm]@Nullableopen fun ~~getLastCustomNonConfigurationInstance~~(): Any? getLastNonConfigurationInstance [androidJvm]open fun getLastNonConfigurationInstance(): Any? getLaunchedFromPackage [androidJvm]open fun getLaunchedFromPackage(): String? getLaunchedFromUid [androidJvm]open fun getLaunchedFromUid(): Int getLayoutInflater [androidJvm]open fun getLayoutInflater(): LayoutInflater getLoaderManager [androidJvm]open fun ~~getLoaderManager~~(): LoaderManager getLocalClassName [androidJvm]open fun getLocalClassName(): String getMainExecutor [androidJvm]open override fun getMainExecutor(): Executor getMainLooper [androidJvm]open override fun getMainLooper(): Looper getMaxNumPictureInPictureActions [androidJvm]open fun getMaxNumPictureInPictureActions(): Int getMediaController [androidJvm]fun getMediaController(): MediaController getMenuInflater [androidJvm]@NonNullopen override fun getMenuInflater(): MenuInflater getNoBackupFilesDir [androidJvm]open override fun getNoBackupFilesDir(): File getObbDir [androidJvm]open override fun getObbDir(): File getObbDirs [androidJvm]open override fun getObbDirs(): Array&lt;File&gt; getOnBackInvokedDispatcher [androidJvm]open fun getOnBackInvokedDispatcher(): OnBackInvokedDispatcher getOpPackageName [androidJvm]open override fun getOpPackageName(): String getPackageCodePath [androidJvm]open override fun getPackageCodePath(): String getPackageManager [androidJvm]open override fun getPackageManager(): PackageManager getPackageName [androidJvm]open override fun getPackageName(): String getPackageResourcePath [androidJvm]open override fun getPackageResourcePath(): String getParams [androidJvm]open override fun getParams(): ContextParams? getParent [androidJvm]fun getParent(): Activity getParentActivityIntent [androidJvm]open fun getParentActivityIntent(): Intent? getPreferences [androidJvm]open fun getPreferences(p0: Int): SharedPreferences getReferrer [androidJvm]open fun getReferrer(): Uri? getRequestedOrientation [androidJvm]open fun getRequestedOrientation(): Int getResources [androidJvm]open override fun getResources(): Resources getSearchEvent [androidJvm]fun getSearchEvent(): SearchEvent getSharedPreferences [androidJvm]open override fun getSharedPreferences(p0: String, p1: Int): SharedPreferences getSplashScreen [androidJvm]fun getSplashScreen(): SplashScreen getString [androidJvm]fun getString(p0: Int): Stringfun getString(p0: Int, vararg p1: Any): String getSupportActionBar [androidJvm]@Nullableopen fun getSupportActionBar(): ActionBar? getSupportFragmentManager [androidJvm]@NonNullopen fun getSupportFragmentManager(): FragmentManager getSupportLoaderManager [androidJvm]@NonNullopen fun ~~getSupportLoaderManager~~(): LoaderManager getSupportParentActivityIntent [androidJvm]@Nullableopen override fun getSupportParentActivityIntent(): Intent? getSystemService [androidJvm]open override fun getSystemService(p0: String): Anyfun &lt;T : Any&gt; getSystemService(p0: Class&lt;T&gt;): T getSystemServiceName [androidJvm]open override fun getSystemServiceName(p0: Class&lt;*&gt;): String? getTaskId [androidJvm]open fun getTaskId(): Int getText [androidJvm]fun getText(p0: Int): CharSequence getTheme [androidJvm]open override fun getTheme(): Resources.Theme getTitle [androidJvm]fun getTitle(): CharSequence getTitleColor [androidJvm]fun getTitleColor(): Int getVoiceInteractor [androidJvm]open fun getVoiceInteractor(): VoiceInteractor getVolumeControlStream [androidJvm]fun getVolumeControlStream(): Int getWallpaper [androidJvm]open override fun ~~getWallpaper~~(): Drawable getWallpaperDesiredMinimumHeight [androidJvm]open override fun ~~getWallpaperDesiredMinimumHeight~~(): Int getWallpaperDesiredMinimumWidth [androidJvm]open override fun ~~getWallpaperDesiredMinimumWidth~~(): Int getWindow [androidJvm]open fun getWindow(): Window getWindowManager [androidJvm]open fun getWindowManager(): WindowManager grantUriPermission [androidJvm]open override fun grantUriPermission(p0: String, p1: Uri, p2: Int) hasWindowFocus [androidJvm]open fun hasWindowFocus(): Boolean invalidateMenu [androidJvm]open override fun invalidateMenu() invalidateOptionsMenu [androidJvm]open override fun invalidateOptionsMenu() isActivityTransitionRunning [androidJvm]open fun isActivityTransitionRunning(): Boolean isChangingConfigurations [androidJvm]open fun isChangingConfigurations(): Boolean isChild [androidJvm]fun isChild(): Boolean isDestroyed [androidJvm]open fun isDestroyed(): Boolean isDeviceProtectedStorage [androidJvm]open override fun isDeviceProtectedStorage(): Boolean isFinishing [androidJvm]open fun isFinishing(): Boolean isImmersive [androidJvm]open fun isImmersive(): Boolean isInMultiWindowMode [androidJvm]open fun isInMultiWindowMode(): Boolean isInPictureInPictureMode [androidJvm]open fun isInPictureInPictureMode(): Boolean isLaunchedFromBubble [androidJvm]open fun isLaunchedFromBubble(): Boolean isLocalVoiceInteractionSupported [androidJvm]open fun isLocalVoiceInteractionSupported(): Boolean isRestricted [androidJvm]open override fun isRestricted(): Boolean isTaskRoot [androidJvm]open fun isTaskRoot(): Boolean isUiContext [androidJvm]open override fun isUiContext(): Boolean isVoiceInteraction [androidJvm]open fun isVoiceInteraction(): Boolean isVoiceInteractionRoot [androidJvm]open fun isVoiceInteractionRoot(): Boolean managedQuery [androidJvm]fun ~~managedQuery~~(p0: Uri, p1: Array&lt;String&gt;, p2: String, p3: Array&lt;String&gt;, p4: String): Cursor moveDatabaseFrom [androidJvm]open override fun moveDatabaseFrom(p0: Context, p1: String): Boolean moveSharedPreferencesFrom [androidJvm]open override fun moveSharedPreferencesFrom(p0: Context, p1: String): Boolean moveTaskToBack [androidJvm]open fun moveTaskToBack(p0: Boolean): Boolean navigateUpTo [androidJvm]open fun navigateUpTo(p0: Intent): Boolean navigateUpToFromChild [androidJvm]open fun ~~navigateUpToFromChild~~(p0: Activity, p1: Intent): Boolean obtainStyledAttributes [androidJvm]fun obtainStyledAttributes(p0: IntArray): TypedArrayfun obtainStyledAttributes(p0: AttributeSet?, p1: IntArray): TypedArrayfun obtainStyledAttributes(p0: Int, p1: IntArray): TypedArrayfun obtainStyledAttributes(p0: AttributeSet?, p1: IntArray, p2: Int, p3: Int): TypedArray onActionModeFinished [androidJvm]open override fun onActionModeFinished(p0: ActionMode) onActionModeStarted [androidJvm]open override fun onActionModeStarted(p0: ActionMode) onActivityReenter [androidJvm]open fun onActivityReenter(p0: Int, p1: Intent) onAttachedToWindow [androidJvm]open override fun onAttachedToWindow() onAttachFragment [androidJvm]open fun ~~onAttachFragment~~(p0: Fragment)@MainThreadopen fun ~~onAttachFragment~~(@NonNullp0: Fragment) onBackPressed [androidJvm]@MainThreadopen override fun onBackPressed() onConfigurationChanged [androidJvm]open override fun onConfigurationChanged(@NonNullp0: Configuration) onContentChanged [androidJvm]open override fun onContentChanged() onContextItemSelected [androidJvm]open fun onContextItemSelected(p0: MenuItem): Boolean onContextMenuClosed [androidJvm]open fun onContextMenuClosed(p0: Menu) onCreate [androidJvm]open fun onCreate(p0: Bundle?, p1: PersistableBundle?) onCreateContextMenu [androidJvm]open override fun onCreateContextMenu(p0: ContextMenu, p1: View, p2: ContextMenu.ContextMenuInfo) onCreateDescription [androidJvm]open fun onCreateDescription(): CharSequence? onCreateNavigateUpTaskStack [androidJvm]open fun onCreateNavigateUpTaskStack(p0: TaskStackBuilder) onCreateOptionsMenu [androidJvm]open fun onCreateOptionsMenu(p0: Menu): Boolean onCreatePanelMenu [androidJvm]open override fun onCreatePanelMenu(p0: Int, @NonNullp1: Menu): Boolean onCreatePanelView [androidJvm]open override fun onCreatePanelView(p0: Int): View? onCreateSupportNavigateUpTaskStack [androidJvm]open fun onCreateSupportNavigateUpTaskStack(@NonNullp0: TaskStackBuilder) onCreateThumbnail [androidJvm]open fun ~~onCreateThumbnail~~(p0: Bitmap, p1: Canvas): Boolean onCreateView [androidJvm]@Nullableopen override fun onCreateView(@NonNullp0: String, @NonNullp1: Context, @NonNullp2: AttributeSet): View?@Nullableopen override fun onCreateView(@Nullablep0: View?, @NonNullp1: String, @NonNullp2: Context, @NonNullp3: AttributeSet): View? onDetachedFromWindow [androidJvm]open override fun onDetachedFromWindow() onEnterAnimationComplete [androidJvm]open fun onEnterAnimationComplete() onGenericMotionEvent [androidJvm]open fun onGenericMotionEvent(p0: MotionEvent): Boolean onGetDirectActions [androidJvm]open fun onGetDirectActions(p0: CancellationSignal, p1: Consumer&lt;MutableList&lt;DirectAction&gt;&gt;) onKeyDown [androidJvm]open override fun onKeyDown(p0: Int, p1: KeyEvent): Boolean onKeyLongPress [androidJvm]open override fun onKeyLongPress(p0: Int, p1: KeyEvent): Boolean onKeyMultiple [androidJvm]open override fun onKeyMultiple(p0: Int, p1: Int, p2: KeyEvent): Boolean onKeyShortcut [androidJvm]open fun onKeyShortcut(p0: Int, p1: KeyEvent): Boolean onKeyUp [androidJvm]open override fun onKeyUp(p0: Int, p1: KeyEvent): Boolean onLocalVoiceInteractionStarted [androidJvm]open fun onLocalVoiceInteractionStarted() onLocalVoiceInteractionStopped [androidJvm]open fun onLocalVoiceInteractionStopped() onLowMemory [androidJvm]open override fun onLowMemory() onMenuItemSelected [androidJvm]override fun onMenuItemSelected(p0: Int, @NonNullp1: MenuItem): Boolean onMenuOpened [androidJvm]open override fun onMenuOpened(p0: Int, p1: Menu): Boolean onMultiWindowModeChanged [androidJvm]@CallSuperopen override fun onMultiWindowModeChanged(p0: Boolean)@RequiresApi(api = 26)@CallSuperopen override fun onMultiWindowModeChanged(p0: Boolean, @NonNullp1: Configuration) onNavigateUp [androidJvm]open fun onNavigateUp(): Boolean onNavigateUpFromChild [androidJvm]open fun ~~onNavigateUpFromChild~~(p0: Activity): Boolean onOptionsItemSelected [androidJvm]open fun onOptionsItemSelected(p0: MenuItem): Boolean onOptionsMenuClosed [androidJvm]open fun onOptionsMenuClosed(p0: Menu) onPanelClosed [androidJvm]open override fun onPanelClosed(p0: Int, @NonNullp1: Menu) onPerformDirectAction [androidJvm]open fun onPerformDirectAction(p0: String, p1: Bundle, p2: CancellationSignal, p3: Consumer&lt;Bundle&gt;) onPictureInPictureModeChanged [androidJvm]@CallSuperopen override fun onPictureInPictureModeChanged(p0: Boolean)@RequiresApi(api = 26)@CallSuperopen override fun onPictureInPictureModeChanged(p0: Boolean, @NonNullp1: Configuration) onPictureInPictureRequested [androidJvm]open fun onPictureInPictureRequested(): Boolean onPictureInPictureUiStateChanged [androidJvm]open fun onPictureInPictureUiStateChanged(p0: PictureInPictureUiState) onPointerCaptureChanged [androidJvm]open fun onPointerCaptureChanged(p0: Boolean) onPostCreate [androidJvm]open fun onPostCreate(p0: Bundle?, p1: PersistableBundle?) onPrepareNavigateUpTaskStack [androidJvm]open fun onPrepareNavigateUpTaskStack(p0: TaskStackBuilder) onPrepareOptionsMenu [androidJvm]open fun onPrepareOptionsMenu(p0: Menu): Boolean onPreparePanel [androidJvm]open override fun onPreparePanel(p0: Int, @Nullablep1: View?, @NonNullp2: Menu): Boolean onPrepareSupportNavigateUpTaskStack [androidJvm]open fun onPrepareSupportNavigateUpTaskStack(@NonNullp0: TaskStackBuilder) onProvideAssistContent [androidJvm]open fun onProvideAssistContent(p0: AssistContent) onProvideAssistData [androidJvm]open fun onProvideAssistData(p0: Bundle) onProvideKeyboardShortcuts [androidJvm]open override fun onProvideKeyboardShortcuts(p0: MutableList&lt;KeyboardShortcutGroup&gt;, p1: Menu?, p2: Int) onProvideReferrer [androidJvm]open fun onProvideReferrer(): Uri onRequestPermissionsResult [androidJvm]@CallSuperopen override fun onRequestPermissionsResult(p0: Int, @NonNullp1: Array&lt;String&gt;, @NonNullp2: IntArray) onRestoreInstanceState [androidJvm]open fun onRestoreInstanceState(p0: Bundle?, p1: PersistableBundle?) onRetainCustomNonConfigurationInstance [androidJvm]@Nullableopen fun ~~onRetainCustomNonConfigurationInstance~~(): Any? onRetainNonConfigurationInstance [androidJvm]@Nullableoverride fun onRetainNonConfigurationInstance(): Any? onSaveInstanceState [androidJvm]open fun onSaveInstanceState(p0: Bundle, p1: PersistableBundle) onSearchRequested [androidJvm]open override fun onSearchRequested(): Booleanopen override fun onSearchRequested(p0: SearchEvent?): Boolean onStateNotSaved [androidJvm]open override fun onStateNotSaved() onSupportActionModeFinished [androidJvm]@CallSuperopen override fun onSupportActionModeFinished(@NonNullp0: ActionMode) onSupportActionModeStarted [androidJvm]@CallSuperopen override fun onSupportActionModeStarted(@NonNullp0: ActionMode) onSupportContentChanged [androidJvm]open fun ~~onSupportContentChanged~~() onSupportNavigateUp [androidJvm]open fun onSupportNavigateUp(): Boolean onTopResumedActivityChanged [androidJvm]open fun onTopResumedActivityChanged(p0: Boolean) onTouchEvent [androidJvm]open fun onTouchEvent(p0: MotionEvent): Boolean onTrackballEvent [androidJvm]open fun onTrackballEvent(p0: MotionEvent): Boolean onTrimMemory [androidJvm]@CallSuperopen override fun onTrimMemory(p0: Int) onUserInteraction [androidJvm]open fun onUserInteraction() onVisibleBehindCanceled [androidJvm]open fun ~~onVisibleBehindCanceled~~() onWindowAttributesChanged [androidJvm]open override fun onWindowAttributesChanged(p0: WindowManager.LayoutParams) onWindowFocusChanged [androidJvm]open override fun onWindowFocusChanged(p0: Boolean) onWindowStartingActionMode [androidJvm]open override fun onWindowStartingActionMode(p0: ActionMode.Callback): ActionMode?open override fun onWindowStartingActionMode(p0: ActionMode.Callback, p1: Int): ActionMode? onWindowStartingSupportActionMode [androidJvm]@Nullableopen override fun onWindowStartingSupportActionMode(@NonNullp0: ActionMode.Callback): ActionMode? openContextMenu [androidJvm]open fun openContextMenu(p0: View) openFileInput [androidJvm]open override fun openFileInput(p0: String): FileInputStream openFileOutput [androidJvm]open override fun openFileOutput(p0: String, p1: Int): FileOutputStream openOptionsMenu [androidJvm]open override fun openOptionsMenu() openOrCreateDatabase [androidJvm]open override fun openOrCreateDatabase(p0: String, p1: Int, p2: SQLiteDatabase.CursorFactory): SQLiteDatabaseopen override fun openOrCreateDatabase(p0: String, p1: Int, p2: SQLiteDatabase.CursorFactory, p3: DatabaseErrorHandler?): SQLiteDatabase overrideActivityTransition [androidJvm]open fun overrideActivityTransition(p0: Int, p1: Int, p2: Int)open fun overrideActivityTransition(p0: Int, p1: Int, p2: Int, p3: Int) overridePendingTransition [androidJvm]open fun ~~overridePendingTransition~~(p0: Int, p1: Int)open fun ~~overridePendingTransition~~(p0: Int, p1: Int, p2: Int) peekAvailableContext [androidJvm]@Nullableopen override fun peekAvailableContext(): Context? peekWallpaper [androidJvm]open override fun ~~peekWallpaper~~(): Drawable postponeEnterTransition [androidJvm]open fun postponeEnterTransition() putExtraData [androidJvm]@RestrictTo(value = [RestrictTo.Scope.LIBRARY_GROUP_PREFIX])open fun ~~putExtraData~~(p0: ComponentActivity.ExtraData) recreate [androidJvm]open fun recreate() registerActivityLifecycleCallbacks [androidJvm]open fun registerActivityLifecycleCallbacks(p0: Application.ActivityLifecycleCallbacks) registerComponentCallbacks [androidJvm]open override fun registerComponentCallbacks(p0: ComponentCallbacks) registerDeviceIdChangeListener [androidJvm]open override fun registerDeviceIdChangeListener(p0: Executor, p1: IntConsumer) registerForActivityResult [androidJvm]@NonNulloverride fun &lt;I : Any, O : Any&gt; registerForActivityResult(@NonNullp0: ActivityResultContract&lt;I, O&gt;, @NonNullp1: ActivityResultCallback&lt;O&gt;): ActivityResultLauncher&lt;I&gt;@NonNulloverride fun &lt;I : Any, O : Any&gt; registerForActivityResult(@NonNullp0: ActivityResultContract&lt;I, O&gt;, @NonNullp1: ActivityResultRegistry, @NonNullp2: ActivityResultCallback&lt;O&gt;): ActivityResultLauncher&lt;I&gt; registerForContextMenu [androidJvm]open fun registerForContextMenu(p0: View) registerReceiver [androidJvm]open override fun registerReceiver(p0: BroadcastReceiver?, p1: IntentFilter): Intent?open override fun registerReceiver(p0: BroadcastReceiver?, p1: IntentFilter, p2: Int): Intent?open override fun registerReceiver(p0: BroadcastReceiver?, p1: IntentFilter, p2: String?, p3: Handler?): Intent?open override fun registerReceiver(p0: BroadcastReceiver?, p1: IntentFilter, p2: String?, p3: Handler?, p4: Int): Intent? registerScreenCaptureCallback [androidJvm]open fun registerScreenCaptureCallback(p0: Executor, p1: Activity.ScreenCaptureCallback) releaseInstance [androidJvm]open fun releaseInstance(): Boolean removeDialog [androidJvm]fun ~~removeDialog~~(p0: Int) removeMenuProvider [androidJvm]open override fun removeMenuProvider(@NonNullp0: MenuProvider) removeOnConfigurationChangedListener [androidJvm]override fun removeOnConfigurationChangedListener(@NonNullp0: Consumer&lt;Configuration&gt;) removeOnContextAvailableListener [androidJvm]override fun removeOnContextAvailableListener(@NonNulllistener: OnContextAvailableListener) removeOnMultiWindowModeChangedListener [androidJvm]override fun removeOnMultiWindowModeChangedListener(@NonNullp0: Consumer&lt;MultiWindowModeChangedInfo&gt;) removeOnNewIntentListener [androidJvm]override fun removeOnNewIntentListener(@NonNullp0: Consumer&lt;Intent&gt;) removeOnPictureInPictureModeChangedListener [androidJvm]override fun removeOnPictureInPictureModeChangedListener(@NonNullp0: Consumer&lt;PictureInPictureModeChangedInfo&gt;) removeOnTrimMemoryListener [androidJvm]override fun removeOnTrimMemoryListener(@NonNullp0: Consumer&lt;Int&gt;) removeStickyBroadcast [androidJvm]open override fun ~~removeStickyBroadcast~~(p0: Intent) removeStickyBroadcastAsUser [androidJvm]open override fun ~~removeStickyBroadcastAsUser~~(p0: Intent, p1: UserHandle) reportFullyDrawn [androidJvm]open override fun reportFullyDrawn() requestDragAndDropPermissions [androidJvm]open fun requestDragAndDropPermissions(p0: DragEvent): DragAndDropPermissions requestFullscreenMode [androidJvm]open fun requestFullscreenMode(p0: Int, p1: OutcomeReceiver&lt;Void, Throwable&gt;?) requestPermissions [androidJvm]fun requestPermissions(p0: Array&lt;String&gt;, p1: Int) requestShowKeyboardShortcuts [androidJvm]fun requestShowKeyboardShortcuts() requestVisibleBehind [androidJvm]open fun ~~requestVisibleBehind~~(p0: Boolean): Boolean requestWindowFeature [androidJvm]fun requestWindowFeature(p0: Int): Boolean requireViewById [androidJvm]fun &lt;T : View&gt; requireViewById(p0: Int): T revokeSelfPermissionOnKill [androidJvm]open fun revokeSelfPermissionOnKill(p0: String) revokeSelfPermissionsOnKill [androidJvm]open override fun revokeSelfPermissionsOnKill(p0: MutableCollection&lt;String&gt;) revokeUriPermission [androidJvm]open override fun revokeUriPermission(p0: Uri, p1: Int)open override fun revokeUriPermission(p0: String, p1: Uri, p2: Int) runOnUiThread [androidJvm]fun runOnUiThread(p0: Runnable) sendBroadcast [androidJvm]open override fun sendBroadcast(p0: Intent)open override fun sendBroadcast(p0: Intent, p1: String?)open override fun sendBroadcast(p0: Intent, p1: String?, p2: Bundle?) sendBroadcastAsUser [androidJvm]open override fun sendBroadcastAsUser(p0: Intent, p1: UserHandle)open override fun sendBroadcastAsUser(p0: Intent, p1: UserHandle, p2: String?) sendBroadcastWithMultiplePermissions [androidJvm]open fun sendBroadcastWithMultiplePermissions(p0: Intent, p1: Array&lt;String&gt;) sendOrderedBroadcast [androidJvm]open override fun sendOrderedBroadcast(p0: Intent, p1: String?)open override fun sendOrderedBroadcast(p0: Intent, p1: String?, p2: Bundle?)open override fun sendOrderedBroadcast(p0: Intent, p1: String?, p2: BroadcastReceiver?, p3: Handler?, p4: Int, p5: String?, p6: Bundle?)open override fun sendOrderedBroadcast(p0: Intent, p1: String?, p2: Bundle?, p3: BroadcastReceiver?, p4: Handler?, p5: Int, p6: String?, p7: Bundle?)open override fun sendOrderedBroadcast(p0: Intent, p1: String?, p2: String?, p3: BroadcastReceiver?, p4: Handler?, p5: Int, p6: String?, p7: Bundle?)open fun sendOrderedBroadcast(p0: Intent, p1: Int, p2: String?, p3: String?, p4: BroadcastReceiver?, p5: Handler?, p6: String?, p7: Bundle?, p8: Bundle?) sendOrderedBroadcastAsUser [androidJvm]open override fun sendOrderedBroadcastAsUser(p0: Intent, p1: UserHandle, p2: String?, p3: BroadcastReceiver?, p4: Handler?, p5: Int, p6: String?, p7: Bundle?) sendStickyBroadcast [androidJvm]open override fun ~~sendStickyBroadcast~~(p0: Intent)open override fun ~~sendStickyBroadcast~~(p0: Intent, p1: Bundle?) sendStickyBroadcastAsUser [androidJvm]open override fun ~~sendStickyBroadcastAsUser~~(p0: Intent, p1: UserHandle) sendStickyOrderedBroadcast [androidJvm]open override fun ~~sendStickyOrderedBroadcast~~(p0: Intent, p1: BroadcastReceiver?, p2: Handler?, p3: Int, p4: String?, p5: Bundle?) sendStickyOrderedBroadcastAsUser [androidJvm]open override fun ~~sendStickyOrderedBroadcastAsUser~~(p0: Intent, p1: UserHandle, p2: BroadcastReceiver?, p3: Handler?, p4: Int, p5: String?, p6: Bundle?) setActionBar [androidJvm]open fun setActionBar(p0: Toolbar?) setContentTransitionManager [androidJvm]open fun setContentTransitionManager(p0: TransitionManager) setContentView [androidJvm]open override fun setContentView(p0: View)open override fun setContentView(@LayoutResp0: Int)open override fun setContentView(p0: View, p1: ViewGroup.LayoutParams) setDefaultKeyMode [androidJvm]fun setDefaultKeyMode(p0: Int) setEnterSharedElementCallback [androidJvm]open fun setEnterSharedElementCallback(p0: SharedElementCallback)open fun setEnterSharedElementCallback(@Nullablep0: SharedElementCallback?) setExitSharedElementCallback [androidJvm]open fun setExitSharedElementCallback(p0: SharedElementCallback)open fun setExitSharedElementCallback(@Nullablep0: SharedElementCallback?) setFeatureDrawable [androidJvm]fun setFeatureDrawable(p0: Int, p1: Drawable) setFeatureDrawableAlpha [androidJvm]fun setFeatureDrawableAlpha(p0: Int, p1: Int) setFeatureDrawableResource [androidJvm]fun setFeatureDrawableResource(p0: Int, p1: Int) setFeatureDrawableUri [androidJvm]fun setFeatureDrawableUri(p0: Int, p1: Uri) setFinishOnTouchOutside [androidJvm]open fun setFinishOnTouchOutside(p0: Boolean) setImmersive [androidJvm]open fun setImmersive(p0: Boolean) setInheritShowWhenLocked [androidJvm]open fun setInheritShowWhenLocked(p0: Boolean) setIntent [androidJvm]open fun setIntent(p0: Intent) setLocusContext [androidJvm]open fun setLocusContext(p0: LocusId?, p1: Bundle?) setMediaController [androidJvm]fun setMediaController(p0: MediaController) setPictureInPictureParams [androidJvm]open fun setPictureInPictureParams(p0: PictureInPictureParams) setProgress [androidJvm]fun ~~setProgress~~(p0: Int) setProgressBarIndeterminate [androidJvm]fun ~~setProgressBarIndeterminate~~(p0: Boolean) setProgressBarIndeterminateVisibility [androidJvm]fun ~~setProgressBarIndeterminateVisibility~~(p0: Boolean) setProgressBarVisibility [androidJvm]fun ~~setProgressBarVisibility~~(p0: Boolean) setRecentsScreenshotEnabled [androidJvm]open fun setRecentsScreenshotEnabled(p0: Boolean) setRequestedOrientation [androidJvm]open fun setRequestedOrientation(p0: Int) setResult [androidJvm]fun setResult(p0: Int)fun setResult(p0: Int, p1: Intent) setSecondaryProgress [androidJvm]fun ~~setSecondaryProgress~~(p0: Int) setShouldDockBigOverlays [androidJvm]open fun setShouldDockBigOverlays(p0: Boolean) setShowWhenLocked [androidJvm]open fun setShowWhenLocked(p0: Boolean) setSupportActionBar [androidJvm]open fun setSupportActionBar(@Nullablep0: Toolbar?) setSupportProgress [androidJvm]open fun ~~setSupportProgress~~(p0: Int) setSupportProgressBarIndeterminate [androidJvm]open fun ~~setSupportProgressBarIndeterminate~~(p0: Boolean) setSupportProgressBarIndeterminateVisibility [androidJvm]open fun ~~setSupportProgressBarIndeterminateVisibility~~(p0: Boolean) setSupportProgressBarVisibility [androidJvm]open fun ~~setSupportProgressBarVisibility~~(p0: Boolean) setTaskDescription [androidJvm]open fun setTaskDescription(p0: ActivityManager.TaskDescription) setTheme [androidJvm]open fun setTheme(p0: Resources.Theme?)open override fun setTheme(@StyleResp0: Int) setTitle [androidJvm]open fun setTitle(p0: CharSequence)open fun setTitle(p0: Int) setTitleColor [androidJvm]open fun ~~setTitleColor~~(p0: Int) setTranslucent [androidJvm]open fun setTranslucent(p0: Boolean): Boolean setTurnScreenOn [androidJvm]open fun setTurnScreenOn(p0: Boolean) setVisible [androidJvm]open fun setVisible(p0: Boolean) setVolumeControlStream [androidJvm]fun setVolumeControlStream(p0: Int) setVrModeEnabled [androidJvm]open fun setVrModeEnabled(p0: Boolean, p1: ComponentName) setWallpaper [androidJvm]open override fun ~~setWallpaper~~(p0: Bitmap)open override fun ~~setWallpaper~~(p0: InputStream) shouldDockBigOverlays [androidJvm]open fun shouldDockBigOverlays(): Boolean shouldShowRequestPermissionRationale [androidJvm]open fun shouldShowRequestPermissionRationale(p0: String): Boolean shouldUpRecreateTask [androidJvm]open fun shouldUpRecreateTask(p0: Intent): Boolean showAssist [androidJvm]open fun showAssist(p0: Bundle): Boolean showDialog [androidJvm]fun ~~showDialog~~(p0: Int)fun ~~showDialog~~(p0: Int, p1: Bundle): Boolean showLockTaskEscapeMessage [androidJvm]open fun showLockTaskEscapeMessage() startActionMode [androidJvm]open fun startActionMode(p0: ActionMode.Callback): ActionMode?open fun startActionMode(p0: ActionMode.Callback, p1: Int): ActionMode? startActivities [androidJvm]open override fun startActivities(p0: Array&lt;Intent&gt;)open override fun startActivities(p0: Array&lt;Intent&gt;, p1: Bundle?) startActivity [androidJvm]open override fun startActivity(p0: Intent)open override fun startActivity(p0: Intent, p1: Bundle?) startActivityForResult [androidJvm]open override fun ~~startActivityForResult~~(@NonNullp0: Intent, p1: Int)open override fun ~~startActivityForResult~~(@NonNullp0: Intent, p1: Int, @Nullablep2: Bundle?) startActivityFromChild [androidJvm]open fun ~~startActivityFromChild~~(p0: Activity, p1: Intent, p2: Int)open fun ~~startActivityFromChild~~(p0: Activity, p1: Intent, p2: Int, p3: Bundle?) startActivityFromFragment [androidJvm]open fun ~~startActivityFromFragment~~(p0: Fragment, p1: Intent, p2: Int)open fun ~~startActivityFromFragment~~(p0: Fragment, p1: Intent, p2: Int, p3: Bundle?)open fun startActivityFromFragment(@NonNullp0: Fragment, @NonNullp1: Intent, p2: Int)open fun startActivityFromFragment(@NonNullp0: Fragment, @NonNullp1: Intent, p2: Int, @Nullablep3: Bundle?) startActivityIfNeeded [androidJvm]open fun startActivityIfNeeded(p0: Intent, p1: Int): Booleanopen fun startActivityIfNeeded(p0: Intent, p1: Int, p2: Bundle?): Boolean startForegroundService [androidJvm]open override fun startForegroundService(p0: Intent): ComponentName? startInstrumentation [androidJvm]open override fun startInstrumentation(p0: ComponentName, p1: String?, p2: Bundle?): Boolean startIntentSender [androidJvm]open override fun startIntentSender(p0: IntentSender, p1: Intent?, p2: Int, p3: Int, p4: Int)open override fun startIntentSender(p0: IntentSender, p1: Intent?, p2: Int, p3: Int, p4: Int, p5: Bundle?) startIntentSenderForResult [androidJvm]open override fun ~~startIntentSenderForResult~~(@NonNullp0: IntentSender, p1: Int, @Nullablep2: Intent?, p3: Int, p4: Int, p5: Int)open override fun ~~startIntentSenderForResult~~(@NonNullp0: IntentSender, p1: Int, @Nullablep2: Intent?, p3: Int, p4: Int, p5: Int, @Nullablep6: Bundle?) startIntentSenderFromChild [androidJvm]open fun ~~startIntentSenderFromChild~~(p0: Activity, p1: IntentSender, p2: Int, p3: Intent, p4: Int, p5: Int, p6: Int)open fun ~~startIntentSenderFromChild~~(p0: Activity, p1: IntentSender, p2: Int, p3: Intent, p4: Int, p5: Int, p6: Int, p7: Bundle?) startIntentSenderFromFragment [androidJvm]open fun ~~startIntentSenderFromFragment~~(@NonNullp0: Fragment, @NonNullp1: IntentSender, p2: Int, @Nullablep3: Intent?, p4: Int, p5: Int, p6: Int, @Nullablep7: Bundle?) startLocalVoiceInteraction [androidJvm]open fun startLocalVoiceInteraction(p0: Bundle) startLockTask [androidJvm]open fun startLockTask() startManagingCursor [androidJvm]open fun ~~startManagingCursor~~(p0: Cursor) startNextMatchingActivity [androidJvm]open fun startNextMatchingActivity(p0: Intent): Booleanopen fun startNextMatchingActivity(p0: Intent, p1: Bundle?): Boolean startPostponedEnterTransition [androidJvm]open fun startPostponedEnterTransition() startSearch [androidJvm]open fun startSearch(p0: String?, p1: Boolean, p2: Bundle?, p3: Boolean) startService [androidJvm]open override fun startService(p0: Intent): ComponentName? startSupportActionMode [androidJvm]@Nullableopen fun startSupportActionMode(@NonNullp0: ActionMode.Callback): ActionMode? stopLocalVoiceInteraction [androidJvm]open fun stopLocalVoiceInteraction() stopLockTask [androidJvm]open fun stopLockTask() stopManagingCursor [androidJvm]open fun ~~stopManagingCursor~~(p0: Cursor) stopService [androidJvm]open override fun stopService(p0: Intent): Boolean superDispatchKeyEvent [androidJvm]@RestrictTo(value = [RestrictTo.Scope.LIBRARY_GROUP_PREFIX])open override fun superDispatchKeyEvent(@NonNullp0: KeyEvent): Boolean supportFinishAfterTransition [androidJvm]open fun supportFinishAfterTransition() supportInvalidateOptionsMenu [androidJvm]open override fun supportInvalidateOptionsMenu() supportNavigateUpTo [androidJvm]open fun supportNavigateUpTo(@NonNullp0: Intent) supportPostponeEnterTransition [androidJvm]open fun supportPostponeEnterTransition() supportRequestWindowFeature [androidJvm]open fun supportRequestWindowFeature(p0: Int): Boolean supportShouldUpRecreateTask [androidJvm]open fun supportShouldUpRecreateTask(@NonNullp0: Intent): Boolean supportStartPostponedEnterTransition [androidJvm]open fun supportStartPostponedEnterTransition() takeKeyEvents [androidJvm]open fun takeKeyEvents(p0: Boolean) triggerSearch [androidJvm]open fun triggerSearch(p0: String, p1: Bundle?) unbindService [androidJvm]open override fun unbindService(p0: ServiceConnection) unregisterActivityLifecycleCallbacks [androidJvm]open fun unregisterActivityLifecycleCallbacks(p0: Application.ActivityLifecycleCallbacks) unregisterComponentCallbacks [androidJvm]open override fun unregisterComponentCallbacks(p0: ComponentCallbacks) unregisterDeviceIdChangeListener [androidJvm]open override fun unregisterDeviceIdChangeListener(p0: IntConsumer) unregisterForContextMenu [androidJvm]open fun unregisterForContextMenu(p0: View) unregisterReceiver [androidJvm]open override fun unregisterReceiver(p0: BroadcastReceiver) unregisterScreenCaptureCallback [androidJvm]open fun unregisterScreenCaptureCallback(p0: Activity.ScreenCaptureCallback) updateServiceGroup [androidJvm]open override fun updateServiceGroup(p0: ServiceConnection, p1: Int, p2: Int) validateRequestPermissionsRequestCode [androidJvm]override fun ~~validateRequestPermissionsRequestCode~~(p0: Int)"},{"location":"reference/android/app/com.bluerpc.worker/-settings-activity/#properties","title":"Properties","text":"Name Summary activityResultRegistry [androidJvm]@get:NonNulloverride val activityResultRegistry: ActivityResultRegistry defaultViewModelCreationExtras [androidJvm]@get:NonNull@get:CallSuperopen override val defaultViewModelCreationExtras: CreationExtras defaultViewModelProviderFactory [androidJvm]@get:NonNullopen override val defaultViewModelProviderFactory: ViewModelProvider.Factory fullyDrawnReporter [androidJvm]@get:NonNullopen override val fullyDrawnReporter: FullyDrawnReporter lifecycle [androidJvm]@get:NonNullopen override val lifecycle: Lifecycle onBackPressedDispatcher [androidJvm]@get:NonNulloverride val onBackPressedDispatcher: OnBackPressedDispatcher savedStateRegistry [androidJvm]@get:NonNulloverride val savedStateRegistry: SavedStateRegistry viewModelStore [androidJvm]@get:NonNullopen override val viewModelStore: ViewModelStore"},{"location":"reference/android/app/com.bluerpc.worker/-settings-activity/-settings-activity/","title":"settings activity","text":"<p>//app/com.bluerpc.worker/SettingsActivity/SettingsActivity</p>"},{"location":"reference/android/app/com.bluerpc.worker/-settings-activity/-settings-activity/#settingsactivity","title":"SettingsActivity","text":"<p>[androidJvm]\\ constructor()</p>"},{"location":"reference/client/bluerpc_client.bleak/","title":"Bluerpc client.bleak","text":""},{"location":"reference/client/bluerpc_client.bleak/#module-bluerpc_clientbleak","title":"module <code>bluerpc_client.bleak</code>","text":""},{"location":"reference/client/bluerpc_client.bleak/#global-variables","title":"Global Variables","text":"<ul> <li>DEFAULT_MTU</li> <li>CONNECT_FREE_SLOT_TIMEOUT</li> <li>WAIT_SLOT_INTERVAL</li> </ul>"},{"location":"reference/client/bluerpc_client.bleak/#function-grpc_error_as_bleak_error","title":"function <code>grpc_error_as_bleak_error</code>","text":"<pre><code>grpc_error_as_bleak_error(func: ~_WrapFuncType) \u2192 ~_WrapFuncType\n</code></pre> <p>Define a wrapper throw grpc errors as BleakErrors. </p> <p></p>"},{"location":"reference/client/bluerpc_client.bleak/#class-bluerpcbleakclient","title":"class <code>BlueRPCBleakClient</code>","text":"<p>BlueRPC Bleak Client </p> <p>Implements: https://bleak.readthedocs.io/en/latest/api/client.html </p> <p></p>"},{"location":"reference/client/bluerpc_client.bleak/#method-__init__","title":"method <code>__init__</code>","text":"<pre><code>__init__(\n    address_or_ble_device: BLEDevice | str,\n    *args: Any,\n    client: Any,\n    **kwargs: Any\n)\n</code></pre>"},{"location":"reference/client/bluerpc_client.bleak/#property-is_connected","title":"property is_connected","text":"<p>Is Connected. </p>"},{"location":"reference/client/bluerpc_client.bleak/#property-mtu_size","title":"property mtu_size","text":"<p>Get ATT MTU size for active connection. </p> <p></p>"},{"location":"reference/client/bluerpc_client.bleak/#function-_async_wrap_bluetooth_operation","title":"function <code>_async_wrap_bluetooth_operation</code>","text":"<pre><code>_async_wrap_bluetooth_operation(\n    self: BaseBleakClient,\n    *args: Any,\n    **kwargs: Any\n) \u2192 Any\n</code></pre>"},{"location":"reference/client/bluerpc_client.bleak/#function-_async_wrap_bluetooth_operation_1","title":"function <code>_async_wrap_bluetooth_operation</code>","text":"<pre><code>_async_wrap_bluetooth_operation(\n    self: BaseBleakClient,\n    *args: Any,\n    **kwargs: Any\n) \u2192 Any\n</code></pre>"},{"location":"reference/client/bluerpc_client.bleak/#function-_async_wrap_bluetooth_operation_2","title":"function <code>_async_wrap_bluetooth_operation</code>","text":"<pre><code>_async_wrap_bluetooth_operation(\n    self: BaseBleakClient,\n    *args: Any,\n    **kwargs: Any\n) \u2192 Any\n</code></pre>"},{"location":"reference/client/bluerpc_client.bleak/#function-_async_wrap_bluetooth_operation_3","title":"function <code>_async_wrap_bluetooth_operation</code>","text":"<pre><code>_async_wrap_bluetooth_operation(\n    self: BaseBleakClient,\n    *args: Any,\n    **kwargs: Any\n) \u2192 Any\n</code></pre>"},{"location":"reference/client/bluerpc_client.bleak/#function-_async_wrap_bluetooth_operation_4","title":"function <code>_async_wrap_bluetooth_operation</code>","text":"<pre><code>_async_wrap_bluetooth_operation(\n    self: BaseBleakClient,\n    *args: Any,\n    **kwargs: Any\n) \u2192 Any\n</code></pre>"},{"location":"reference/client/bluerpc_client.bleak/#function-_async_wrap_bluetooth_operation_5","title":"function <code>_async_wrap_bluetooth_operation</code>","text":"<pre><code>_async_wrap_bluetooth_operation(\n    self: BaseBleakClient,\n    *args: Any,\n    **kwargs: Any\n) \u2192 Any\n</code></pre>"},{"location":"reference/client/bluerpc_client.bleak/#function-_async_wrap_bluetooth_operation_6","title":"function <code>_async_wrap_bluetooth_operation</code>","text":"<pre><code>_async_wrap_bluetooth_operation(\n    self: BaseBleakClient,\n    *args: Any,\n    **kwargs: Any\n) \u2192 Any\n</code></pre>"},{"location":"reference/client/bluerpc_client.bleak/#function-_async_wrap_bluetooth_operation_7","title":"function <code>_async_wrap_bluetooth_operation</code>","text":"<pre><code>_async_wrap_bluetooth_operation(\n    self: BaseBleakClient,\n    *args: Any,\n    **kwargs: Any\n) \u2192 Any\n</code></pre>"},{"location":"reference/client/bluerpc_client.bleak/#function-_async_wrap_bluetooth_operation_8","title":"function <code>_async_wrap_bluetooth_operation</code>","text":"<pre><code>_async_wrap_bluetooth_operation(\n    self: BaseBleakClient,\n    *args: Any,\n    **kwargs: Any\n) \u2192 Any\n</code></pre>"},{"location":"reference/client/bluerpc_client.bleak/#function-_async_wrap_bluetooth_operation_9","title":"function <code>_async_wrap_bluetooth_operation</code>","text":"<pre><code>_async_wrap_bluetooth_operation(\n    self: BaseBleakClient,\n    *args: Any,\n    **kwargs: Any\n) \u2192 Any\n</code></pre>"},{"location":"reference/client/bluerpc_client.bleak/#function-_async_wrap_bluetooth_operation_10","title":"function <code>_async_wrap_bluetooth_operation</code>","text":"<pre><code>_async_wrap_bluetooth_operation(\n    self: BaseBleakClient,\n    *args: Any,\n    **kwargs: Any\n) \u2192 Any\n</code></pre> <p>This file was automatically generated via lazydocs.</p>"},{"location":"reference/client/bluerpc_client.bluerpc/","title":"Bluerpc client.bluerpc","text":""},{"location":"reference/client/bluerpc_client.bluerpc/#module-bluerpc_clientbluerpc","title":"module <code>bluerpc_client.bluerpc</code>","text":""},{"location":"reference/client/bluerpc_client.bluerpc/#global-variables","title":"Global Variables","text":"<ul> <li>MAX_RETRIES</li> <li>BACKOFF_BASE</li> </ul>"},{"location":"reference/client/bluerpc_client.bluerpc/#class-bluerpc","title":"class <code>BlueRPC</code>","text":""},{"location":"reference/client/bluerpc_client.bluerpc/#method-__init__","title":"method <code>__init__</code>","text":"<pre><code>__init__(\n    host: str,\n    port: int = 5052,\n    key: bytes | None = None,\n    cert: bytes | None = None,\n    ca_cert: bytes | None = None,\n    client_name: str = 'bluerpc_client',\n    reconnect: bool = True,\n    device_name: str | None = None,\n    zeroconf_instance: Zeroconf | None = None\n) \u2192 None\n</code></pre> <p>Client constructor </p> <p>Args:</p> <ul> <li><code>host</code>:  worker address </li> <li><code>port</code>:  worker port </li> <li><code>key</code>:  PEM encoded key file of the worker </li> <li><code>cert</code>:  PEM encoded cert file of the worker </li> <li><code>ca_cert</code>:  PEM encoded cert of the certificate authority </li> <li><code>client_name</code>:  name of this client </li> <li><code>reconnect</code>:  if we should try to reconnect automatically if the connection is lost </li> <li><code>device_name</code>:  name of the worker (can be auto filled if a connection is successful) </li> <li><code>zeroconf_instance</code>:  zeroconf instance to use (to reconnect immediately if the zeroconf entry of the worker is changed) </li> </ul> <p></p>"},{"location":"reference/client/bluerpc_client.bluerpc/#method-can_connect","title":"method <code>can_connect</code>","text":"<pre><code>can_connect()\n</code></pre> <p>Check if we can connect to a device on this worker </p> <p></p>"},{"location":"reference/client/bluerpc_client.bluerpc/#method-connect","title":"method <code>connect</code>","text":"<pre><code>connect() \u2192 bool\n</code></pre> <p>Connect to the bluerpc server If the connection fails, automatically retry if possible </p> <p>Returns:</p> <ul> <li><code>bool</code>:  if success </li> </ul> <p>Raises:  BlueRPCConnectionError if connection failed and retry is not possible </p> <p></p>"},{"location":"reference/client/bluerpc_client.bluerpc/#method-disconnect","title":"method <code>disconnect</code>","text":"<pre><code>disconnect()\n</code></pre> <p>Disconnect from bluerpc server </p> <p></p>"},{"location":"reference/client/bluerpc_client.bluerpc/#method-on_disconnect_err","title":"method <code>on_disconnect_err</code>","text":"<pre><code>on_disconnect_err(error: AioRpcError)\n</code></pre> <p>Function to call when the client is unexpectedly disconnected Will try to reconnect if possible </p> <p></p>"},{"location":"reference/client/bluerpc_client.bluerpc/#method-register_callback","title":"method <code>register_callback</code>","text":"<pre><code>register_callback(fun)\n</code></pre> <p>Register a callback for client events </p> <p>Args:</p> <ul> <li><code>fun</code>:  the callback function taking one argument of type ClientEvent </li> </ul> <p></p>"},{"location":"reference/client/bluerpc_client.bluerpc/#method-set_keystore","title":"method <code>set_keystore</code>","text":"<pre><code>set_keystore(data: bytes, overwrite: bool = True, restart: bool = True) \u2192 bool\n</code></pre> <p>Set the keystore for a worker </p> <p>Args:</p> <ul> <li><code>data</code>:  the keystore data </li> <li><code>overwrite</code>:  if a keystore already exists on the worker should be replaced </li> <li><code>restart</code>:  if the worker should be restarted to apply the new configuration </li> </ul> <p>Returns:</p> <ul> <li><code>bool</code>:  True if success </li> </ul> <p></p>"},{"location":"reference/client/bluerpc_client.bluerpc/#method-stop","title":"method <code>stop</code>","text":"<pre><code>stop()\n</code></pre> <p>Disconnect and delete client </p> <p></p>"},{"location":"reference/client/bluerpc_client.bluerpc/#method-unregister_callback","title":"method <code>unregister_callback</code>","text":"<pre><code>unregister_callback(fun)\n</code></pre> <p>Unregister a callback for client envents </p> <p>Args:</p> <ul> <li><code>fun</code>:  the callback function previously registered </li> </ul> <p>This file was automatically generated via lazydocs.</p>"},{"location":"reference/client/bluerpc_client.characteristic/","title":"Bluerpc client.characteristic","text":""},{"location":"reference/client/bluerpc_client.characteristic/#module-bluerpc_clientcharacteristic","title":"module <code>bluerpc_client.characteristic</code>","text":"<p>BleakGATTCharacteristicBlueRPC. </p>"},{"location":"reference/client/bluerpc_client.characteristic/#global-variables","title":"Global Variables","text":"<ul> <li>PROPERTY_MAP</li> </ul>"},{"location":"reference/client/bluerpc_client.characteristic/#class-bleakgattcharacteristicbluerpc","title":"class <code>BleakGATTCharacteristicBlueRPC</code>","text":"<p>GATT Characteristic implementation for the BlueRPC backend. </p> <p></p>"},{"location":"reference/client/bluerpc_client.characteristic/#method-__init__","title":"method <code>__init__</code>","text":"<pre><code>__init__(\n    obj: 'BLECharacteristic',\n    max_write_without_response_size: 'int',\n    service_uuid: 'str',\n    service_handle: 'int'\n) \u2192 None\n</code></pre> <p>Init a BleakGATTCharacteristicBlueRPC. </p>"},{"location":"reference/client/bluerpc_client.characteristic/#property-description","title":"property description","text":"<p>Description for this characteristic </p>"},{"location":"reference/client/bluerpc_client.characteristic/#property-descriptors","title":"property descriptors","text":"<p>List of descriptors for this service. </p>"},{"location":"reference/client/bluerpc_client.characteristic/#property-handle","title":"property handle","text":"<p>Integer handle for this characteristic. </p>"},{"location":"reference/client/bluerpc_client.characteristic/#property-max_write_without_response_size","title":"property max_write_without_response_size","text":"<p>Gets the maximum size in bytes that can be used for the data argument of :meth:<code>BleakClient.write_gatt_char()</code> when <code>response=False</code>. </p> <p>.. warning:: Linux quirk: For BlueZ versions &lt; 5.62, this property  will always return <code>20</code>. </p> <p>.. versionadded:: 0.16.0 </p>"},{"location":"reference/client/bluerpc_client.characteristic/#property-properties","title":"property properties","text":"<p>Properties of this characteristic. </p>"},{"location":"reference/client/bluerpc_client.characteristic/#property-service_handle","title":"property service_handle","text":"<p>Integer handle of the Service containing this characteristic. </p>"},{"location":"reference/client/bluerpc_client.characteristic/#property-service_uuid","title":"property service_uuid","text":"<p>Uuid of the Service containing this characteristic. </p>"},{"location":"reference/client/bluerpc_client.characteristic/#property-uuid","title":"property uuid","text":"<p>Uuid of this characteristic. </p> <p></p>"},{"location":"reference/client/bluerpc_client.characteristic/#method-add_descriptor","title":"method <code>add_descriptor</code>","text":"<pre><code>add_descriptor(descriptor: 'BleakGATTDescriptor') \u2192 None\n</code></pre> <p>Add a :py:class:<code>~BleakGATTDescriptor</code> to the characteristic. </p> <p>Should not be used by end user, but rather by <code>bleak</code> itself. </p> <p></p>"},{"location":"reference/client/bluerpc_client.characteristic/#method-get_descriptor","title":"method <code>get_descriptor</code>","text":"<pre><code>get_descriptor(specifier: 'int | str | UUID') \u2192 BleakGATTDescriptor | None\n</code></pre> <p>Get a descriptor by handle (int) or UUID (str or uuid.UUID). </p> <p>This file was automatically generated via lazydocs.</p>"},{"location":"reference/client/bluerpc_client.crypto/","title":"Bluerpc client.crypto","text":""},{"location":"reference/client/bluerpc_client.crypto/#module-bluerpc_clientcrypto","title":"module <code>bluerpc_client.crypto</code>","text":""},{"location":"reference/client/bluerpc_client.crypto/#function-create_certs","title":"function <code>create_certs</code>","text":"<pre><code>create_certs(\n    country,\n    common_name,\n    organization='BlueRPC',\n    validity: timedelta = datetime.timedelta(days=35000),\n    key_size=2048,\n    signing_key: RSAPrivateKey | None = None,\n    issuer_cert: Certificate | None = None\n) \u2192 (&lt;class 'RSAPrivateKey'&gt;, &lt;class 'Certificate'&gt;)\n</code></pre> <p>Helper to create certificates for bluerpc </p> <p>Args:</p> <ul> <li><code>country</code>:  the country name </li> <li><code>common_name</code>:  the common name, if generating for a worker, make sure to set it as the worker ip </li> <li><code>organization</code>:  the organization name </li> <li><code>validity</code>:  the period of validity for this cert </li> <li><code>key_size</code>:  the key size </li> <li><code>signing_key</code>:  the key to be used to sign the certificate, use the key from a CA or leave empty to create a self-signed cert </li> <li><code>issuer_cert</code>:  the certificated corresponding to the signing key </li> </ul> <p>Returns:</p> <ul> <li><code>(rsa.RSAPrivateKey, x509.Certificate)</code>:  a tuple of the private key and the certificate </li> </ul> <p></p>"},{"location":"reference/client/bluerpc_client.crypto/#function-serialize_certs","title":"function <code>serialize_certs</code>","text":"<pre><code>serialize_certs(data: RSAPrivateKey | Certificate) \u2192 bytes\n</code></pre> <p>Helper to serialize a private key or a certificate </p> <p>Args:</p> <ul> <li><code>data</code>:  an RSAPrivateKey or a Certificate object </li> </ul> <p>Returns:</p> <ul> <li><code>bytes</code>:  a PEM encoded file </li> </ul> <p></p>"},{"location":"reference/client/bluerpc_client.crypto/#function-create_keystore","title":"function <code>create_keystore</code>","text":"<pre><code>create_keystore(\n    key: RSAPrivateKey,\n    cert: Certificate,\n    ca_cert: Certificate,\n    password: str\n)\n</code></pre> <p>Helper to create a keystore with the key/cert of a worker and the CA cert </p> <p>Args:</p> <ul> <li><code>key</code>:  the private key of the worker </li> <li><code>cert</code>:  the certificate of the worker (signed by the CA) </li> <li><code>ca_cert</code>:  the CA cert </li> <li><code>password</code>:  the password of the pfx </li> <li><code>name</code>:  the name of the pfx </li> </ul> <p>Returns:</p> <ul> <li><code>bytes</code>:  the pfx file </li> </ul> <p></p>"},{"location":"reference/client/bluerpc_client.crypto/#function-load_certs","title":"function <code>load_certs</code>","text":"<pre><code>load_certs(\n    key: bytes | None,\n    cert: bytes | None\n) \u2192 (RSAPrivateKey | None, Certificate | None)\n</code></pre> <p>Helper to load certificates from bytes </p> <p>Args:</p> <ul> <li><code>key</code>:  a PEM encoded key </li> <li><code>cert</code>:  a PEM encoded cert </li> </ul> <p>Returns:</p> <ul> <li><code>(rsa.RSAPrivateKey|None, x509.Certificate|None)</code>:  a tuple of the private key and the certificate </li> </ul> <p>This file was automatically generated via lazydocs.</p>"},{"location":"reference/client/bluerpc_client.descriptor/","title":"Bluerpc client.descriptor","text":""},{"location":"reference/client/bluerpc_client.descriptor/#module-bluerpc_clientdescriptor","title":"module <code>bluerpc_client.descriptor</code>","text":"<p>BleakGATTDescriptorBlueRPC. </p> <p></p>"},{"location":"reference/client/bluerpc_client.descriptor/#class-bleakgattdescriptorbluerpc","title":"class <code>BleakGATTDescriptorBlueRPC</code>","text":"<p>GATT Descriptor implementation for BlueRPC backend. </p> <p></p>"},{"location":"reference/client/bluerpc_client.descriptor/#method-__init__","title":"method <code>__init__</code>","text":"<pre><code>__init__(\n    obj: 'BLEDescriptor',\n    characteristic_uuid: 'str',\n    characteristic_handle: 'int'\n) \u2192 None\n</code></pre> <p>Init a BleakGATTDescriptorBlueRPC. </p>"},{"location":"reference/client/bluerpc_client.descriptor/#property-characteristic_handle","title":"property characteristic_handle","text":"<p>Handle for the characteristic that this descriptor belongs to. </p>"},{"location":"reference/client/bluerpc_client.descriptor/#property-characteristic_uuid","title":"property characteristic_uuid","text":"<p>UUID for the characteristic that this descriptor belongs to. </p>"},{"location":"reference/client/bluerpc_client.descriptor/#property-description","title":"property description","text":"<p>A text description of what this descriptor represents </p>"},{"location":"reference/client/bluerpc_client.descriptor/#property-handle","title":"property handle","text":"<p>Integer handle for this descriptor. </p>"},{"location":"reference/client/bluerpc_client.descriptor/#property-uuid","title":"property uuid","text":"<p>UUID for this descriptor. </p> <p>This file was automatically generated via lazydocs.</p>"},{"location":"reference/client/bluerpc_client.scanner/","title":"Bluerpc client.scanner","text":""},{"location":"reference/client/bluerpc_client.scanner/#module-bluerpc_clientscanner","title":"module <code>bluerpc_client.scanner</code>","text":"<p>Bluetooth scanner for BlueRPC. </p> <p></p>"},{"location":"reference/client/bluerpc_client.scanner/#class-bluerpcblescanner","title":"class <code>BlueRPCBLEScanner</code>","text":"<p>Scanner for BlueRPC BLE devices. </p> <p></p>"},{"location":"reference/client/bluerpc_client.scanner/#method-__init__","title":"method <code>__init__</code>","text":"<pre><code>__init__(\n    client,\n    on_advertisement,\n    on_disconnect=None,\n    services: 'List[str]' = [],\n    reconnect=True\n) \u2192 None\n</code></pre> <p>Create the scanner </p> <p>Args:</p> <ul> <li><code>client</code>:  a BlueRPC client instance (must be already connected to start the scanner) </li> <li><code>on_advertisement</code>:  a callback function taking one argument of type BlueRPCBLEAdvertisement, will be called on each new advertisement </li> <li><code>on_disconnect</code>:  a callback function called when the scanner is disconnected </li> <li><code>services</code>:  a list of service uuid to filter on </li> <li><code>reconnect</code>:  if the scanner should try to reconnect if the connection is lost (must also be enabled for the client) </li> </ul> <p></p>"},{"location":"reference/client/bluerpc_client.scanner/#method-start","title":"method <code>start</code>","text":"<pre><code>start(active=True, interval=2000) \u2192 bool\n</code></pre> <p>Start the scanner </p> <p>Args:</p> <ul> <li><code>active</code>:  if we need to use active scan </li> <li><code>interval</code>:  scan interval in miliseconds </li> </ul> <p></p>"},{"location":"reference/client/bluerpc_client.scanner/#method-stop","title":"method <code>stop</code>","text":"<pre><code>stop()\n</code></pre> <p>Stop the scanner </p> <p></p>"},{"location":"reference/client/bluerpc_client.scanner/#class-bluerpcbleadvertisement","title":"class <code>BlueRPCBLEAdvertisement</code>","text":"<p>BlueRPCBLEAdvertisement(resp: 'gatt_pb2.BLEScanResponseData') </p> <p></p>"},{"location":"reference/client/bluerpc_client.scanner/#method-__init___1","title":"method <code>__init__</code>","text":"<pre><code>__init__(resp: 'BLEScanResponseData')\n</code></pre> <p>This file was automatically generated via lazydocs.</p>"},{"location":"reference/client/bluerpc_client.service/","title":"Bluerpc client.service","text":""},{"location":"reference/client/bluerpc_client.service/#module-bluerpc_clientservice","title":"module <code>bluerpc_client.service</code>","text":"<p>BleakGATTServiceBlueRPC. </p> <p></p>"},{"location":"reference/client/bluerpc_client.service/#class-bleakgattservicebluerpc","title":"class <code>BleakGATTServiceBlueRPC</code>","text":"<p>GATT Characteristic implementation for the BlueRPC backend. </p> <p></p>"},{"location":"reference/client/bluerpc_client.service/#method-__init__","title":"method <code>__init__</code>","text":"<pre><code>__init__(obj: 'BLEService') \u2192 None\n</code></pre> <p>Init a BleakGATTServiceBlueRPC </p>"},{"location":"reference/client/bluerpc_client.service/#property-characteristics","title":"property characteristics","text":"<p>List of characteristics for this service. </p>"},{"location":"reference/client/bluerpc_client.service/#property-description","title":"property description","text":"<p>String description for this service </p>"},{"location":"reference/client/bluerpc_client.service/#property-handle","title":"property handle","text":"<p>Integer handle of this service. </p>"},{"location":"reference/client/bluerpc_client.service/#property-uuid","title":"property uuid","text":"<p>UUID for this service. </p> <p></p>"},{"location":"reference/client/bluerpc_client.service/#method-add_characteristic","title":"method <code>add_characteristic</code>","text":"<pre><code>add_characteristic(characteristic: 'BleakGATTCharacteristic') \u2192 None\n</code></pre> <p>Add a :py:class:<code>~BleakGATTCharacteristicBlueRPC</code> to the service. </p> <p>Should not be used by end user, but rather by <code>bleak</code> itself. </p> <p>This file was automatically generated via lazydocs.</p>"},{"location":"reference/client/bluerpc_client.utils/","title":"Bluerpc client.utils","text":""},{"location":"reference/client/bluerpc_client.utils/#module-bluerpc_clientutils","title":"module <code>bluerpc_client.utils</code>","text":""},{"location":"reference/client/bluerpc_client.utils/#class-clientevent","title":"class <code>ClientEvent</code>","text":"<p>An enumeration. </p> <p></p>"},{"location":"reference/client/bluerpc_client.utils/#class-bluerpcexception","title":"class <code>BlueRPCException</code>","text":""},{"location":"reference/client/bluerpc_client.utils/#class-bluerpcinvalidreturncode","title":"class <code>BlueRPCInvalidReturnCode</code>","text":""},{"location":"reference/client/bluerpc_client.utils/#class-bluerpcconnectionerror","title":"class <code>BlueRPCConnectionError</code>","text":""},{"location":"reference/client/bluerpc_client.utils/#method-__init__","title":"method <code>__init__</code>","text":"<pre><code>__init__(exc: AioRpcError) \u2192 None\n</code></pre> <p>This file was automatically generated via lazydocs.</p>"},{"location":"reference/proto/rpc/","title":"Protocol Documentation","text":""},{"location":"reference/proto/rpc/#table-of-contents","title":"Table of Contents","text":"<ul> <li> <p>rpc/common.proto</p> <ul> <li>HelloRequest</li> <li>HelloResponse</li> <li>SetKeystoreRequest</li> <li>StatusMessage</li> <li> <p>Void</p> </li> <li> <p>ErrorCode</p> </li> <li>WorkerMode</li> <li>WorkerType</li> </ul> </li> <li> <p>rpc/services.proto</p> <ul> <li>BlueRPC</li> </ul> </li> <li> <p>rpc/gatt.proto</p> <ul> <li>BLEAdvertisementData</li> <li>BLECharacteristic</li> <li>BLEConnectRequest</li> <li>BLEConnectResponse</li> <li>BLEConnectionPropertiesResponse</li> <li>BLEDescriptor</li> <li>BLEDevice</li> <li>BLEDevicesResponse</li> <li>BLEListServicesResponse</li> <li>BLENotificationRequest</li> <li>BLENotificationResponse</li> <li>BLEPairingCodeRequest</li> <li>BLEPairingRequest</li> <li>BLEReadCharacteristicRequest</li> <li>BLEReadDescriptorRequest</li> <li>BLEReadResponse</li> <li>BLEScanFilter</li> <li>BLEScanRequest</li> <li>BLEScanResponse</li> <li>BLEScanResponseData</li> <li>BLEService</li> <li>BLEWriteCharacteristicRequest</li> <li> <p>BLEWriteDescriptorRequest</p> </li> <li> <p>BLEChrProperty</p> </li> <li>BLEScanFilterType</li> <li>BLEWriteMode</li> </ul> </li> <li> <p>Scalar Value Types</p> </li> </ul> <p></p> <p>Top</p>"},{"location":"reference/proto/rpc/#rpccommonproto","title":"rpc/common.proto","text":""},{"location":"reference/proto/rpc/#hellorequest","title":"HelloRequest","text":"<p>infos about the client connecting to the worker</p> Field Type Label Description name string client name version string client protocol version <p></p>"},{"location":"reference/proto/rpc/#helloresponse","title":"HelloResponse","text":"<p>returns general info on the worker</p> Field Type Label Description name string worker name version string protocol version uptime uint64 uptime of the worker supported_modes WorkerMode repeated supported modes worker_type WorkerType worker operating_system string OS operating_system_version string OS Version ble_filters_required bool if BLE filters are required for scanning bt_mac string bluetooth adapter mac address net_mac string netwrok adapter mac address uid string unique identifier for each worker <p></p>"},{"location":"reference/proto/rpc/#setkeystorerequest","title":"SetKeystoreRequest","text":"<p>request to set the keystore for the bluerpc server</p> Field Type Label Description data bytes keystore content overwrite bool overwrite if exists apply bool if we should restart the worker to apply settings <p></p>"},{"location":"reference/proto/rpc/#statusmessage","title":"StatusMessage","text":"<p>status message</p> Field Type Label Description code ErrorCode error status message string error description <p></p>"},{"location":"reference/proto/rpc/#void","title":"Void","text":"<p>empty message</p> <p></p>"},{"location":"reference/proto/rpc/#errorcode","title":"ErrorCode","text":"<p>possible error codes</p> Name Number Description ERROR_CODE_UNK 0 not specified ERROR_CODE_OK 1 OK ERROR_CODE_ERROR 2 an unknown error occured ERROR_CODE_UNAVAILABLE 3 device not available / cannot be found ERROR_CODE_CONNECTION_FAILED 4 failed to connect to the device ERROR_CODE_UNKNOWN_SERVICE 5 the specified sevice is unknown ERROR_CODE_UNKNOWN_CHARACTERISTIC 6 the specified characteristic is unknown ERROR_CODE_UNKNOWN_DESCRIPTOR 7 the specified descriptor is unknown ERROR_CODE_UNSUPPORTED 8 the requested action is not supported ERROR_CODE_INVALID_CONNECTION_SETTINGS 9 supplied connection settings are invalid ERROR_CODE_ALREADY_CONNECTED 10 device is already connected ERROR_CODE_DEVICE_BUSY 11 another app is already using this device ERROR_CODE_CONNECTION_REQUIRED 12 connection is required (ex: for pairing) ERROR_CODE_PAIRING_CODE_REQUIRED 13 pairing code is required ERROR_CODE_SCAN_FILTERS_REQUIRED 14 if scan filters are mandatory (12.0 &gt;= macOS &lt; 12.3, android &gt; 8) ERROR_CODE_SCAN_ALREADY_RUNNING 15 scan already running ERROR_CODE_SCAN_STOPPED 16 scan stopped ERROR_CODE_KEYSTORE_ALREADY_EXISTS 17 keystore already exists <p></p>"},{"location":"reference/proto/rpc/#workermode","title":"WorkerMode","text":"<p>possible worker modes</p> Name Number Description WORKER_MODE_UNK 0 unknown worker mode WORKER_MODE_GATT_PASSIVE 1 can receive gatt advertisement packets WORKER_MODE_GATT_ACTIVE 2 can connect to a device <p></p>"},{"location":"reference/proto/rpc/#workertype","title":"WorkerType","text":"<p>types of workers supported by bluerpc</p> Name Number Description WORKER_TYPE_UNKNOWN 0 unknown worker type WORKER_TYPE_PYTHON 1 python service worker WORKER_TYPE_ANDROID 2 android worker <p></p> <p>Top</p>"},{"location":"reference/proto/rpc/#rpcservicesproto","title":"rpc/services.proto","text":""},{"location":"reference/proto/rpc/#bluerpc","title":"BlueRPC","text":"<p>main service</p> Method Name Request Type Response Type Description Hello HelloRequest HelloResponse first request after connection, returns general infos about the worker SetKeystore SetKeystoreRequest StatusMessage request to set the keystore of the woker (user will need to provide the password on the worker) BLEScanStart BLEScanRequest StatusMessage start a scanner BLEScanStop Void StatusMessage stop the scanner BLEConnect BLEConnectRequest BLEConnectResponse connect BLEDisconnect BLEDevice StatusMessage disconnect BLEPair BLEPairingRequest StatusMessage pair BLEPairCode BLEPairingCodeRequest StatusMessage pairing code (should be called after BLEPair when ERROR_CODE_PAIRING_CODE_REQUIRED is returned) BLEUnpair BLEDevice StatusMessage unpair BLEGetDevices Void BLEDevicesResponse get a list of connected and paired devices BLEGetConnectionProperties BLEDevice BLEConnectionPropertiesResponse get connection properties BLEListServices BLEDevice BLEListServicesResponse list services, characteristics and descriptors for a device BLEReadCharacteristic BLEReadCharacteristicRequest BLEReadResponse read characteristic BLEReadDescriptor BLEReadDescriptorRequest BLEReadResponse read descriptor BLEWriteCharacteristic BLEWriteCharacteristicRequest StatusMessage write characteristic BLEWriteDescriptor BLEWriteDescriptorRequest StatusMessage write descriptor BLENotification BLENotificationRequest StatusMessage subscribe or unsubscribe to a characteristic notification BLEReceiveNotifications Void BLENotificationResponse stream global method to receive all the subscribed notifications BLEReceiveDisconnect Void BLEDevice stream global method to receive disconnect notifications BLEReceiveScan Void BLEScanResponse stream global method to receive scan results <p></p> <p>Top</p>"},{"location":"reference/proto/rpc/#rpcgattproto","title":"rpc/gatt.proto","text":""},{"location":"reference/proto/rpc/#bleadvertisementdata","title":"BLEAdvertisementData","text":"<p>simple key/value message for storing advertisement data</p> Field Type Label Description uuid string key (usually service uuid for BLE) value bytes optional associated value <p></p>"},{"location":"reference/proto/rpc/#blecharacteristic","title":"BLECharacteristic","text":"<p>BLE Characteristic representation</p> Field Type Label Description uuid string characteristic UUID properties BLEChrProperty repeated characteristic properties descriptors BLEDescriptor repeated descriptors associated with this characteristic <p></p>"},{"location":"reference/proto/rpc/#bleconnectrequest","title":"BLEConnectRequest","text":"<p>connect request</p> Field Type Label Description device BLEDevice device <p></p>"},{"location":"reference/proto/rpc/#bleconnectresponse","title":"BLEConnectResponse","text":"<p>connect response</p> Field Type Label Description status StatusMessage status mtu uint32 mtu <p></p>"},{"location":"reference/proto/rpc/#bleconnectionpropertiesresponse","title":"BLEConnectionPropertiesResponse","text":"<p>connection properties</p> Field Type Label Description status StatusMessage status rssi float rssi <p></p>"},{"location":"reference/proto/rpc/#bledescriptor","title":"BLEDescriptor","text":"<p>BLE Descriptor representation</p> Field Type Label Description uuid string descriptor UUID <p></p>"},{"location":"reference/proto/rpc/#bledevice","title":"BLEDevice","text":"<p>represents the data needed to identify a bluetooth device</p> Field Type Label Description mac string using the mac address uuid string or using a UUID (macOS) <p></p>"},{"location":"reference/proto/rpc/#bledevicesresponse","title":"BLEDevicesResponse","text":"<p>message representing the state of the worker connections</p> Field Type Label Description status StatusMessage status max_connections uint32 maximum number of simultaneous connections allowed (0 if undefined) connected_devices BLEDevice repeated list of currently connected devices reliable_paired_list bool if the paired devices list is reliable (=query to the bluetooth system, != stored list of previous pairings) paired_devices BLEDevice repeated list of paired devices <p></p>"},{"location":"reference/proto/rpc/#blelistservicesresponse","title":"BLEListServicesResponse","text":"<p>list of Services/Characteristics/Descriptors for a specific device</p> Field Type Label Description status StatusMessage status device BLEDevice device services BLEService repeated services <p></p>"},{"location":"reference/proto/rpc/#blenotificationrequest","title":"BLENotificationRequest","text":"<p>subscribe/unsubscribe to a characteristic notification</p> Field Type Label Description device BLEDevice device service_uuid string service uuid uuid string characteristic uuid subscribe bool subscribe <p></p>"},{"location":"reference/proto/rpc/#blenotificationresponse","title":"BLENotificationResponse","text":"<p>characteristic notification data</p> Field Type Label Description device BLEDevice device service_uuid string service uuid uuid string characteristic uuid data bytes data <p></p>"},{"location":"reference/proto/rpc/#blepairingcoderequest","title":"BLEPairingCodeRequest","text":"<p>request for pairing with code</p> Field Type Label Description device BLEDevice device code string code <p></p>"},{"location":"reference/proto/rpc/#blepairingrequest","title":"BLEPairingRequest","text":"<p>pairing request</p> Field Type Label Description device BLEDevice device <p></p>"},{"location":"reference/proto/rpc/#blereadcharacteristicrequest","title":"BLEReadCharacteristicRequest","text":"<p>read characteristic</p> Field Type Label Description device BLEDevice device service_uuid string service uuid uuid string characteristic uuid <p></p>"},{"location":"reference/proto/rpc/#blereaddescriptorrequest","title":"BLEReadDescriptorRequest","text":"<p>read descriptor</p> Field Type Label Description device BLEDevice device service_uuid string service uuid characteristic_uuid string characteristic uuild uuid string descriptor uuid <p></p>"},{"location":"reference/proto/rpc/#blereadresponse","title":"BLEReadResponse","text":"<p>generic message for returning data</p> Field Type Label Description status StatusMessage status data bytes data <p></p>"},{"location":"reference/proto/rpc/#blescanfilter","title":"BLEScanFilter","text":"<p>device scan filter</p> Field Type Label Description type BLEScanFilterType type of filter value string filtering data <p></p>"},{"location":"reference/proto/rpc/#blescanrequest","title":"BLEScanRequest","text":"<p>device scan configuration</p> Field Type Label Description interval uint64 scanning interval in miliseconds active bool Passive or Active scanning filters BLEScanFilter repeated scanning filters (a device must match at least one of these filters, all devices are returned if no filters are specified) merge_filters bool if existing filters shoud be kept or overriden <p></p>"},{"location":"reference/proto/rpc/#blescanresponse","title":"BLEScanResponse","text":"<p>message representing a scan result for a device or more</p> Field Type Label Description status StatusMessage status data BLEScanResponseData repeated data <p></p>"},{"location":"reference/proto/rpc/#blescanresponsedata","title":"BLEScanResponseData","text":"<p>message representing a scan result for a device</p> Field Type Label Description device BLEDevice device information rssi float RSSI txpwr float TX Power service_uuids string repeated discovered services service_data BLEAdvertisementData repeated advertisement data manufacturer_data BLEAdvertisementData repeated advertisement data time uint64 timestamp of the discovery name string name of the device <p></p>"},{"location":"reference/proto/rpc/#bleservice","title":"BLEService","text":"<p>BLE Service representation</p> Field Type Label Description uuid string service UUID characteristics BLECharacteristic repeated characteristics associated with this service <p></p>"},{"location":"reference/proto/rpc/#blewritecharacteristicrequest","title":"BLEWriteCharacteristicRequest","text":"<p>write characteristic</p> Field Type Label Description device BLEDevice device service_uuid string service uuid uuid string characteristic uuid data bytes data mode BLEWriteMode mode <p></p>"},{"location":"reference/proto/rpc/#blewritedescriptorrequest","title":"BLEWriteDescriptorRequest","text":"<p>read descriptor</p> Field Type Label Description device BLEDevice device service_uuid string service uuid characteristic_uuid string characteristic uuild uuid string descriptor uuid data bytes data <p></p>"},{"location":"reference/proto/rpc/#blechrproperty","title":"BLEChrProperty","text":"<p>BLE characteristics properties</p> Name Number Description BLE_CHR_PROPERTY_UNK 0 unknown characteristic BLE_CHR_PROPERTY_READ 1 read property BLE_CHR_PROPERTY_WRITE 2 write property BLE_CHR_PROPERTY_NOTIFY 3 notify property BLE_CHR_PROPERTY_BROADCAST 4 broadcast property BLE_CHR_PROPERTY_EXTENDED_PROPS 5 extended properties BLE_CHR_PROPERTY_INDICATE 6 indicate property BLE_CHR_PROPERTY_SIGNED_WRITE 7 signed write property BLE_CHR_PROPERTY_WRITE_NO_RESPONSE 8 write without response property <p></p>"},{"location":"reference/proto/rpc/#blescanfiltertype","title":"BLEScanFilterType","text":"<p>scan filter types</p> Name Number Description BLE_SCAN_FILTER_TYPE_UNKNOWN 0 unknown BLE_SCAN_FILTER_TYPE_MAC 1 filter by mac address BLE_SCAN_FILTER_TYPE_NAME 2 filter by device name BLE_SCAN_FILTER_TYPE_UUID 3 filter by service UUID (only from the advertisement data) <p></p>"},{"location":"reference/proto/rpc/#blewritemode","title":"BLEWriteMode","text":"<p>BLE writing mode</p> Name Number Description BLE_WRITE_MODE_UNK 0 default write mode BLE_WRITE_MODE_NO_RESPONSE 1 write with no response BLE_WRITE_MODE_SIGNED 2 signed write"},{"location":"reference/proto/rpc/#scalar-value-types","title":"Scalar Value Types","text":".proto Type Notes C++ Java Python Go C# PHP Ruby  double double double float float64 double float Float  float float float float float32 float float Float  int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int32 int integer Bignum or Fixnum (as required)  int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long int64 long integer/string Bignum  uint32 Uses variable-length encoding. uint32 int int/long uint32 uint integer Bignum or Fixnum (as required)  uint64 Uses variable-length encoding. uint64 long int/long uint64 ulong integer/string Bignum or Fixnum (as required)  sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int int32 int integer Bignum or Fixnum (as required)  sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long int64 long integer/string Bignum  fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int uint32 uint integer Bignum or Fixnum (as required)  fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long uint64 ulong integer/string Bignum  sfixed32 Always four bytes. int32 int int int32 int integer Bignum or Fixnum (as required)  sfixed64 Always eight bytes. int64 long int/long int64 long integer/string Bignum  bool bool boolean boolean bool bool boolean TrueClass/FalseClass  string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode string string string String (UTF-8)  bytes May contain any arbitrary sequence of bytes. string ByteString str []byte ByteString string String (ASCII-8BIT)"},{"location":"reference/python/bluerpc.ble_conn/","title":"Bluerpc.ble conn","text":""},{"location":"reference/python/bluerpc.ble_conn/#module-bluerpcble_conn","title":"module <code>bluerpc.ble_conn</code>","text":""},{"location":"reference/python/bluerpc.ble_conn/#global-variables","title":"Global Variables","text":"<ul> <li>PAIRED_LIST_FILE</li> </ul>"},{"location":"reference/python/bluerpc.ble_conn/#class-bleconn","title":"class <code>BLEConn</code>","text":"<p>Class used to manipulate connections with Bluetooth Low-Energy devices </p> <p></p>"},{"location":"reference/python/bluerpc.ble_conn/#method-__init__","title":"method <code>__init__</code>","text":"<pre><code>__init__(dev: 'BLEDevice') \u2192 None\n</code></pre> <p>Constructor </p> <p>Args:</p> <ul> <li><code>dev</code>:  the device provided in the grpc requests, must contains a non null mac address or uuid </li> </ul> <p></p>"},{"location":"reference/python/bluerpc.ble_conn/#method-connect","title":"method <code>connect</code>","text":"<pre><code>connect() \u2192 BLEConnectResponse\n</code></pre> <p>Connect </p> <p>Returns:   a BLEConnectResponse (with the mtu if the connect operation succedeed) </p> <p></p>"},{"location":"reference/python/bluerpc.ble_conn/#method-disconnect","title":"method <code>disconnect</code>","text":"<pre><code>disconnect() \u2192 StatusMessage\n</code></pre>"},{"location":"reference/python/bluerpc.ble_conn/#method-disconnect_callback","title":"method <code>disconnect_callback</code>","text":"<pre><code>disconnect_callback(client: 'BleakClient') \u2192 None\n</code></pre> <p>Disconnect callback </p> <p>Called by bleak when a device is disconnected </p> <p>Args:</p> <ul> <li><code>client</code>:  the bleak client of the disconnected device </li> </ul> <p></p>"},{"location":"reference/python/bluerpc.ble_conn/#method-get_device","title":"method <code>get_device</code>","text":"<pre><code>get_device(dev: 'BLEDevice') \u2192 BLEConn\n</code></pre> <p>Static method to get a BLEConn instance from a device (mac address or uuid) </p> <p>Args:</p> <ul> <li><code>dev</code>:  the device provided in the grpc requests </li> </ul> <p>Returns:  a BLEConn instance </p> <p></p>"},{"location":"reference/python/bluerpc.ble_conn/#method-get_devices","title":"method <code>get_devices</code>","text":"<pre><code>get_devices() \u2192 BLEDevicesResponse\n</code></pre> <p>List devices infos </p> <p>The paired devices list is not reliable and is stored on a local file </p> <p>Returns:   a BLEDevicesResponse </p> <p></p>"},{"location":"reference/python/bluerpc.ble_conn/#method-get_list","title":"method <code>get_list</code>","text":"<pre><code>get_list() \u2192 BLEListServicesResponse\n</code></pre> <p>List Services/Characteristics/Descriptors of a ble device </p> <p></p>"},{"location":"reference/python/bluerpc.ble_conn/#method-get_props","title":"method <code>get_props</code>","text":"<pre><code>get_props() \u2192 BLEConnectionPropertiesResponse\n</code></pre> <p>Connection properties </p> <p>Currently, getting the rssi of connected devices is not supported by bleak </p> <p>Returns:   BLEConnectionPropertiesResponse </p> <p></p>"},{"location":"reference/python/bluerpc.ble_conn/#method-notif_callback","title":"method <code>notif_callback</code>","text":"<pre><code>notif_callback(sender: 'BleakGATTCharacteristic', data: 'bytearray')\n</code></pre> <p>Notification callback called by bleak (registered by start_notif) </p> <p>Adds a BLENotificationResponse with the provided data in the notifs queue </p> <p>Args:</p> <ul> <li><code>sender</code>:  the BleakGATTCharacteristic used to register the notification </li> <li><code>data</code>:  the notification data </li> </ul> <p></p>"},{"location":"reference/python/bluerpc.ble_conn/#method-pair","title":"method <code>pair</code>","text":"<pre><code>pair() \u2192 StatusMessage\n</code></pre> <p>Pairing </p> <p>Currently not supported, waiting for this pr to be merged: https://github.com/hbldh/bleak/pull/1100 </p> <p>Returns:   ERROR_CODE_UNSUPPORTED </p> <p></p>"},{"location":"reference/python/bluerpc.ble_conn/#method-pair_code","title":"method <code>pair_code</code>","text":"<pre><code>pair_code(code: 'str') \u2192 StatusMessage\n</code></pre> <p>Pairing (second step) </p> <p>Currently not supported, waiting for this pr to be merged: https://github.com/hbldh/bleak/pull/1100 </p> <p>Returns:   ERROR_CODE_UNSUPPORTED </p> <p></p>"},{"location":"reference/python/bluerpc.ble_conn/#method-read_characteristic","title":"method <code>read_characteristic</code>","text":"<pre><code>read_characteristic(service_uuid, uuid) \u2192 BLEReadResponse\n</code></pre>"},{"location":"reference/python/bluerpc.ble_conn/#method-read_descriptor","title":"method <code>read_descriptor</code>","text":"<pre><code>read_descriptor(service_uuid, characteristic_uuid, uuid) \u2192 BLEReadResponse\n</code></pre>"},{"location":"reference/python/bluerpc.ble_conn/#classmethod-set_adapter","title":"classmethod <code>set_adapter</code>","text":"<pre><code>set_adapter(adapter: 'str')\n</code></pre> <p>Set adapter id </p> <p>Args:</p> <ul> <li><code>adapter</code>:  the adapter id </li> </ul> <p></p>"},{"location":"reference/python/bluerpc.ble_conn/#classmethod-set_scanner","title":"classmethod <code>set_scanner</code>","text":"<pre><code>set_scanner(sc: 'BLEScanner')\n</code></pre> <p>Set scanner, used to connect when a scan is also running </p> <p>Args:</p> <ul> <li><code>sc</code>:  the scanner instance </li> </ul> <p></p>"},{"location":"reference/python/bluerpc.ble_conn/#method-subscribe","title":"method <code>subscribe</code>","text":"<pre><code>subscribe(service_uuid, uuid) \u2192 StatusMessage\n</code></pre>"},{"location":"reference/python/bluerpc.ble_conn/#method-unpair","title":"method <code>unpair</code>","text":"<pre><code>unpair() \u2192 StatusMessage\n</code></pre> <p>Unairing </p> <p>Supported only on Linux and Windows </p> <p>Returns:   ERROR_CODE_OK or ERROR_CODE_UNSUPPORTED on macos </p> <p></p>"},{"location":"reference/python/bluerpc.ble_conn/#method-unsubscribe","title":"method <code>unsubscribe</code>","text":"<pre><code>unsubscribe(service_uuid, uuid) \u2192 StatusMessage\n</code></pre>"},{"location":"reference/python/bluerpc.ble_conn/#method-write_characteristic","title":"method <code>write_characteristic</code>","text":"<pre><code>write_characteristic(service_uuid, uuid, data, with_response) \u2192 StatusMessage\n</code></pre>"},{"location":"reference/python/bluerpc.ble_conn/#method-write_descriptor","title":"method <code>write_descriptor</code>","text":"<pre><code>write_descriptor(service_uuid, characteristic_uuid, uuid, data) \u2192 StatusMessage\n</code></pre> <p>This file was automatically generated via lazydocs.</p>"},{"location":"reference/python/bluerpc.ble_scan/","title":"Bluerpc.ble scan","text":""},{"location":"reference/python/bluerpc.ble_scan/#module-bluerpcble_scan","title":"module <code>bluerpc.ble_scan</code>","text":""},{"location":"reference/python/bluerpc.ble_scan/#class-blescanner","title":"class <code>BLEScanner</code>","text":"<p>This class is used to scan for Bluetooth Low-Energy devices and store the results as ready-to-send proto objects </p> <p></p>"},{"location":"reference/python/bluerpc.ble_scan/#method-__init__","title":"method <code>__init__</code>","text":"<pre><code>__init__(adapter) \u2192 None\n</code></pre>"},{"location":"reference/python/bluerpc.ble_scan/#method-check_filters","title":"method <code>check_filters</code>","text":"<pre><code>check_filters(device: BLEDevice) \u2192 bool\n</code></pre> <p>Check Filters </p> <p>Args:</p> <ul> <li><code>device</code>:  bleak device </li> </ul> <p>Returns:  True if the device matches at least one of the filters (defined in the scan method) or that there is no filters </p> <p></p>"},{"location":"reference/python/bluerpc.ble_scan/#method-detection_callback","title":"method <code>detection_callback</code>","text":"<pre><code>detection_callback(\n    device: BLEDevice,\n    advertisement_data: AdvertisementData\n) \u2192 None\n</code></pre> <p>Detection callback </p> <p>Called from the Bleak Scanner for each device discovered Applies the remaining filters, creates the proto objects and adds them to the queues </p> <p>Args:</p> <ul> <li><code>device</code>:  bleak device </li> <li><code>advertisement_data</code>:  bleak advertisement data </li> </ul> <p></p>"},{"location":"reference/python/bluerpc.ble_scan/#method-restart_scan","title":"method <code>restart_scan</code>","text":"<pre><code>restart_scan() \u2192 None\n</code></pre> <p>Restart the scanner </p> <p>Useful to restart the scanner after it was temporarily stopped to connect to a device </p> <p></p>"},{"location":"reference/python/bluerpc.ble_scan/#method-scan","title":"method <code>scan</code>","text":"<pre><code>scan(active: bool, interval: int, filters: List[BLEScanFilter]) \u2192 None\n</code></pre> <p>Start scanner method </p> <p>Args:</p> <ul> <li><code>active</code>:  if the scanner should be in active or passive mode </li> <li><code>interval</code>:  interval to send messages </li> <li><code>filters</code>:  list of filters to apply for scanning, services uuid are processed directly by bleak, others are post-processed </li> </ul> <p></p>"},{"location":"reference/python/bluerpc.ble_scan/#method-stop_scan","title":"method <code>stop_scan</code>","text":"<pre><code>stop_scan() \u2192 None\n</code></pre> <p>Stop scanner method </p> <p>Stops the scanner if not already stopped </p> <p>This file was automatically generated via lazydocs.</p>"},{"location":"reference/python/bluerpc.cli/","title":"Bluerpc.cli","text":""},{"location":"reference/python/bluerpc.cli/#module-bluerpccli","title":"module <code>bluerpc.cli</code>","text":""},{"location":"reference/python/bluerpc.cli/#function-serve","title":"function <code>serve</code>","text":"<pre><code>serve(\n    bind_addr='[::]:5052',\n    name='unknown',\n    keystore=PosixPath('/home/runner/.local/share/bluerpc/keystore.pfx'),\n    keystore_password=None,\n    adapter_mac='00:00:00:00:00:00',\n    adapter_id=None\n) \u2192 None\n</code></pre> <p>Run the worker and the mDNS task </p> <p>Args:</p> <ul> <li><code>bind_addr</code>:  the gRPC server bind address </li> <li><code>name</code>:  the worker name </li> <li><code>keystore</code>:  path to a PKCS12 keystore (used for encryption) </li> <li><code>keystore_password</code>:  password for the keystore, leave to None to disable encryption </li> <li><code>adapter</code>:  adapter mac address </li> </ul> <p></p>"},{"location":"reference/python/bluerpc.cli/#function-handler","title":"function <code>handler</code>","text":"<pre><code>handler(a, b) \u2192 None\n</code></pre> <p>Callback for sigint/sigterm, terminates the worker </p> <p></p>"},{"location":"reference/python/bluerpc.cli/#function-run","title":"function <code>run</code>","text":"<pre><code>run()\n</code></pre> <p>Parse the arguments and start the worker </p> <p>This file was automatically generated via lazydocs.</p>"},{"location":"reference/python/bluerpc.discovery/","title":"Bluerpc.discovery","text":""},{"location":"reference/python/bluerpc.discovery/#module-bluerpcdiscovery","title":"module <code>bluerpc.discovery</code>","text":""},{"location":"reference/python/bluerpc.discovery/#function-start_discovery","title":"function <code>start_discovery</code>","text":"<pre><code>start_discovery(\n    bind_addr: str = '[::]:5052',\n    name: str = 'unknown',\n    adapter_mac: str = '00:00:00:00:00:00'\n) \u2192 None\n</code></pre> <p>Start the mDNS task for auto-discovery </p> <p>Args:</p> <ul> <li><code>bind_addr</code>:  the bind address passed to the worker </li> <li><code>name</code>:  the name of the worker </li> <li><code>encrypted</code>:  if the worker is running with encryption </li> <li><code>adapter_mac</code>:  mac address of the bluetooth adapter </li> </ul> <p>This file was automatically generated via lazydocs.</p>"},{"location":"reference/python/bluerpc.log/","title":"Bluerpc.log","text":""},{"location":"reference/python/bluerpc.log/#module-bluerpclog","title":"module <code>bluerpc.log</code>","text":""},{"location":"reference/python/bluerpc.log/#class-asynclogginginterceptor","title":"class <code>AsyncLoggingInterceptor</code>","text":""},{"location":"reference/python/bluerpc.log/#method-__init__","title":"method <code>__init__</code>","text":"<pre><code>__init__() \u2192 None\n</code></pre>"},{"location":"reference/python/bluerpc.log/#method-intercept","title":"method <code>intercept</code>","text":"<pre><code>intercept(\n    method: Callable,\n    request_or_iterator: Any,\n    context: ServicerContext,\n    method_name: str\n) \u2192 Any\n</code></pre> <p>This file was automatically generated via lazydocs.</p>"},{"location":"reference/python/bluerpc.service/","title":"Bluerpc.service","text":""},{"location":"reference/python/bluerpc.service/#module-bluerpcservice","title":"module <code>bluerpc.service</code>","text":""},{"location":"reference/python/bluerpc.service/#global-variables","title":"Global Variables","text":"<ul> <li>START_TIME</li> </ul>"},{"location":"reference/python/bluerpc.service/#class-bluerpcservice","title":"class <code>BlueRPCService</code>","text":"<p>Implementation of the BlueRPCService </p> <p></p>"},{"location":"reference/python/bluerpc.service/#method-__init__","title":"method <code>__init__</code>","text":"<pre><code>__init__(\n    name,\n    adapter_mac='00:00:00:00:00:00',\n    adapter_id=None,\n    keystore_path=''\n) \u2192 None\n</code></pre>"},{"location":"reference/python/bluerpc.service/#method-bleconnect","title":"method <code>BLEConnect</code>","text":"<pre><code>BLEConnect(\n    request: BLEConnectRequest,\n    context: ServicerContext\n) \u2192 BLEConnectResponse\n</code></pre>"},{"location":"reference/python/bluerpc.service/#method-bledisconnect","title":"method <code>BLEDisconnect</code>","text":"<pre><code>BLEDisconnect(request: BLEDevice, context: ServicerContext) \u2192 StatusMessage\n</code></pre>"},{"location":"reference/python/bluerpc.service/#method-blegetconnectionproperties","title":"method <code>BLEGetConnectionProperties</code>","text":"<pre><code>BLEGetConnectionProperties(\n    request: BLEDevice,\n    context: ServicerContext\n) \u2192 BLEConnectionPropertiesResponse\n</code></pre>"},{"location":"reference/python/bluerpc.service/#method-blegetdevices","title":"method <code>BLEGetDevices</code>","text":"<pre><code>BLEGetDevices(request: Void, context: ServicerContext) \u2192 BLEDevicesResponse\n</code></pre>"},{"location":"reference/python/bluerpc.service/#method-blelistservices","title":"method <code>BLEListServices</code>","text":"<pre><code>BLEListServices(\n    request: BLEDevice,\n    context: ServicerContext\n) \u2192 BLEListServicesResponse\n</code></pre>"},{"location":"reference/python/bluerpc.service/#method-blenotification","title":"method <code>BLENotification</code>","text":"<pre><code>BLENotification(\n    request: BLENotificationRequest,\n    context: ServicerContext\n) \u2192 StatusMessage\n</code></pre>"},{"location":"reference/python/bluerpc.service/#method-blepair","title":"method <code>BLEPair</code>","text":"<pre><code>BLEPair(request: BLEPairingRequest, context: ServicerContext) \u2192 StatusMessage\n</code></pre>"},{"location":"reference/python/bluerpc.service/#method-blepaircode","title":"method <code>BLEPairCode</code>","text":"<pre><code>BLEPairCode(\n    request: BLEPairingCodeRequest,\n    context: ServicerContext\n) \u2192 StatusMessage\n</code></pre>"},{"location":"reference/python/bluerpc.service/#method-blereadcharacteristic","title":"method <code>BLEReadCharacteristic</code>","text":"<pre><code>BLEReadCharacteristic(\n    request: BLEReadCharacteristicRequest,\n    context: ServicerContext\n) \u2192 BLEReadResponse\n</code></pre>"},{"location":"reference/python/bluerpc.service/#method-blereaddescriptor","title":"method <code>BLEReadDescriptor</code>","text":"<pre><code>BLEReadDescriptor(\n    request: BLEReadDescriptorRequest,\n    context: ServicerContext\n) \u2192 BLEReadResponse\n</code></pre>"},{"location":"reference/python/bluerpc.service/#method-blereceivedisconnect","title":"method <code>BLEReceiveDisconnect</code>","text":"<pre><code>BLEReceiveDisconnect(request: Void, context: ServicerContext) \u2192 BLEDevice\n</code></pre>"},{"location":"reference/python/bluerpc.service/#method-blereceivenotifications","title":"method <code>BLEReceiveNotifications</code>","text":"<pre><code>BLEReceiveNotifications(\n    request: Void,\n    context: ServicerContext\n) \u2192 BLENotificationResponse\n</code></pre>"},{"location":"reference/python/bluerpc.service/#method-blereceivescan","title":"method <code>BLEReceiveScan</code>","text":"<pre><code>BLEReceiveScan(request: Void, context: ServicerContext) \u2192 BLEScanResponse\n</code></pre>"},{"location":"reference/python/bluerpc.service/#method-blescanstart","title":"method <code>BLEScanStart</code>","text":"<pre><code>BLEScanStart(request: BLEScanRequest, context: ServicerContext) \u2192 StatusMessage\n</code></pre>"},{"location":"reference/python/bluerpc.service/#method-blescanstop","title":"method <code>BLEScanStop</code>","text":"<pre><code>BLEScanStop(request: Void, context: ServicerContext) \u2192 StatusMessage\n</code></pre>"},{"location":"reference/python/bluerpc.service/#method-bleunpair","title":"method <code>BLEUnpair</code>","text":"<pre><code>BLEUnpair(request: BLEDevice, context: ServicerContext) \u2192 StatusMessage\n</code></pre>"},{"location":"reference/python/bluerpc.service/#method-blewritecharacteristic","title":"method <code>BLEWriteCharacteristic</code>","text":"<pre><code>BLEWriteCharacteristic(\n    request: BLEWriteCharacteristicRequest,\n    context: ServicerContext\n) \u2192 StatusMessage\n</code></pre>"},{"location":"reference/python/bluerpc.service/#method-blewritedescriptor","title":"method <code>BLEWriteDescriptor</code>","text":"<pre><code>BLEWriteDescriptor(\n    request: BLEWriteDescriptorRequest,\n    context: ServicerContext\n) \u2192 StatusMessage\n</code></pre>"},{"location":"reference/python/bluerpc.service/#method-hello","title":"method <code>Hello</code>","text":"<pre><code>Hello(request: HelloRequest, context: ServicerContext) \u2192 HelloResponse\n</code></pre>"},{"location":"reference/python/bluerpc.service/#method-setkeystore","title":"method <code>SetKeystore</code>","text":"<pre><code>SetKeystore(\n    request: SetKeystoreRequest,\n    context: ServicerContext\n) \u2192 StatusMessage\n</code></pre>"},{"location":"reference/python/bluerpc.service/#method-restart","title":"method <code>restart</code>","text":"<pre><code>restart()\n</code></pre>"},{"location":"reference/python/bluerpc.service/#method-rpc_scan_disconnect","title":"method <code>rpc_scan_disconnect</code>","text":"<pre><code>rpc_scan_disconnect(context: ServicerContext)\n</code></pre> <p>This file was automatically generated via lazydocs.</p>"},{"location":"reference/python/bluerpc.utils/","title":"Bluerpc.utils","text":""},{"location":"reference/python/bluerpc.utils/#module-bluerpcutils","title":"module <code>bluerpc.utils</code>","text":""},{"location":"reference/python/bluerpc.utils/#global-variables","title":"Global Variables","text":"<ul> <li>ADAPTER_ADDRESS</li> <li>DEFAULT_ADDRESS</li> </ul>"},{"location":"reference/python/bluerpc.utils/#function-validate_mac","title":"function <code>validate_mac</code>","text":"<pre><code>validate_mac(addr: str) \u2192 bool\n</code></pre> <p>Mac address validation regex </p> <p>Args:</p> <ul> <li><code>addr</code>:  the mac address (with colons) </li> </ul> <p>Returns:  True if this is a valid mac address </p> <p></p>"},{"location":"reference/python/bluerpc.utils/#function-validate_uuid","title":"function <code>validate_uuid</code>","text":"<pre><code>validate_uuid(u: str) \u2192 bool\n</code></pre> <p>UUID validation regex </p> <p>Args:</p> <ul> <li><code>addr</code>:  the uuid </li> </ul> <p>Returns:  True if this is a valid UUID </p> <p></p>"},{"location":"reference/python/bluerpc.utils/#function-get_appdata_dir","title":"function <code>get_appdata_dir</code>","text":"<pre><code>get_appdata_dir() \u2192 Path\n</code></pre> <p>Get the path to a bluerpc appdata folder </p> <p>Returns:   a path object to this folder </p> <p></p>"},{"location":"reference/python/bluerpc.utils/#function-get_version","title":"function <code>get_version</code>","text":"<pre><code>get_version() \u2192 str\n</code></pre> <p>Helper to get the current version of our package </p> <p>Returns:   the version if found, else 0.0.0 </p> <p></p>"},{"location":"reference/python/bluerpc.utils/#function-get_kwargs","title":"function <code>get_kwargs</code>","text":"<pre><code>get_kwargs(adapter: str = None) \u2192 dict[str, str]\n</code></pre> <p>Get kwargs for bleak scanner/client </p> <p>Args:</p> <ul> <li><code>adapter</code>:  adapter identifier </li> </ul> <p>Returns:  an array of kwargs </p> <p></p>"},{"location":"reference/python/bluerpc.utils/#function-list_adapters","title":"function <code>list_adapters</code>","text":"<pre><code>list_adapters() \u2192 dict[str, AdapterDetails]\n</code></pre> <p>List available bluetooth adapters </p> <p>Returns:   a dict of adapters and their details </p> <p></p>"},{"location":"reference/python/bluerpc.utils/#function-find_adapter_by_address","title":"function <code>find_adapter_by_address</code>","text":"<pre><code>find_adapter_by_address(address: str) \u2192 str | None\n</code></pre> <p>Find an adapter from a mac address </p> <p>Args:</p> <ul> <li><code>address</code>:  the mac address of the adapter </li> </ul> <p>Returns:  the adapter identifier </p> <p></p>"},{"location":"reference/python/bluerpc.utils/#function-list_adapters_mac","title":"function <code>list_adapters_mac</code>","text":"<pre><code>list_adapters_mac() \u2192 str\n</code></pre> <p>List adapters identifiables by mac address </p> <p>Returns:   a list of adapter mac address </p> <p></p>"},{"location":"reference/python/bluerpc.utils/#function-get_net_mac","title":"function <code>get_net_mac</code>","text":"<pre><code>get_net_mac() \u2192 str\n</code></pre> <p>Get mac address of the default network interface (or the first one if no default) </p> <p>Returns:   a mac address </p> <p></p>"},{"location":"reference/python/bluerpc.utils/#function-get_net_ips","title":"function <code>get_net_ips</code>","text":"<pre><code>get_net_ips(v6e=True) \u2192 str\n</code></pre> <p>Get ip addresses of the network interfaces </p> <p>Args:</p> <ul> <li><code>v6e</code>:  return also IPv6 addresses </li> </ul> <p>Returns:  a list of ip addresses (the first is the one of the default interface) </p> <p>This file was automatically generated via lazydocs.</p>"},{"location":"workers/android/","title":"Android","text":"<p>The android worker is available for Android &gt;= 4.3 and Android TV.</p>"},{"location":"workers/android/#installation","title":"Installation","text":"<p>You can install the android worker, download the apk from the latest release here.</p> <p>On your smartphone, you can just click on the apk file to install it.</p> <p>On android tv, you can put the apk file on a usb drive and use a file explorer on the tv to install it. You can also install it using adb by enabling developer mode and debugging on the tv, and by typing on your pc <code>adb connect &lt;tvip&gt;</code> and <code>adb install &lt;path_to_apk&gt;</code>.</p>"},{"location":"workers/android/#permissions","title":"Permissions","text":"<p>The application will ask for a number of permissions on the first start, here is an explanation for these permissions.</p> <ul> <li>Bluetooth connect: starting from android 12, this is required to connect to a bluetooth device</li> <li>Nearby devices/Bluetooth find: starting from android 10, this is required to scan for bluetooth devices</li> <li>Position: starting from android 6, the location permission is required to scan for bluetooth devices, on the newest devices, you need both this permission and the previous one as the previous one is too restrictive for scanning. It is required to click \"Always Allow\" as the worker will be running in background.</li> </ul> <p>On start, the application will also ask you to enable (if not already enabled) bluetooth and location</p>"},{"location":"workers/android/#configuration","title":"Configuration","text":"<p>To configure the application, click on the settings button.</p> Command Default Description Device Name name of your device the name of the worker GRPC Port 5052 the port of the worker Background Scanning use filters background scanning mode (only shown if your version of android is &gt; 8) Enable mDNS True enable autodiscovery Enable TLS False enable encryption, to enable this, you will first need to select a keystore by clicking on the button below the checkbox <p>Background Scanning (ADVANCED):</p> <p>On android &gt; 8, new limitations were introduced for bluetooth background scanning.</p> <ul> <li>Force screen to stay ON: if you stay on the app, the screen will stay on forever, preventing to app to go to background</li> <li>Ignore background limtations: the worker will report that there is no scanning limitations on this device, use this option for example if you already have an app keeping the screen on</li> <li>Use filters: this is the default option, the worker will report that there is a scanning limitation and the client will need to provide scanning filters to allow scanning</li> </ul>"},{"location":"workers/python/","title":"Python","text":"<p>The python worker is available for Windows, Linux and MacOS.</p>"},{"location":"workers/python/#installation","title":"Installation","text":"<p>You can install the python worker using pip with <code>pip install bluerpc</code>. You can then run it with the command <code>bluerpc</code>.</p> <p>You can also run it using docker with this image <code>ghcr.io/bluerpc/worker</code>, an example docker-compose file is provided here.</p>"},{"location":"workers/python/#configuration","title":"Configuration","text":"Command Default Description debug False enable debug logging, default level is info bind_addr [::]:5052 the bind address of the worker name hostname of the pc the name of the worker adapter autoselect the mac address of the bluetooth adapter to use (linux only) list-adapters False list available bluetooth adapters (linux only) keystore no encryption path to a keystore for encryption support"}]}